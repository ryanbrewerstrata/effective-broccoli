{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.0", "generated_at": "2022-12-02T17:23:05.225763Z", "invocation_id": "dd6fad00-e2d0-4492-bae4-d70f953d3402", "env": {}, "project_id": "440382162e34fa4c32720474e6c34fee", "user_id": "023992bd-20de-4e7d-8043-9973a15f533e", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.compare_sql.stg_metrics__raw_kpi_labor": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.compare_sql.compare.DIM_METRIC", "source.compare_sql.compare.COMPONENT"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "snowflake_warehouse": "DATA_ANALYSIS_WH", "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "Compare", "fqn": ["compare_sql", "Metrics", "stg_metrics__raw_kpi_labor"], "unique_id": "model.compare_sql.stg_metrics__raw_kpi_labor", "raw_code": "with MetricNumerator as (\r\n    select distinct\r\n        compnum.CalendarYear, \r\n        compnum.CalendarMonth, \r\n        compnum.CALENDARYEARMONTH,\r\n        compnum.OrgPin, \r\n        compnum.StrataID, \r\n        compnum.SPHEntityID, \r\n        compnum.SG2SERVICELINE, \r\n        compnum.SG2CAREFAMILY,\r\n        compnum.SPHDepartmentRollup, \r\n        compnum.SPHCLINICALROLLUP, \r\n        compnum.SPHJOBCODEROLLUP, \r\n        compnum.LEVELOFDETAIL,\r\n        compnum.Value as NUMERATORValue, \r\n        metnum.MetricID, \r\n        metnum.componentid_numerator,\r\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\r\n    from {{ source('compare', 'COMPONENT') }} compnum\r\n    inner join {{ source('compare', 'DIM_METRIC') }} metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\r\n    where metnum.moduleid in (1, 3)\r\n        and compnum.orgpin<>0222\r\n),MetricDenominator as (\r\n    select distinct \r\n        compden.CalendarYear, \r\n        compden.CalendarMonth, \r\n        compden.CALENDARYEARMONTH,\r\n        compden.OrgPin, \r\n        compden.StrataID, \r\n        compden.SPHEntityID, \r\n        compden.SG2SERVICELINE, \r\n        compden.SG2CAREFAMILY,\r\n        compden.SPHDepartmentRollup, \r\n        compden.SPHCLINICALROLLUP, \r\n        compden.SPHJOBCODEROLLUP, \r\n        compden.LEVELOFDETAIL,\r\n        compden.Value as DenominatorValue, \r\n        metden.MetricID, \r\n        metden.COMPONENTID_DENOMINATOR,\r\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\r\n    from {{ source('compare', 'COMPONENT') }} compden\r\n    inner join {{ source('compare', 'DIM_METRIC') }} metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\r\n    where metden.moduleid in (1, 3)\r\n        and compden.orgpin<>0222\r\n)\r\nselect distinct \r\n    metnum.CalendarYear, \r\n    metnum.CalendarMonth,\r\n    metnum.CalendarYearMonth,\r\n    metnum.OrgPin, \r\n    metnum.StrataID, \r\n    metnum.SPHEntityID, \r\n    metnum.SG2SERVICELINE, \r\n    metnum.SG2CAREFAMILY,\r\n    metnum.SPHDepartmentRollup, \r\n    metnum.SPHCLINICALROLLUP,\r\n    metnum.SPHJOBCODEROLLUP, \r\n    metnum.LevelOfDetail,\r\n    metnum.MetricID, \r\n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\r\n    metnum.NUMERATORValue, \r\n    metden.DenominatorValue,\r\n    metnum.IsValidComponentNumerator,\r\n    metden.IsValidComponentDenominator\r\nfrom MetricNumerator metnum\r\ninner join MetricDenominator metden on\r\n    metnum.CALENDARYEARMonth = metden.CALENDARYEARMonth\r\n    and metnum.OrgPin = metden.OrgPin\r\n    and metnum.StrataID = metden.StrataID\r\n    and metnum.SPHEntityID = metden.SPHEntityID\r\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\r\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\r\n    and metnum.SPHDEPARTMENTROLLUP = metden.SPHDEPARTMENTROLLUP\r\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\r\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\r\n    and metnum.LevelOfDetail = metden.LevelOfDetail\r\n    and metnum.MetricID = metden.MetricID", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Metrics\\stg_metrics__raw_kpi_labor.sql", "original_file_path": "Models\\Metrics\\stg_metrics__raw_kpi_labor.sql", "name": "stg_metrics__raw_kpi_labor", "alias": "stg_metrics__raw_kpi_labor", "checksum": {"name": "sha256", "checksum": "d3d863c50581d184732a0cebc6f3de37e02aef3bf7456402003326e56c1acd26"}, "tags": [], "refs": [], "sources": [["compare", "DIM_METRIC"], ["compare", "COMPONENT"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Metrics\\stg_metrics__raw_kpi_labor.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "ephemeral", "snowflake_warehouse": "DATA_ANALYSIS_WH"}, "created_at": 1669921393.949084, "compiled_code": "with MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        compnum.Value as NUMERATORValue, \n        metnum.MetricID, \n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (1, 3)\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        compden.Value as DenominatorValue, \n        metden.MetricID, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (1, 3)\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth,\n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on\n    metnum.CALENDARYEARMonth = metden.CALENDARYEARMonth\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHDEPARTMENTROLLUP = metden.SPHDEPARTMENTROLLUP\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.LevelOfDetail = metden.LevelOfDetail\n    and metnum.MetricID = metden.MetricID", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.compare_sql.int_metrics_final": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.compare_sql.int_metrics__obvious_exclusions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "snowflake_warehouse": "DATA_ANALYSIS_WH", "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "Compare", "fqn": ["compare_sql", "Metrics", "int_metrics_final"], "unique_id": "model.compare_sql.int_metrics_final", "raw_code": "SELECT\r\n    CalendarYear, \r\n    CalendarMonth,\r\n    CalendarYearMonth,\r\n    OrgPin, \r\n    StrataID, \r\n    SPHEntityID, \r\n    SG2SERVICELINE, \r\n    SG2CAREFAMILY,\r\n    SPHDepartmentRollup, \r\n    SPHCLINICALROLLUP,\r\n    SPHJOBCODEROLLUP, \r\n    LevelOfDetail,\r\n    MetricID, \r\n    Value,\r\n    NUMERATORValue, \r\n    DenominatorValue,\r\n    IsValidComponentNumerator,\r\n    IsValidComponentDenominator,\r\n    ISVALIDMETRIC\r\nFROM {{ ref('int_metrics__obvious_exclusions') }}", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Metrics\\int_metrics_final.sql", "original_file_path": "Models\\Metrics\\int_metrics_final.sql", "name": "int_metrics_final", "alias": "int_metrics_final", "checksum": {"name": "sha256", "checksum": "a3dbca15776c17e4f49365ccacf48f7a5b59388a0054a9ed3637bf6d84ccd737"}, "tags": [], "refs": [["int_metrics__obvious_exclusions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Metrics\\int_metrics_final.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "ephemeral", "snowflake_warehouse": "DATA_ANALYSIS_WH"}, "created_at": 1669921393.9600863, "compiled_code": "with __dbt__cte__stg_metrics__raw_kpi_labor as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        compnum.Value as NUMERATORValue, \n        metnum.MetricID, \n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (1, 3)\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        compden.Value as DenominatorValue, \n        metden.MetricID, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (1, 3)\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth,\n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on\n    metnum.CALENDARYEARMonth = metden.CALENDARYEARMonth\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHDEPARTMENTROLLUP = metden.SPHDEPARTMENTROLLUP\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.LevelOfDetail = metden.LevelOfDetail\n    and metnum.MetricID = metden.MetricID\n),  __dbt__cte__stg_metrics__raw_overhead as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        metnum.MetricID,\n        compnum.Value as NUMERATORValue,\n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (4)\n        and compnum.LEVELOFDETAIL = 'SPHDEPARTMENTROLLUP'\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        metden.MetricID,\n        compden.Value as DenominatorValue, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (4)\n        and compden.LEVELOFDETAIL = 'System'\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth, \n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on \n    metnum.CALENDARYEAR = metden.CALENDARYEAR\n    and metnum.CALENDARMONTH = metden.CALENDARMONTH\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.MetricID = metden.MetricID\n),  __dbt__cte__stg_metrics__raw_unioned as (\nSELECT \n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator\nFROM __dbt__cte__stg_metrics__raw_kpi_labor\n\nUNION\n\nSELECT\n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator\nFROM __dbt__cte__stg_metrics__raw_overhead\n),  __dbt__cte__int_metrics__obvious_exclusions as (\nSELECT \n    MET.CalendarYear, \n    MET.CalendarMonth,\n    MET.CalendarYearMonth,\n    MET.OrgPin, \n    MET.StrataID, \n    MET.SPHEntityID, \n    MET.SG2SERVICELINE, \n    MET.SG2CAREFAMILY,\n    MET.SPHDepartmentRollup, \n    MET.SPHCLINICALROLLUP,\n    MET.SPHJOBCODEROLLUP, \n    MET.LevelOfDetail,\n    MET.MetricID, \n    MET.Value,\n    MET.NUMERATORValue, \n    MET.DenominatorValue,\n    MET.IsValidComponentNumerator,\n    MET.IsValidComponentDenominator,\n    CASE\n        WHEN (MET.IsValidComponentNumerator AND MET.IsValidComponentDenominator)=FALSE THEN FALSE\n        WHEN UPPER(DMOD.MODULENAME)='LABOR' AND NOT(MET.VALUE BETWEEN -1000000000 AND 1000000000) THEN FALSE\n        ELSE TRUE\n    END AS ISVALIDMETRIC\nFROM __dbt__cte__stg_metrics__raw_unioned MET\nINNER JOIN Datalake_Staging.compare.DIM_METRIC DMET on MET.METRICID=DMET.METRICID\nINNER JOIN Datalake_Staging.compare.DIM_MODULE DMOD on DMET.MODULEID=DMOD.MODULEID\n)SELECT\n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator,\n    ISVALIDMETRIC\nFROM __dbt__cte__int_metrics__obvious_exclusions", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.compare_sql.stg_metrics__raw_kpi_labor", "sql": " __dbt__cte__stg_metrics__raw_kpi_labor as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        compnum.Value as NUMERATORValue, \n        metnum.MetricID, \n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (1, 3)\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        compden.Value as DenominatorValue, \n        metden.MetricID, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (1, 3)\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth,\n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on\n    metnum.CALENDARYEARMonth = metden.CALENDARYEARMonth\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHDEPARTMENTROLLUP = metden.SPHDEPARTMENTROLLUP\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.LevelOfDetail = metden.LevelOfDetail\n    and metnum.MetricID = metden.MetricID\n)"}, {"id": "model.compare_sql.stg_metrics__raw_overhead", "sql": " __dbt__cte__stg_metrics__raw_overhead as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        metnum.MetricID,\n        compnum.Value as NUMERATORValue,\n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (4)\n        and compnum.LEVELOFDETAIL = 'SPHDEPARTMENTROLLUP'\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        metden.MetricID,\n        compden.Value as DenominatorValue, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (4)\n        and compden.LEVELOFDETAIL = 'System'\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth, \n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on \n    metnum.CALENDARYEAR = metden.CALENDARYEAR\n    and metnum.CALENDARMONTH = metden.CALENDARMONTH\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.MetricID = metden.MetricID\n)"}, {"id": "model.compare_sql.stg_metrics__raw_unioned", "sql": " __dbt__cte__stg_metrics__raw_unioned as (\nSELECT \n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator\nFROM __dbt__cte__stg_metrics__raw_kpi_labor\n\nUNION\n\nSELECT\n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator\nFROM __dbt__cte__stg_metrics__raw_overhead\n)"}, {"id": "model.compare_sql.int_metrics__obvious_exclusions", "sql": " __dbt__cte__int_metrics__obvious_exclusions as (\nSELECT \n    MET.CalendarYear, \n    MET.CalendarMonth,\n    MET.CalendarYearMonth,\n    MET.OrgPin, \n    MET.StrataID, \n    MET.SPHEntityID, \n    MET.SG2SERVICELINE, \n    MET.SG2CAREFAMILY,\n    MET.SPHDepartmentRollup, \n    MET.SPHCLINICALROLLUP,\n    MET.SPHJOBCODEROLLUP, \n    MET.LevelOfDetail,\n    MET.MetricID, \n    MET.Value,\n    MET.NUMERATORValue, \n    MET.DenominatorValue,\n    MET.IsValidComponentNumerator,\n    MET.IsValidComponentDenominator,\n    CASE\n        WHEN (MET.IsValidComponentNumerator AND MET.IsValidComponentDenominator)=FALSE THEN FALSE\n        WHEN UPPER(DMOD.MODULENAME)='LABOR' AND NOT(MET.VALUE BETWEEN -1000000000 AND 1000000000) THEN FALSE\n        ELSE TRUE\n    END AS ISVALIDMETRIC\nFROM __dbt__cte__stg_metrics__raw_unioned MET\nINNER JOIN Datalake_Staging.compare.DIM_METRIC DMET on MET.METRICID=DMET.METRICID\nINNER JOIN Datalake_Staging.compare.DIM_MODULE DMOD on DMET.MODULEID=DMOD.MODULEID\n)"}], "relation_name": null}, "model.compare_sql.metric": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.compare_sql.int_metrics_final"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "snowflake_warehouse": "DATA_ANALYSIS_WH", "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "Compare", "fqn": ["compare_sql", "Metrics", "metric"], "unique_id": "model.compare_sql.metric", "raw_code": "{{ config(\r\n    materialized=\"table\"\r\n) }}\r\n\r\nSELECT * FROM {{ ref('int_metrics_final') }}", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Metrics\\metric.sql", "original_file_path": "Models\\Metrics\\metric.sql", "name": "metric", "alias": "metric", "checksum": {"name": "sha256", "checksum": "a1c007bbfd0db789c5b21c47f92f45b7b16d6b8783635b6b3b75c95064b2db53"}, "tags": [], "refs": [["int_metrics_final"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Metrics\\metric.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "table", "snowflake_warehouse": "DATA_ANALYSIS_WH"}, "created_at": 1669921393.9620562, "compiled_code": "\n\nwith __dbt__cte__stg_metrics__raw_kpi_labor as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        compnum.Value as NUMERATORValue, \n        metnum.MetricID, \n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (1, 3)\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        compden.Value as DenominatorValue, \n        metden.MetricID, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (1, 3)\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth,\n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on\n    metnum.CALENDARYEARMonth = metden.CALENDARYEARMonth\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHDEPARTMENTROLLUP = metden.SPHDEPARTMENTROLLUP\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.LevelOfDetail = metden.LevelOfDetail\n    and metnum.MetricID = metden.MetricID\n),  __dbt__cte__stg_metrics__raw_overhead as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        metnum.MetricID,\n        compnum.Value as NUMERATORValue,\n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (4)\n        and compnum.LEVELOFDETAIL = 'SPHDEPARTMENTROLLUP'\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        metden.MetricID,\n        compden.Value as DenominatorValue, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (4)\n        and compden.LEVELOFDETAIL = 'System'\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth, \n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on \n    metnum.CALENDARYEAR = metden.CALENDARYEAR\n    and metnum.CALENDARMONTH = metden.CALENDARMONTH\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.MetricID = metden.MetricID\n),  __dbt__cte__stg_metrics__raw_unioned as (\nSELECT \n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator\nFROM __dbt__cte__stg_metrics__raw_kpi_labor\n\nUNION\n\nSELECT\n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator\nFROM __dbt__cte__stg_metrics__raw_overhead\n),  __dbt__cte__int_metrics__obvious_exclusions as (\nSELECT \n    MET.CalendarYear, \n    MET.CalendarMonth,\n    MET.CalendarYearMonth,\n    MET.OrgPin, \n    MET.StrataID, \n    MET.SPHEntityID, \n    MET.SG2SERVICELINE, \n    MET.SG2CAREFAMILY,\n    MET.SPHDepartmentRollup, \n    MET.SPHCLINICALROLLUP,\n    MET.SPHJOBCODEROLLUP, \n    MET.LevelOfDetail,\n    MET.MetricID, \n    MET.Value,\n    MET.NUMERATORValue, \n    MET.DenominatorValue,\n    MET.IsValidComponentNumerator,\n    MET.IsValidComponentDenominator,\n    CASE\n        WHEN (MET.IsValidComponentNumerator AND MET.IsValidComponentDenominator)=FALSE THEN FALSE\n        WHEN UPPER(DMOD.MODULENAME)='LABOR' AND NOT(MET.VALUE BETWEEN -1000000000 AND 1000000000) THEN FALSE\n        ELSE TRUE\n    END AS ISVALIDMETRIC\nFROM __dbt__cte__stg_metrics__raw_unioned MET\nINNER JOIN Datalake_Staging.compare.DIM_METRIC DMET on MET.METRICID=DMET.METRICID\nINNER JOIN Datalake_Staging.compare.DIM_MODULE DMOD on DMET.MODULEID=DMOD.MODULEID\n),  __dbt__cte__int_metrics_final as (\nSELECT\n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator,\n    ISVALIDMETRIC\nFROM __dbt__cte__int_metrics__obvious_exclusions\n)SELECT * FROM __dbt__cte__int_metrics_final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.compare_sql.stg_metrics__raw_kpi_labor", "sql": " __dbt__cte__stg_metrics__raw_kpi_labor as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        compnum.Value as NUMERATORValue, \n        metnum.MetricID, \n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (1, 3)\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        compden.Value as DenominatorValue, \n        metden.MetricID, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (1, 3)\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth,\n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on\n    metnum.CALENDARYEARMonth = metden.CALENDARYEARMonth\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHDEPARTMENTROLLUP = metden.SPHDEPARTMENTROLLUP\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.LevelOfDetail = metden.LevelOfDetail\n    and metnum.MetricID = metden.MetricID\n)"}, {"id": "model.compare_sql.stg_metrics__raw_overhead", "sql": " __dbt__cte__stg_metrics__raw_overhead as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        metnum.MetricID,\n        compnum.Value as NUMERATORValue,\n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (4)\n        and compnum.LEVELOFDETAIL = 'SPHDEPARTMENTROLLUP'\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        metden.MetricID,\n        compden.Value as DenominatorValue, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (4)\n        and compden.LEVELOFDETAIL = 'System'\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth, \n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on \n    metnum.CALENDARYEAR = metden.CALENDARYEAR\n    and metnum.CALENDARMONTH = metden.CALENDARMONTH\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.MetricID = metden.MetricID\n)"}, {"id": "model.compare_sql.stg_metrics__raw_unioned", "sql": " __dbt__cte__stg_metrics__raw_unioned as (\nSELECT \n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator\nFROM __dbt__cte__stg_metrics__raw_kpi_labor\n\nUNION\n\nSELECT\n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator\nFROM __dbt__cte__stg_metrics__raw_overhead\n)"}, {"id": "model.compare_sql.int_metrics__obvious_exclusions", "sql": " __dbt__cte__int_metrics__obvious_exclusions as (\nSELECT \n    MET.CalendarYear, \n    MET.CalendarMonth,\n    MET.CalendarYearMonth,\n    MET.OrgPin, \n    MET.StrataID, \n    MET.SPHEntityID, \n    MET.SG2SERVICELINE, \n    MET.SG2CAREFAMILY,\n    MET.SPHDepartmentRollup, \n    MET.SPHCLINICALROLLUP,\n    MET.SPHJOBCODEROLLUP, \n    MET.LevelOfDetail,\n    MET.MetricID, \n    MET.Value,\n    MET.NUMERATORValue, \n    MET.DenominatorValue,\n    MET.IsValidComponentNumerator,\n    MET.IsValidComponentDenominator,\n    CASE\n        WHEN (MET.IsValidComponentNumerator AND MET.IsValidComponentDenominator)=FALSE THEN FALSE\n        WHEN UPPER(DMOD.MODULENAME)='LABOR' AND NOT(MET.VALUE BETWEEN -1000000000 AND 1000000000) THEN FALSE\n        ELSE TRUE\n    END AS ISVALIDMETRIC\nFROM __dbt__cte__stg_metrics__raw_unioned MET\nINNER JOIN Datalake_Staging.compare.DIM_METRIC DMET on MET.METRICID=DMET.METRICID\nINNER JOIN Datalake_Staging.compare.DIM_MODULE DMOD on DMET.MODULEID=DMOD.MODULEID\n)"}, {"id": "model.compare_sql.int_metrics_final", "sql": " __dbt__cte__int_metrics_final as (\nSELECT\n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator,\n    ISVALIDMETRIC\nFROM __dbt__cte__int_metrics__obvious_exclusions\n)"}], "relation_name": "Datalake_Staging.Compare.metric"}, "model.compare_sql.stg_metrics__raw_overhead": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.compare_sql.compare.DIM_METRIC", "source.compare_sql.compare.COMPONENT"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "snowflake_warehouse": "DATA_ANALYSIS_WH", "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "Compare", "fqn": ["compare_sql", "Metrics", "stg_metrics__raw_overhead"], "unique_id": "model.compare_sql.stg_metrics__raw_overhead", "raw_code": "with MetricNumerator as (\r\n    select distinct\r\n        compnum.CalendarYear, \r\n        compnum.CalendarMonth, \r\n        compnum.CALENDARYEARMONTH,\r\n        compnum.OrgPin, \r\n        compnum.StrataID, \r\n        compnum.SPHEntityID, \r\n        compnum.SG2SERVICELINE, \r\n        compnum.SG2CAREFAMILY,\r\n        compnum.SPHDepartmentRollup, \r\n        compnum.SPHCLINICALROLLUP, \r\n        compnum.SPHJOBCODEROLLUP, \r\n        compnum.LEVELOFDETAIL,\r\n        metnum.MetricID,\r\n        compnum.Value as NUMERATORValue,\r\n        metnum.componentid_numerator,\r\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\r\n    from {{ source('compare', 'COMPONENT') }} compnum\r\n    inner join {{ source('compare', 'DIM_METRIC') }} metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\r\n    where metnum.moduleid in (4)\r\n        and compnum.LEVELOFDETAIL = 'SPHDEPARTMENTROLLUP'\r\n        and compnum.orgpin<>0222\r\n),MetricDenominator as (\r\n    select distinct \r\n        compden.CalendarYear, \r\n        compden.CalendarMonth, \r\n        compden.CALENDARYEARMONTH,\r\n        compden.OrgPin, \r\n        compden.StrataID, \r\n        compden.SPHEntityID, \r\n        compden.SG2SERVICELINE, \r\n        compden.SG2CAREFAMILY,\r\n        compden.SPHDepartmentRollup, \r\n        compden.SPHCLINICALROLLUP, \r\n        compden.SPHJOBCODEROLLUP, \r\n        compden.LEVELOFDETAIL,\r\n        metden.MetricID,\r\n        compden.Value as DenominatorValue, \r\n        metden.COMPONENTID_DENOMINATOR,\r\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\r\n    from {{ source('compare', 'COMPONENT') }} compden\r\n    inner join {{ source('compare', 'DIM_METRIC') }} metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\r\n    where metden.moduleid in (4)\r\n        and compden.LEVELOFDETAIL = 'System'\r\n        and compden.orgpin<>0222\r\n)\r\nselect distinct \r\n    metnum.CalendarYear, \r\n    metnum.CalendarMonth, \r\n    metnum.CalendarYearMonth,\r\n    metnum.OrgPin, \r\n    metnum.StrataID, \r\n    metnum.SPHEntityID, \r\n    metnum.SG2SERVICELINE, \r\n    metnum.SG2CAREFAMILY,\r\n    metnum.SPHDepartmentRollup, \r\n    metnum.SPHCLINICALROLLUP,\r\n    metnum.SPHJOBCODEROLLUP, \r\n    metnum.LevelOfDetail,\r\n    metnum.MetricID, \r\n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\r\n    metnum.NUMERATORValue, \r\n    metden.DenominatorValue,\r\n    metnum.IsValidComponentNumerator,\r\n    metden.IsValidComponentDenominator\r\nfrom MetricNumerator metnum\r\ninner join MetricDenominator metden on \r\n    metnum.CALENDARYEAR = metden.CALENDARYEAR\r\n    and metnum.CALENDARMONTH = metden.CALENDARMONTH\r\n    and metnum.OrgPin = metden.OrgPin\r\n    and metnum.StrataID = metden.StrataID\r\n    and metnum.SPHEntityID = metden.SPHEntityID\r\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\r\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\r\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\r\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\r\n    and metnum.MetricID = metden.MetricID", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Metrics\\stg_metrics__raw_overhead.sql", "original_file_path": "Models\\Metrics\\stg_metrics__raw_overhead.sql", "name": "stg_metrics__raw_overhead", "alias": "stg_metrics__raw_overhead", "checksum": {"name": "sha256", "checksum": "2426bf11a74035836a71c9e062d410f905d1c027f9521691806e0462a25f925f"}, "tags": [], "refs": [], "sources": [["compare", "DIM_METRIC"], ["compare", "COMPONENT"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Metrics\\stg_metrics__raw_overhead.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "ephemeral", "snowflake_warehouse": "DATA_ANALYSIS_WH"}, "created_at": 1669921393.9650548, "compiled_code": "with MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        metnum.MetricID,\n        compnum.Value as NUMERATORValue,\n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (4)\n        and compnum.LEVELOFDETAIL = 'SPHDEPARTMENTROLLUP'\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        metden.MetricID,\n        compden.Value as DenominatorValue, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (4)\n        and compden.LEVELOFDETAIL = 'System'\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth, \n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on \n    metnum.CALENDARYEAR = metden.CALENDARYEAR\n    and metnum.CALENDARMONTH = metden.CALENDARMONTH\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.MetricID = metden.MetricID", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.compare_sql.int_metrics__obvious_exclusions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.compare_sql.compare.DIM_METRIC", "source.compare_sql.compare.DIM_MODULE", "model.compare_sql.stg_metrics__raw_unioned"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "snowflake_warehouse": "DATA_ANALYSIS_WH", "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "Compare", "fqn": ["compare_sql", "Metrics", "int_metrics__obvious_exclusions"], "unique_id": "model.compare_sql.int_metrics__obvious_exclusions", "raw_code": "SELECT \r\n    MET.CalendarYear, \r\n    MET.CalendarMonth,\r\n    MET.CalendarYearMonth,\r\n    MET.OrgPin, \r\n    MET.StrataID, \r\n    MET.SPHEntityID, \r\n    MET.SG2SERVICELINE, \r\n    MET.SG2CAREFAMILY,\r\n    MET.SPHDepartmentRollup, \r\n    MET.SPHCLINICALROLLUP,\r\n    MET.SPHJOBCODEROLLUP, \r\n    MET.LevelOfDetail,\r\n    MET.MetricID, \r\n    MET.Value,\r\n    MET.NUMERATORValue, \r\n    MET.DenominatorValue,\r\n    MET.IsValidComponentNumerator,\r\n    MET.IsValidComponentDenominator,\r\n    CASE\r\n        WHEN (MET.IsValidComponentNumerator AND MET.IsValidComponentDenominator)=FALSE THEN FALSE\r\n        WHEN UPPER(DMOD.MODULENAME)='LABOR' AND NOT(MET.VALUE BETWEEN -1000000000 AND 1000000000) THEN FALSE\r\n        ELSE TRUE\r\n    END AS ISVALIDMETRIC\r\nFROM {{ ref('stg_metrics__raw_unioned') }} MET\r\nINNER JOIN {{ source('compare', 'DIM_METRIC') }} DMET on MET.METRICID=DMET.METRICID\r\nINNER JOIN {{ source('compare', 'DIM_MODULE') }} DMOD on DMET.MODULEID=DMOD.MODULEID", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Metrics\\int_metrics__obvious_exclusions.sql", "original_file_path": "Models\\Metrics\\int_metrics__obvious_exclusions.sql", "name": "int_metrics__obvious_exclusions", "alias": "int_metrics__obvious_exclusions", "checksum": {"name": "sha256", "checksum": "a678b067412f29b229c128991013b15e9bd7e91702e1d0b669cafe5b42576c12"}, "tags": [], "refs": [["stg_metrics__raw_unioned"]], "sources": [["compare", "DIM_METRIC"], ["compare", "DIM_MODULE"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Metrics\\int_metrics__obvious_exclusions.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "ephemeral", "snowflake_warehouse": "DATA_ANALYSIS_WH"}, "created_at": 1669921393.9670572, "compiled_code": "with __dbt__cte__stg_metrics__raw_kpi_labor as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        compnum.Value as NUMERATORValue, \n        metnum.MetricID, \n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (1, 3)\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        compden.Value as DenominatorValue, \n        metden.MetricID, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (1, 3)\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth,\n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on\n    metnum.CALENDARYEARMonth = metden.CALENDARYEARMonth\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHDEPARTMENTROLLUP = metden.SPHDEPARTMENTROLLUP\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.LevelOfDetail = metden.LevelOfDetail\n    and metnum.MetricID = metden.MetricID\n),  __dbt__cte__stg_metrics__raw_overhead as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        metnum.MetricID,\n        compnum.Value as NUMERATORValue,\n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (4)\n        and compnum.LEVELOFDETAIL = 'SPHDEPARTMENTROLLUP'\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        metden.MetricID,\n        compden.Value as DenominatorValue, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (4)\n        and compden.LEVELOFDETAIL = 'System'\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth, \n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on \n    metnum.CALENDARYEAR = metden.CALENDARYEAR\n    and metnum.CALENDARMONTH = metden.CALENDARMONTH\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.MetricID = metden.MetricID\n),  __dbt__cte__stg_metrics__raw_unioned as (\nSELECT \n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator\nFROM __dbt__cte__stg_metrics__raw_kpi_labor\n\nUNION\n\nSELECT\n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator\nFROM __dbt__cte__stg_metrics__raw_overhead\n)SELECT \n    MET.CalendarYear, \n    MET.CalendarMonth,\n    MET.CalendarYearMonth,\n    MET.OrgPin, \n    MET.StrataID, \n    MET.SPHEntityID, \n    MET.SG2SERVICELINE, \n    MET.SG2CAREFAMILY,\n    MET.SPHDepartmentRollup, \n    MET.SPHCLINICALROLLUP,\n    MET.SPHJOBCODEROLLUP, \n    MET.LevelOfDetail,\n    MET.MetricID, \n    MET.Value,\n    MET.NUMERATORValue, \n    MET.DenominatorValue,\n    MET.IsValidComponentNumerator,\n    MET.IsValidComponentDenominator,\n    CASE\n        WHEN (MET.IsValidComponentNumerator AND MET.IsValidComponentDenominator)=FALSE THEN FALSE\n        WHEN UPPER(DMOD.MODULENAME)='LABOR' AND NOT(MET.VALUE BETWEEN -1000000000 AND 1000000000) THEN FALSE\n        ELSE TRUE\n    END AS ISVALIDMETRIC\nFROM __dbt__cte__stg_metrics__raw_unioned MET\nINNER JOIN Datalake_Staging.compare.DIM_METRIC DMET on MET.METRICID=DMET.METRICID\nINNER JOIN Datalake_Staging.compare.DIM_MODULE DMOD on DMET.MODULEID=DMOD.MODULEID", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.compare_sql.stg_metrics__raw_kpi_labor", "sql": " __dbt__cte__stg_metrics__raw_kpi_labor as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        compnum.Value as NUMERATORValue, \n        metnum.MetricID, \n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (1, 3)\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        compden.Value as DenominatorValue, \n        metden.MetricID, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (1, 3)\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth,\n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on\n    metnum.CALENDARYEARMonth = metden.CALENDARYEARMonth\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHDEPARTMENTROLLUP = metden.SPHDEPARTMENTROLLUP\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.LevelOfDetail = metden.LevelOfDetail\n    and metnum.MetricID = metden.MetricID\n)"}, {"id": "model.compare_sql.stg_metrics__raw_overhead", "sql": " __dbt__cte__stg_metrics__raw_overhead as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        metnum.MetricID,\n        compnum.Value as NUMERATORValue,\n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (4)\n        and compnum.LEVELOFDETAIL = 'SPHDEPARTMENTROLLUP'\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        metden.MetricID,\n        compden.Value as DenominatorValue, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (4)\n        and compden.LEVELOFDETAIL = 'System'\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth, \n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on \n    metnum.CALENDARYEAR = metden.CALENDARYEAR\n    and metnum.CALENDARMONTH = metden.CALENDARMONTH\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.MetricID = metden.MetricID\n)"}, {"id": "model.compare_sql.stg_metrics__raw_unioned", "sql": " __dbt__cte__stg_metrics__raw_unioned as (\nSELECT \n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator\nFROM __dbt__cte__stg_metrics__raw_kpi_labor\n\nUNION\n\nSELECT\n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator\nFROM __dbt__cte__stg_metrics__raw_overhead\n)"}], "relation_name": null}, "model.compare_sql.stg_metrics__raw_unioned": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.compare_sql.stg_metrics__raw_kpi_labor", "model.compare_sql.stg_metrics__raw_overhead"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "snowflake_warehouse": "DATA_ANALYSIS_WH", "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "Compare", "fqn": ["compare_sql", "Metrics", "stg_metrics__raw_unioned"], "unique_id": "model.compare_sql.stg_metrics__raw_unioned", "raw_code": "SELECT \r\n    CalendarYear, \r\n    CalendarMonth,\r\n    CalendarYearMonth,\r\n    OrgPin, \r\n    StrataID, \r\n    SPHEntityID, \r\n    SG2SERVICELINE, \r\n    SG2CAREFAMILY,\r\n    SPHDepartmentRollup, \r\n    SPHCLINICALROLLUP,\r\n    SPHJOBCODEROLLUP, \r\n    LevelOfDetail,\r\n    MetricID, \r\n    Value,\r\n    NUMERATORValue, \r\n    DenominatorValue,\r\n    IsValidComponentNumerator,\r\n    IsValidComponentDenominator\r\nFROM {{ ref('stg_metrics__raw_kpi_labor') }}\r\n\r\nUNION\r\n\r\nSELECT\r\n    CalendarYear, \r\n    CalendarMonth,\r\n    CalendarYearMonth,\r\n    OrgPin, \r\n    StrataID, \r\n    SPHEntityID, \r\n    SG2SERVICELINE, \r\n    SG2CAREFAMILY,\r\n    SPHDepartmentRollup, \r\n    SPHCLINICALROLLUP,\r\n    SPHJOBCODEROLLUP, \r\n    LevelOfDetail,\r\n    MetricID, \r\n    Value,\r\n    NUMERATORValue, \r\n    DenominatorValue,\r\n    IsValidComponentNumerator,\r\n    IsValidComponentDenominator\r\nFROM {{ ref('stg_metrics__raw_overhead') }}", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Metrics\\stg_metrics__raw_unioned.sql", "original_file_path": "Models\\Metrics\\stg_metrics__raw_unioned.sql", "name": "stg_metrics__raw_unioned", "alias": "stg_metrics__raw_unioned", "checksum": {"name": "sha256", "checksum": "73c2ccc78c3d7bf5122e56c7b7bb7b10887dde83ac5fe23009d9ed6f1d6aae88"}, "tags": [], "refs": [["stg_metrics__raw_kpi_labor"], ["stg_metrics__raw_overhead"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Metrics\\stg_metrics__raw_unioned.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "ephemeral", "snowflake_warehouse": "DATA_ANALYSIS_WH"}, "created_at": 1669921393.9690547, "compiled_code": "with __dbt__cte__stg_metrics__raw_kpi_labor as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        compnum.Value as NUMERATORValue, \n        metnum.MetricID, \n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (1, 3)\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        compden.Value as DenominatorValue, \n        metden.MetricID, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (1, 3)\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth,\n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on\n    metnum.CALENDARYEARMonth = metden.CALENDARYEARMonth\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHDEPARTMENTROLLUP = metden.SPHDEPARTMENTROLLUP\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.LevelOfDetail = metden.LevelOfDetail\n    and metnum.MetricID = metden.MetricID\n),  __dbt__cte__stg_metrics__raw_overhead as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        metnum.MetricID,\n        compnum.Value as NUMERATORValue,\n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (4)\n        and compnum.LEVELOFDETAIL = 'SPHDEPARTMENTROLLUP'\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        metden.MetricID,\n        compden.Value as DenominatorValue, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (4)\n        and compden.LEVELOFDETAIL = 'System'\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth, \n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on \n    metnum.CALENDARYEAR = metden.CALENDARYEAR\n    and metnum.CALENDARMONTH = metden.CALENDARMONTH\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.MetricID = metden.MetricID\n)SELECT \n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator\nFROM __dbt__cte__stg_metrics__raw_kpi_labor\n\nUNION\n\nSELECT\n    CalendarYear, \n    CalendarMonth,\n    CalendarYearMonth,\n    OrgPin, \n    StrataID, \n    SPHEntityID, \n    SG2SERVICELINE, \n    SG2CAREFAMILY,\n    SPHDepartmentRollup, \n    SPHCLINICALROLLUP,\n    SPHJOBCODEROLLUP, \n    LevelOfDetail,\n    MetricID, \n    Value,\n    NUMERATORValue, \n    DenominatorValue,\n    IsValidComponentNumerator,\n    IsValidComponentDenominator\nFROM __dbt__cte__stg_metrics__raw_overhead", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.compare_sql.stg_metrics__raw_kpi_labor", "sql": " __dbt__cte__stg_metrics__raw_kpi_labor as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        compnum.Value as NUMERATORValue, \n        metnum.MetricID, \n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (1, 3)\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        compden.Value as DenominatorValue, \n        metden.MetricID, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (1, 3)\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth,\n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on\n    metnum.CALENDARYEARMonth = metden.CALENDARYEARMonth\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHDEPARTMENTROLLUP = metden.SPHDEPARTMENTROLLUP\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.LevelOfDetail = metden.LevelOfDetail\n    and metnum.MetricID = metden.MetricID\n)"}, {"id": "model.compare_sql.stg_metrics__raw_overhead", "sql": " __dbt__cte__stg_metrics__raw_overhead as (\nwith MetricNumerator as (\n    select distinct\n        compnum.CalendarYear, \n        compnum.CalendarMonth, \n        compnum.CALENDARYEARMONTH,\n        compnum.OrgPin, \n        compnum.StrataID, \n        compnum.SPHEntityID, \n        compnum.SG2SERVICELINE, \n        compnum.SG2CAREFAMILY,\n        compnum.SPHDepartmentRollup, \n        compnum.SPHCLINICALROLLUP, \n        compnum.SPHJOBCODEROLLUP, \n        compnum.LEVELOFDETAIL,\n        metnum.MetricID,\n        compnum.Value as NUMERATORValue,\n        metnum.componentid_numerator,\n        TRUE as IsValidComponentNumerator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compnum\n    inner join Datalake_Staging.compare.DIM_METRIC metnum on compnum.COMPONENTID = metnum.COMPONENTID_NUMERATOR\n    where metnum.moduleid in (4)\n        and compnum.LEVELOFDETAIL = 'SPHDEPARTMENTROLLUP'\n        and compnum.orgpin<>0222\n),MetricDenominator as (\n    select distinct \n        compden.CalendarYear, \n        compden.CalendarMonth, \n        compden.CALENDARYEARMONTH,\n        compden.OrgPin, \n        compden.StrataID, \n        compden.SPHEntityID, \n        compden.SG2SERVICELINE, \n        compden.SG2CAREFAMILY,\n        compden.SPHDepartmentRollup, \n        compden.SPHCLINICALROLLUP, \n        compden.SPHJOBCODEROLLUP, \n        compden.LEVELOFDETAIL,\n        metden.MetricID,\n        compden.Value as DenominatorValue, \n        metden.COMPONENTID_DENOMINATOR,\n        TRUE as IsValidComponentDenominator /* Pull from component once created */\n    from Datalake_Staging.compare.COMPONENT compden\n    inner join Datalake_Staging.compare.DIM_METRIC metden on compden.COMPONENTID = metden.COMPONENTID_Denominator\n    where metden.moduleid in (4)\n        and compden.LEVELOFDETAIL = 'System'\n        and compden.orgpin<>0222\n)\nselect distinct \n    metnum.CalendarYear, \n    metnum.CalendarMonth, \n    metnum.CalendarYearMonth,\n    metnum.OrgPin, \n    metnum.StrataID, \n    metnum.SPHEntityID, \n    metnum.SG2SERVICELINE, \n    metnum.SG2CAREFAMILY,\n    metnum.SPHDepartmentRollup, \n    metnum.SPHCLINICALROLLUP,\n    metnum.SPHJOBCODEROLLUP, \n    metnum.LevelOfDetail,\n    metnum.MetricID, \n    round(div0(NUMERATORValue, DenominatorValue), 2) as Value,\n    metnum.NUMERATORValue, \n    metden.DenominatorValue,\n    metnum.IsValidComponentNumerator,\n    metden.IsValidComponentDenominator\nfrom MetricNumerator metnum\ninner join MetricDenominator metden on \n    metnum.CALENDARYEAR = metden.CALENDARYEAR\n    and metnum.CALENDARMONTH = metden.CALENDARMONTH\n    and metnum.OrgPin = metden.OrgPin\n    and metnum.StrataID = metden.StrataID\n    and metnum.SPHEntityID = metden.SPHEntityID\n    and metnum.SG2SERVICELINE = metden.SG2SERVICELINE\n    and metnum.SG2CAREFAMILY = metden.SG2CAREFAMILY\n    and metnum.SPHCLINICALROLLUP = metden.SPHCLINICALROLLUP\n    and metnum.SPHJOBCODEROLLUP = metden.SPHJOBCODEROLLUP\n    and metnum.MetricID = metden.MetricID\n)"}], "relation_name": null}, "model.compare_sql.Mart_Validation_Payroll_NonSpecified": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.compare_sql.mart.PAYROLL_SUMMARY"]}, "config": {"enabled": true, "alias": null, "schema": "qa", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "qa", "fqn": ["compare_sql", "Validation", "Payroll", "Mart_Validation_Payroll_NonSpecified"], "unique_id": "model.compare_sql.Mart_Validation_Payroll_NonSpecified", "raw_code": "select itemID,\r\n       item,\r\n       orgpin,\r\n       strataid,\r\n       calendaryear,\r\n       calendarmonth,\r\n       calendaryearmonth,\r\n       NonSpecified,\r\n       total,\r\n       (NonSpecified * 100.00) / total as percentNonSpecified\r\nfrom (select 9                                                                   as itemID,\r\n             'SPHPaycodeRollup NonSpecified'                                     as item,\r\n             orgpin,\r\n             strataid,\r\n             calendaryear,\r\n             calendarmonth,\r\n             calendaryearmonth,\r\n             sum(case when SPHPaycodeRollup = 'Not Specified' then 1 else 0 end) as NonSpecified,\r\n             count(1)                                                            as total\r\n      from {{source('mart', 'PAYROLL_SUMMARY')}}\r\n      where calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\n      group by orgpin, strataid, calendaryear, calendarmonth, calendaryearmonth\r\n\r\n\r\n      UNION\r\n\r\n\r\n      select 10                                                                  as itemID,\r\n             'SPHJobCodeRollup NonSpecified'                                     as item,\r\n             orgpin,\r\n             strataid,\r\n             calendaryear,\r\n             calendarmonth,\r\n             calendaryearmonth,\r\n             sum(case when SPHJobCodeRollup = 'Not Specified' then 1 else 0 end) as NonSpecified,\r\n             count(1)                                                            as total\r\n      from {{source('mart', 'PAYROLL_SUMMARY')}}\r\n      where calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\n      group by orgpin, strataid, calendaryear, calendarmonth, calendaryearmonth\r\n\r\n\r\n      UNION\r\n\r\n\r\n      select 11                                                                    as itemID,\r\n             'SPHProductiveClass NonSpecified'                                     as item,\r\n             orgpin,\r\n             strataid,\r\n             calendaryear,\r\n             calendarmonth,\r\n             calendaryearmonth,\r\n             sum(case when SPHProductiveClass = 'Not Specified' then 1 else 0 end) as NonSpecified,\r\n             count(1)                                                              as total\r\n      from {{source('mart', 'PAYROLL_SUMMARY')}}\r\n      where calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\n      group by orgpin, strataid, calendaryear, calendarmonth, calendaryearmonth)", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Validation\\Payroll\\Mart_Validation_Payroll_NonSpecified.sql", "original_file_path": "Models\\Validation\\Payroll\\Mart_Validation_Payroll_NonSpecified.sql", "name": "Mart_Validation_Payroll_NonSpecified", "alias": "Mart_Validation_Payroll_NonSpecified", "checksum": {"name": "sha256", "checksum": "a875b10b7a0702629b1bd4a3b6567c0df09a4c35e749ee7debbceaa74e6702b7"}, "tags": [], "refs": [], "sources": [["mart", "PAYROLL_SUMMARY"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Validation\\Payroll\\Mart_Validation_Payroll_NonSpecified.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "table", "schema": "qa"}, "created_at": 1669921394.0020552, "compiled_code": "select itemID,\n       item,\n       orgpin,\n       strataid,\n       calendaryear,\n       calendarmonth,\n       calendaryearmonth,\n       NonSpecified,\n       total,\n       (NonSpecified * 100.00) / total as percentNonSpecified\nfrom (select 9                                                                   as itemID,\n             'SPHPaycodeRollup NonSpecified'                                     as item,\n             orgpin,\n             strataid,\n             calendaryear,\n             calendarmonth,\n             calendaryearmonth,\n             sum(case when SPHPaycodeRollup = 'Not Specified' then 1 else 0 end) as NonSpecified,\n             count(1)                                                            as total\n      from Datalake_Staging.mart.PAYROLL_SUMMARY\n      where calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\n      group by orgpin, strataid, calendaryear, calendarmonth, calendaryearmonth\n\n\n      UNION\n\n\n      select 10                                                                  as itemID,\n             'SPHJobCodeRollup NonSpecified'                                     as item,\n             orgpin,\n             strataid,\n             calendaryear,\n             calendarmonth,\n             calendaryearmonth,\n             sum(case when SPHJobCodeRollup = 'Not Specified' then 1 else 0 end) as NonSpecified,\n             count(1)                                                            as total\n      from Datalake_Staging.mart.PAYROLL_SUMMARY\n      where calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\n      group by orgpin, strataid, calendaryear, calendarmonth, calendaryearmonth\n\n\n      UNION\n\n\n      select 11                                                                    as itemID,\n             'SPHProductiveClass NonSpecified'                                     as item,\n             orgpin,\n             strataid,\n             calendaryear,\n             calendarmonth,\n             calendaryearmonth,\n             sum(case when SPHProductiveClass = 'Not Specified' then 1 else 0 end) as NonSpecified,\n             count(1)                                                              as total\n      from Datalake_Staging.mart.PAYROLL_SUMMARY\n      where calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\n      group by orgpin, strataid, calendaryear, calendarmonth, calendaryearmonth)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "Datalake_Staging.qa.Mart_Validation_Payroll_NonSpecified"}, "model.compare_sql.Mart_Validation_Payroll_Sph": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.compare_sql.mart.PAYROLL_SUMMARY"]}, "config": {"enabled": true, "alias": null, "schema": "qa", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "qa", "fqn": ["compare_sql", "Validation", "Payroll", "Mart_Validation_Payroll_Sph"], "unique_id": "model.compare_sql.Mart_Validation_Payroll_Sph", "raw_code": "select 5                                    as itemID,\r\n       'Distinct SPHDepartmentRollup Count' as item,\r\n       count(distinct\r\n             CASE\r\n                 WHEN SPHDepartmentRollup in ('Administration', 'Clinical Laboratory', 'Clinics', 'Patient Care Unit')\r\n                     THEN SPHDepartmentRollup /* Count these values */\r\n                 ELSE NULL /* Don't count anything else */\r\n                 END\r\n           )                                   rowCount,\r\n       0                                    sphentityid,\r\n       calendaryear,\r\n       calendarmonth,\r\n       calendaryearmonth,\r\n       orgpin,\r\n       strataid\r\nfrom {{source('mart', 'PAYROLL_SUMMARY')}}\r\nwhere calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\ngroup by calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\r\n\r\nUNION\r\n\r\nselect 6                                 as itemID,\r\n       'Distinct SPHPaycodeRollup Count' as item,\r\n       count(distinct\r\n             CASE\r\n                 WHEN SPHPAYCODEROLLUP in ('Regular', 'Over Time', 'Other Differential', 'PTO')\r\n                     THEN SPHPAYCODEROLLUP /* Count these values */\r\n                 ELSE NULL /* Don't count anything else */\r\n                 END\r\n           )                                rowCount,\r\n       0                                 sphentityid,\r\n       calendaryear,\r\n       calendarmonth,\r\n       calendaryearmonth,\r\n       orgpin,\r\n       strataid\r\nfrom {{source('mart', 'PAYROLL_SUMMARY')}}\r\nwhere calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\ngroup by calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\r\n\r\n\r\nUNION\r\n\r\nselect 7                                   as itemID,\r\n       'Distinct SPHProductiveClass Count' as item,\r\n       count(distinct\r\n             CASE\r\n                 WHEN SPHPRODUCTIVECLASS in ('Non-productive', 'Differential', 'Productive')\r\n                     THEN SPHPRODUCTIVECLASS /* Count these values */\r\n                 ELSE NULL /* Don't count anything else */\r\n                 END\r\n           )                                  rowCount,\r\n       0                                   sphentityid,\r\n       calendaryear,\r\n       calendarmonth,\r\n       calendaryearmonth,\r\n       orgpin,\r\n       strataid\r\nfrom {{source('mart', 'PAYROLL_SUMMARY')}}\r\nwhere calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\ngroup by calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\r\n\r\nUNION\r\n\r\nselect 8                                 as itemID,\r\n       'Distinct SPHJobCodeRollup Count' as item,\r\n       count(distinct\r\n             CASE\r\n                 WHEN SPHJOBCODEROLLUP in\r\n                      ('Nursing', 'Administration', 'Clinical Support', 'Advanced Practice Provider')\r\n                     THEN SPHJOBCODEROLLUP /* Count these values */\r\n                 ELSE NULL /* Don't count anything else */\r\n                 END\r\n           )                                rowCount,\r\n       0                                 sphentityid,\r\n       calendaryear,\r\n       calendarmonth,\r\n       calendaryearmonth,\r\n       orgpin,\r\n       strataid\r\nfrom {{source('mart', 'PAYROLL_SUMMARY')}}\r\nwhere calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\ngroup by calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Validation\\Payroll\\Mart_Validation_Payroll_Sph.sql", "original_file_path": "Models\\Validation\\Payroll\\Mart_Validation_Payroll_Sph.sql", "name": "Mart_Validation_Payroll_Sph", "alias": "Mart_Validation_Payroll_Sph", "checksum": {"name": "sha256", "checksum": "2fd106ee9b01ee746a3f0d52acde052010382d596723986374d21e7262e9b30a"}, "tags": [], "refs": [], "sources": [["mart", "PAYROLL_SUMMARY"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Validation\\Payroll\\Mart_Validation_Payroll_Sph.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "table", "schema": "qa"}, "created_at": 1669921394.0183263, "compiled_code": "select 5                                    as itemID,\n       'Distinct SPHDepartmentRollup Count' as item,\n       count(distinct\n             CASE\n                 WHEN SPHDepartmentRollup in ('Administration', 'Clinical Laboratory', 'Clinics', 'Patient Care Unit')\n                     THEN SPHDepartmentRollup /* Count these values */\n                 ELSE NULL /* Don't count anything else */\n                 END\n           )                                   rowCount,\n       0                                    sphentityid,\n       calendaryear,\n       calendarmonth,\n       calendaryearmonth,\n       orgpin,\n       strataid\nfrom Datalake_Staging.mart.PAYROLL_SUMMARY\nwhere calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\ngroup by calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\n\nUNION\n\nselect 6                                 as itemID,\n       'Distinct SPHPaycodeRollup Count' as item,\n       count(distinct\n             CASE\n                 WHEN SPHPAYCODEROLLUP in ('Regular', 'Over Time', 'Other Differential', 'PTO')\n                     THEN SPHPAYCODEROLLUP /* Count these values */\n                 ELSE NULL /* Don't count anything else */\n                 END\n           )                                rowCount,\n       0                                 sphentityid,\n       calendaryear,\n       calendarmonth,\n       calendaryearmonth,\n       orgpin,\n       strataid\nfrom Datalake_Staging.mart.PAYROLL_SUMMARY\nwhere calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\ngroup by calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\n\n\nUNION\n\nselect 7                                   as itemID,\n       'Distinct SPHProductiveClass Count' as item,\n       count(distinct\n             CASE\n                 WHEN SPHPRODUCTIVECLASS in ('Non-productive', 'Differential', 'Productive')\n                     THEN SPHPRODUCTIVECLASS /* Count these values */\n                 ELSE NULL /* Don't count anything else */\n                 END\n           )                                  rowCount,\n       0                                   sphentityid,\n       calendaryear,\n       calendarmonth,\n       calendaryearmonth,\n       orgpin,\n       strataid\nfrom Datalake_Staging.mart.PAYROLL_SUMMARY\nwhere calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\ngroup by calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\n\nUNION\n\nselect 8                                 as itemID,\n       'Distinct SPHJobCodeRollup Count' as item,\n       count(distinct\n             CASE\n                 WHEN SPHJOBCODEROLLUP in\n                      ('Nursing', 'Administration', 'Clinical Support', 'Advanced Practice Provider')\n                     THEN SPHJOBCODEROLLUP /* Count these values */\n                 ELSE NULL /* Don't count anything else */\n                 END\n           )                                rowCount,\n       0                                 sphentityid,\n       calendaryear,\n       calendarmonth,\n       calendaryearmonth,\n       orgpin,\n       strataid\nfrom Datalake_Staging.mart.PAYROLL_SUMMARY\nwhere calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\ngroup by calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "Datalake_Staging.qa.Mart_Validation_Payroll_Sph"}, "model.compare_sql.Mart_Validation_Payroll_Hours_Dollars": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.compare_sql.mart.PAYROLL_SUMMARY"]}, "config": {"enabled": true, "alias": null, "schema": "qa", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "qa", "fqn": ["compare_sql", "Validation", "Payroll", "Mart_Validation_Payroll_Hours_Dollars"], "unique_id": "model.compare_sql.Mart_Validation_Payroll_Hours_Dollars", "raw_code": "select 12              as itemID,\r\n       'Hours NonZero' as item,\r\n       sphentityid,\r\n       orgpin,\r\n       strataid,\r\n       calendaryear,\r\n       calendarmonth,\r\n       calendaryearmonth,\r\n       sum(payrollValue)  sumValue\r\nfrom {{source('mart', 'PAYROLL_SUMMARY')}}\r\nwhere UnitTypeID = 51\r\n    and calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\ngroup by sphentityid,\r\n         calendaryear,\r\n         calendarmonth,\r\n         calendaryearmonth,\r\n         orgpin,\r\n         strataid\r\n\r\n\r\nUNION\r\n\r\n\r\nselect 13                as itemID,\r\n       'Dollars NonZero' as item,\r\n       sphentityid,\r\n       orgpin,\r\n       strataid,\r\n       calendaryear,\r\n       calendarmonth,\r\n       calendaryearmonth,\r\n       sum(payrollValue)    sumValue\r\nfrom {{source('mart', 'PAYROLL_SUMMARY')}}\r\nwhere UnitTypeID = 34\r\n    and calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\ngroup by sphentityid,\r\n         calendaryear,\r\n         calendarmonth,\r\n         calendaryearmonth,\r\n         orgpin,\r\n         strataid", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Validation\\Payroll\\Mart_Validation_Payroll_Hours_Dollars.sql", "original_file_path": "Models\\Validation\\Payroll\\Mart_Validation_Payroll_Hours_Dollars.sql", "name": "Mart_Validation_Payroll_Hours_Dollars", "alias": "Mart_Validation_Payroll_Hours_Dollars", "checksum": {"name": "sha256", "checksum": "cb2010dfa17ce60bc024e31b6b95782d2a8b830f6807a34315219a7884f2828f"}, "tags": [], "refs": [], "sources": [["mart", "PAYROLL_SUMMARY"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Validation\\Payroll\\Mart_Validation_Payroll_Hours_Dollars.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "table", "schema": "qa"}, "created_at": 1669921394.026327, "compiled_code": "select 12              as itemID,\n       'Hours NonZero' as item,\n       sphentityid,\n       orgpin,\n       strataid,\n       calendaryear,\n       calendarmonth,\n       calendaryearmonth,\n       sum(payrollValue)  sumValue\nfrom Datalake_Staging.mart.PAYROLL_SUMMARY\nwhere UnitTypeID = 51\n    and calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\ngroup by sphentityid,\n         calendaryear,\n         calendarmonth,\n         calendaryearmonth,\n         orgpin,\n         strataid\n\n\nUNION\n\n\nselect 13                as itemID,\n       'Dollars NonZero' as item,\n       sphentityid,\n       orgpin,\n       strataid,\n       calendaryear,\n       calendarmonth,\n       calendaryearmonth,\n       sum(payrollValue)    sumValue\nfrom Datalake_Staging.mart.PAYROLL_SUMMARY\nwhere UnitTypeID = 34\n    and calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\ngroup by sphentityid,\n         calendaryear,\n         calendarmonth,\n         calendaryearmonth,\n         orgpin,\n         strataid", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "Datalake_Staging.qa.Mart_Validation_Payroll_Hours_Dollars"}, "model.compare_sql.Mart_Validation_GL_Sph": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.compare_sql.mart.GL_SUMMARY"]}, "config": {"enabled": true, "alias": null, "schema": "qa", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "qa", "fqn": ["compare_sql", "Validation", "GL", "Mart_Validation_GL_Sph"], "unique_id": "model.compare_sql.Mart_Validation_GL_Sph", "raw_code": "select\r\n\t4 as itemID,\r\n\t'Distinct SPHDepartmentRollup Count' as item,\r\n\tcount(distinct\r\n\t\tCASE\r\n\t\t\tWHEN SPHDepartmentRollup IN ('Administration','Clinical Laboratory','Clinics', 'Surgical Services', 'Rehab/Therapy', 'Emergency') THEN SPHDepartmentRollup  /* Count these values */\r\n\t\t\tELSE NULL   /* Don't count anything else */\r\n\t\tEND\r\n\t) rowCount,\r\n\t0 sphentityid,\r\n\tcalendaryear,\r\n\tcalendarmonth,\r\n\tcalendaryearmonth,\r\n\torgpin,\r\n\tstrataid,\r\n\tcase when rowCount <> 6 then false else true end as isValid\r\nfrom {{source('mart', 'GL_SUMMARY')}}\r\nwhere calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\ngroup by calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\r\n\r\nUNION\r\n\r\nselect\r\n\t5 as itemID,\r\n\t'Distinct SPHLineItem Count' as item,\r\n\tcount(distinct\r\n\t\tCASE\r\n\t\t\tWHEN SPHLineItem in ('Bad Debt','Charity Care','Contract Labor', 'Contractual Allowances', 'Drugs', 'Purchased Services', 'Revenue - Inpatient', 'Revenue - Outpatient', 'Salaries') THEN SPHLineItem  /* Count these values */\r\n\t\t\tELSE NULL   /* Don't count anything else */\r\n\t\tEND\r\n\t) rowCount,\r\n\t0 sphentityid,\r\n\tcalendaryear,\r\n\tcalendarmonth,\r\n\tcalendaryearmonth,\r\n\torgpin,\r\n\tstrataid,\r\n\tcase when rowCount <> 9 then false else true end as isValid\r\nfrom {{source('mart', 'GL_SUMMARY')}}\r\nwhere calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\ngroup by  calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Validation\\GL\\Mart_Validation_GL_Sph.sql", "original_file_path": "Models\\Validation\\GL\\Mart_Validation_GL_Sph.sql", "name": "Mart_Validation_GL_Sph", "alias": "Mart_Validation_GL_Sph", "checksum": {"name": "sha256", "checksum": "0efb300f8337b1dd2fa4879360d0a0b343e5cbacb3e3348a195138d2b67ce0a5"}, "tags": [], "refs": [], "sources": [["mart", "GL_SUMMARY"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Validation\\GL\\Mart_Validation_GL_Sph.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "table", "schema": "qa"}, "created_at": 1669921394.0294878, "compiled_code": "select\n\t4 as itemID,\n\t'Distinct SPHDepartmentRollup Count' as item,\n\tcount(distinct\n\t\tCASE\n\t\t\tWHEN SPHDepartmentRollup IN ('Administration','Clinical Laboratory','Clinics', 'Surgical Services', 'Rehab/Therapy', 'Emergency') THEN SPHDepartmentRollup  /* Count these values */\n\t\t\tELSE NULL   /* Don't count anything else */\n\t\tEND\n\t) rowCount,\n\t0 sphentityid,\n\tcalendaryear,\n\tcalendarmonth,\n\tcalendaryearmonth,\n\torgpin,\n\tstrataid,\n\tcase when rowCount <> 6 then false else true end as isValid\nfrom Datalake_Staging.mart.GL_SUMMARY\nwhere calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\ngroup by calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\n\nUNION\n\nselect\n\t5 as itemID,\n\t'Distinct SPHLineItem Count' as item,\n\tcount(distinct\n\t\tCASE\n\t\t\tWHEN SPHLineItem in ('Bad Debt','Charity Care','Contract Labor', 'Contractual Allowances', 'Drugs', 'Purchased Services', 'Revenue - Inpatient', 'Revenue - Outpatient', 'Salaries') THEN SPHLineItem  /* Count these values */\n\t\t\tELSE NULL   /* Don't count anything else */\n\t\tEND\n\t) rowCount,\n\t0 sphentityid,\n\tcalendaryear,\n\tcalendarmonth,\n\tcalendaryearmonth,\n\torgpin,\n\tstrataid,\n\tcase when rowCount <> 9 then false else true end as isValid\nfrom Datalake_Staging.mart.GL_SUMMARY\nwhere calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\ngroup by  calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "Datalake_Staging.qa.Mart_Validation_GL_Sph"}, "model.compare_sql.Mart_Validation_Encounter_Summary": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_PercentValid"]}, "config": {"enabled": true, "alias": null, "schema": "qa", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "vid", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "qa", "fqn": ["compare_sql", "Validation", "Encounter", "Mart_Validation_Encounter_Summary"], "unique_id": "model.compare_sql.Mart_Validation_Encounter_Summary", "raw_code": "{{\r\n  config(\r\n    materialized = 'incremental',\r\n    unique_key = 'vid'\r\n  )\r\n}}\r\n\r\n\r\nselect encCounts.itemID,\r\n       encCounts.item,\r\n       encCounts.strataid,\r\n       encCounts.orgpin,\r\n       encCounts.calendarmonth,\r\n       encCounts.calendaryear,\r\n       encCounts.CalendarYearMonth,\r\n       encCounts.sphentityid,\r\n       (encCounts.IsValid AND COALESCE(previousQa.IsValid,false)) IsValid,\r\n       case when (encCounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\r\n       case when (encCounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\r\n       case when (encCounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\r\n       cast(encCounts.itemID as varchar)||'-'||cast(encCounts.strataid as varchar)||'-'||cast(encCounts.orgpin as varchar)||'-'||cast(encCounts.calendaryearmonth as varchar)||'-'||coalesce(cast(encCounts.sphentityid as varchar), '0')||'-'||coalesce(encCounts.isValid, 'false')||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\r\nfrom {{ ref('Mart_Validation_Encounter_Counts') }} encCounts\r\nleft outer join\r\n    (select distinct itemid,sphentityid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from {{source('previous_qa', 'Mart_Validation_Encounter_Summary')}}) previousQa\r\non\r\n    encCounts.itemid = previousQa.itemid and\r\n    encCounts.sphentityid = previousQa.sphentityid and\r\n    encCounts.orgpin = previousQa.orgpin and\r\n    encCounts.strataid = previousQa.strataid and\r\n    encCounts.calendarmonth = previousQa.calendarmonth and\r\n    encCounts.calendaryear = previousQa.calendaryear\r\n{% if is_incremental() %}\r\n    where vid not in (select vid from {{ this }})\r\n{% endif %}\r\n\r\n\r\nUNION\r\n\r\nselect percValid.itemID,\r\n       percValid.item,\r\n       percValid.strataid,\r\n       percValid.orgpin,\r\n       percValid.calendarmonth,\r\n       percValid.calendaryear,\r\n       percValid.CalendarYearMonth,\r\n       percValid.sphentityid,\r\n       case when abs(PERCENTVALID) >= 90 then true else false end as IsValid,\r\n       case when IsValid = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\r\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\r\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\r\n       cast(percValid.itemID as varchar)||'-'||cast(percValid.strataid as varchar)||'-'||cast(percValid.orgpin as varchar)||'-'||cast(percValid.calendaryearmonth as varchar)||'-'||coalesce(cast(percValid.sphentityid as varchar), '0')||'-'||coalesce(IsValid, 'false')||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\r\nfrom {{ ref('Mart_Validation_Encounter_PercentValid') }} percValid\r\nleft outer join\r\n    (select distinct itemid, sphentityid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from {{source('previous_qa', 'Mart_Validation_Encounter_Summary')}}) previousQa\r\non\r\n    percValid.itemID = previousQa.itemid and\r\n    percValid.sphentityid = previousQa.sphentityid and\r\n    percValid.orgpin = previousQa.orgpin and\r\n    percValid.strataid = previousQa.strataid and\r\n    percValid.calendarmonth = previousQa.calendarmonth and\r\n    percValid.calendaryear = previousQa.calendaryear\r\n{% if is_incremental() %}\r\n    where vid not in (select vid from {{ this }})\r\n{% endif %}", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Validation\\Encounter\\Mart_Validation_Encounter_Summary.sql", "original_file_path": "Models\\Validation\\Encounter\\Mart_Validation_Encounter_Summary.sql", "name": "Mart_Validation_Encounter_Summary", "alias": "Mart_Validation_Encounter_Summary", "checksum": {"name": "sha256", "checksum": "54fd34e5e4322e519c211365f6094f062f791f1a53dc1dc9478b8405e4373404"}, "tags": [], "refs": [["Mart_Validation_Encounter_Counts"], ["Mart_Validation_Encounter_PercentValid"]], "sources": [["previous_qa", "Mart_Validation_Encounter_Summary"], ["previous_qa", "Mart_Validation_Encounter_Summary"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Validation\\Encounter\\Mart_Validation_Encounter_Summary.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "incremental", "schema": "qa", "unique_key": "vid"}, "created_at": 1670001785.3343692, "compiled_code": "\n\n\nselect encCounts.itemID,\n       encCounts.item,\n       encCounts.strataid,\n       encCounts.orgpin,\n       encCounts.calendarmonth,\n       encCounts.calendaryear,\n       encCounts.CalendarYearMonth,\n       encCounts.sphentityid,\n       (encCounts.IsValid AND COALESCE(previousQa.IsValid,false)) IsValid,\n       case when (encCounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\n       case when (encCounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\n       case when (encCounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\n       cast(encCounts.itemID as varchar)||'-'||cast(encCounts.strataid as varchar)||'-'||cast(encCounts.orgpin as varchar)||'-'||cast(encCounts.calendaryearmonth as varchar)||'-'||coalesce(cast(encCounts.sphentityid as varchar), '0')||'-'||coalesce(encCounts.isValid, 'false')||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\nfrom Datalake_Staging.qa.Mart_Validation_Encounter_Counts encCounts\nleft outer join\n    (select distinct itemid,sphentityid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Encounter_Summary) previousQa\non\n    encCounts.itemid = previousQa.itemid and\n    encCounts.sphentityid = previousQa.sphentityid and\n    encCounts.orgpin = previousQa.orgpin and\n    encCounts.strataid = previousQa.strataid and\n    encCounts.calendarmonth = previousQa.calendarmonth and\n    encCounts.calendaryear = previousQa.calendaryear\n\n    where vid not in (select vid from Datalake_Staging.qa.Mart_Validation_Encounter_Summary)\n\n\n\nUNION\n\nselect percValid.itemID,\n       percValid.item,\n       percValid.strataid,\n       percValid.orgpin,\n       percValid.calendarmonth,\n       percValid.calendaryear,\n       percValid.CalendarYearMonth,\n       percValid.sphentityid,\n       case when abs(PERCENTVALID) >= 90 then true else false end as IsValid,\n       case when IsValid = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\n       cast(percValid.itemID as varchar)||'-'||cast(percValid.strataid as varchar)||'-'||cast(percValid.orgpin as varchar)||'-'||cast(percValid.calendaryearmonth as varchar)||'-'||coalesce(cast(percValid.sphentityid as varchar), '0')||'-'||coalesce(IsValid, 'false')||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\nfrom Datalake_Staging.qa.Mart_Validation_Encounter_PercentValid percValid\nleft outer join\n    (select distinct itemid, sphentityid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Encounter_Summary) previousQa\non\n    percValid.itemID = previousQa.itemid and\n    percValid.sphentityid = previousQa.sphentityid and\n    percValid.orgpin = previousQa.orgpin and\n    percValid.strataid = previousQa.strataid and\n    percValid.calendarmonth = previousQa.calendarmonth and\n    percValid.calendaryear = previousQa.calendaryear\n\n    where vid not in (select vid from Datalake_Staging.qa.Mart_Validation_Encounter_Summary)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "Datalake_Staging.qa.Mart_Validation_Encounter_Summary"}, "model.compare_sql.Mart_Validation_Encounter_Counts": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.compare_sql.reference.SPH_CONFIGURATION", "source.compare_sql.config.ENTITY_CRITERIA", "source.compare_sql.mart.ENCOUNTER_SUMMARY", "source.compare_sql.mart.ENCOUNTER_SUMMARY", "source.compare_sql.previous_mart.ENCOUNTER_SUMMARY", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "source.compare_sql.mart.ENCOUNTER_BILLING_SUMMARY", "source.compare_sql.previous_mart.ENCOUNTER_BILLING_SUMMARY", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "source.compare_sql.mart.ENCOUNTER_HAC", "source.compare_sql.previous_mart.ENCOUNTER_HAC", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "source.compare_sql.mart.ENCOUNTER_ICD10_DX", "source.compare_sql.previous_mart.ENCOUNTER_ICD10_DX", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "source.compare_sql.mart.ENCOUNTER_ICD10_PX", "source.compare_sql.previous_mart.ENCOUNTER_ICD10_PX", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "source.compare_sql.mart.ENCOUNTER_SUMMARY", "source.compare_sql.previous_mart.ENCOUNTER_SUMMARY", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary"]}, "config": {"enabled": true, "alias": null, "schema": "qa", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "qa", "fqn": ["compare_sql", "Validation", "Encounter", "Mart_Validation_Encounter_Counts"], "unique_id": "model.compare_sql.Mart_Validation_Encounter_Counts", "raw_code": "{{\r\n  config(\r\n    schema='qa'\r\n  )\r\n}}\r\n\r\nWITH CATCHALL AS (SELECT ec.sphentityid,\r\n                         LEFT(TO_VARCHAR(calendaryearmonth), 4)  calendaryear,\r\n                         RIGHT(TO_VARCHAR(calendaryearmonth), 2) calendarmonth,\r\n                         sd.orgpin,\r\n                         sd.strataid\r\n                  FROM {{ source('reference', 'SPH_CONFIGURATION') }} sd\r\n                           INNER JOIN {{ source('config', 'ENTITY_CRITERIA') }} ec on sd.strataid = ec.strataid\r\n                           CROSS JOIN (SELECT DISTINCT calendaryearmonth\r\n                                       FROM {{ source('mart', 'ENCOUNTER_SUMMARY') }}) dates\r\n                  WHERE isencounterdatamart = TRUE\r\n                     and calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\n               )\r\nselect 1                                                                                                          as itemID,\r\n       'Encounter_Summary RowCount'                                                                               as item,\r\n\r\n       previousMonth.rowCount                                                                                     as previousMonth,\r\n       currentMonth.rowCount                                                                                      as currentMonth,\r\n\r\n       (COALESCE(currentMonth.rowCount, 0) -\r\n        COALESCE(previousMonth.rowCount, 0))                                                                      as diff,\r\n       ((COALESCE(currentMonth.rowCount, 0) - COALESCE(previousMonth.rowCount, 0)) / previousMonth.rowCount) *\r\n       100                                                                                                        as percentdiff,\r\n\r\n       CATCHALL.sphentityid,\r\n       CATCHALL.calendaryear,\r\n       CATCHALL.calendarmonth,\r\n       CAST(CATCHALL.CalendarYear || LPAD(CATCHALL.CalendarMonth, 2, '0') as integer)                             as CalendarYearMonth,\r\n       CATCHALL.orgpin,\r\n       CATCHALL.strataid,\r\n    case\r\n\t\twhen abs(percentdiff) > {{ var('valid_percent_diff') }} then false\r\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\r\n\t\telse true\r\n\tend as IsValid\r\n\r\nfrom CATCHALL\r\n         left outer join\r\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\r\n      from {{ source('mart', 'ENCOUNTER_SUMMARY') }}\r\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) currentMonth\r\n     on\r\n                 CATCHALL.sphentityid = currentMonth.sphentityid and\r\n                 CATCHALL.orgpin = currentMonth.orgpin and\r\n                 CATCHALL.strataid = currentMonth.strataid and\r\n                 CATCHALL.calendarmonth = currentMonth.calendarmonth and\r\n                 CATCHALL.calendaryear = currentMonth.calendaryear\r\n         left outer join\r\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\r\n      from {{ source('previous_mart', 'ENCOUNTER_SUMMARY') }}\r\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) previousMonth\r\n     on\r\n                 CATCHALL.sphentityid = previousMonth.sphentityid and\r\n                 CATCHALL.orgpin = previousMonth.orgpin and\r\n                 CATCHALL.strataid = previousMonth.strataid and\r\n                 CATCHALL.calendarmonth = previousMonth.calendarmonth and\r\n                 CATCHALL.calendaryear = previousMonth.calendaryear\r\n     left outer join\r\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from {{ source('previous_qa', 'Mart_Validation_Encounter_Summary') }} where itemid=1) previousQa\r\n     on\r\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\r\n\t\tCATCHALL.orgpin = previousQa.orgpin and\r\n\t\tCATCHALL.strataid = previousQa.strataid and\r\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\r\n\r\n\r\nUNION ALL\r\n\r\n\r\nselect 2                                                                                                          as itemID,\r\n       'Encounter_Billing_Summary RowCount'                                                                       as item,\r\n\r\n       previousMonth.rowCount                                                                                     as previousMonth,\r\n       currentMonth.rowCount                                                                                      as currentMonth,\r\n\r\n       (COALESCE(currentMonth.rowCount, 0) -\r\n        COALESCE(previousMonth.rowCount, 0))                                                                      as diff,\r\n       ((COALESCE(currentMonth.rowCount, 0) - COALESCE(previousMonth.rowCount, 0)) / previousMonth.rowCount) *\r\n       100                                                                                                        as percentdiff,\r\n\r\n       CATCHALL.sphentityid,\r\n       CATCHALL.calendaryear,\r\n       CATCHALL.calendarmonth,\r\n       CAST(CATCHALL.CalendarYear || LPAD(CATCHALL.CalendarMonth, 2, '0') as integer)                             as CalendarYearMonth,\r\n       CATCHALL.orgpin,\r\n       CATCHALL.strataid,\r\n    case\r\n\t\twhen abs(percentdiff) > {{ var('valid_percent_diff') }} then false\r\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\r\n\t\telse true\r\n\tend as IsValid\r\n\r\nfrom CATCHALL\r\n     left outer join\r\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\r\n      from {{ source('mart', 'ENCOUNTER_BILLING_SUMMARY') }}\r\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) currentMonth\r\n     on\r\n                 CATCHALL.sphentityid = currentMonth.sphentityid and\r\n                 CATCHALL.orgpin = currentMonth.orgpin and\r\n                 CATCHALL.strataid = currentMonth.strataid and\r\n                 CATCHALL.calendarmonth = currentMonth.calendarmonth and\r\n                 CATCHALL.calendaryear = currentMonth.calendaryear\r\n         left outer join\r\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\r\n      from {{ source('previous_mart', 'ENCOUNTER_BILLING_SUMMARY') }}\r\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) previousMonth\r\n     on\r\n                 CATCHALL.sphentityid = previousMonth.sphentityid and\r\n                 CATCHALL.orgpin = previousMonth.orgpin and\r\n                 CATCHALL.strataid = previousMonth.strataid and\r\n                 CATCHALL.calendarmonth = previousMonth.calendarmonth and\r\n                 CATCHALL.calendaryear = previousMonth.calendaryear\r\n     left outer join\r\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from {{ source('previous_qa', 'Mart_Validation_Encounter_Summary') }} where itemid=2) previousQa\r\n     on\r\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\r\n\t\tCATCHALL.orgpin = previousQa.orgpin and\r\n\t\tCATCHALL.strataid = previousQa.strataid and\r\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\r\n\r\n\r\nUNION ALL\r\n\r\n\r\nselect 3                                                                                                          as itemID,\r\n       'Encounter_HAC RowCount'                                                                                   as item,\r\n\r\n       previousMonth.rowCount                                                                                     as previousMonth,\r\n       currentMonth.rowCount                                                                                      as currentMonth,\r\n\r\n       (COALESCE(currentMonth.rowCount, 0) -\r\n        COALESCE(previousMonth.rowCount, 0))                                                                      as diff,\r\n       ((COALESCE(currentMonth.rowCount, 0) - COALESCE(previousMonth.rowCount, 0)) / previousMonth.rowCount) *\r\n       100                                                                                                        as percentdiff,\r\n\r\n       CATCHALL.sphentityid,\r\n       CATCHALL.calendaryear,\r\n       CATCHALL.calendarmonth,\r\n       CAST(CATCHALL.CalendarYear || LPAD(CATCHALL.CalendarMonth, 2, '0') as integer)                             as CalendarYearMonth,\r\n       CATCHALL.orgpin,\r\n       CATCHALL.strataid,\r\n    case\r\n\t\twhen abs(percentdiff) > {{ var('valid_percent_diff') }} then false\r\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\r\n\t\telse true\r\n\tend as IsValid\r\n\r\nfrom CATCHALL\r\n         left outer join\r\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\r\n      from {{ source('mart', 'ENCOUNTER_HAC') }}\r\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) currentMonth\r\n     on\r\n                 CATCHALL.sphentityid = currentMonth.sphentityid and\r\n                 CATCHALL.orgpin = currentMonth.orgpin and\r\n                 CATCHALL.strataid = currentMonth.strataid and\r\n                 CATCHALL.calendarmonth = currentMonth.calendarmonth and\r\n                 CATCHALL.calendaryear = currentMonth.calendaryear\r\n         left outer join\r\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\r\n      from {{ source('previous_mart', 'ENCOUNTER_HAC') }}\r\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) previousMonth\r\n     on\r\n                 CATCHALL.sphentityid = previousMonth.sphentityid and\r\n                 CATCHALL.orgpin = previousMonth.orgpin and\r\n                 CATCHALL.strataid = previousMonth.strataid and\r\n                 CATCHALL.calendarmonth = previousMonth.calendarmonth and\r\n                 CATCHALL.calendaryear = previousMonth.calendaryear\r\n     left outer join\r\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from {{ source('previous_qa', 'Mart_Validation_Encounter_Summary') }} where itemid=3) previousQa\r\n     on\r\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\r\n\t\tCATCHALL.orgpin = previousQa.orgpin and\r\n\t\tCATCHALL.strataid = previousQa.strataid and\r\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\r\n\r\n\r\nUNION ALL\r\n\r\n\r\nselect 4                                                                                                          as itemID,\r\n       'Encounter_ICD10_DX RowCount'                                                                              as item,\r\n\r\n       previousMonth.rowCount                                                                                     as previousMonth,\r\n       currentMonth.rowCount                                                                                      as currentMonth,\r\n\r\n       (COALESCE(currentMonth.rowCount, 0) -\r\n        COALESCE(previousMonth.rowCount, 0))                                                                      as diff,\r\n       ((COALESCE(currentMonth.rowCount, 0) - COALESCE(previousMonth.rowCount, 0)) / previousMonth.rowCount) *\r\n       100                                                                                                        as percentdiff,\r\n\r\n       CATCHALL.sphentityid,\r\n       CATCHALL.calendaryear,\r\n       CATCHALL.calendarmonth,\r\n       CAST(CATCHALL.CalendarYear || LPAD(CATCHALL.CalendarMonth, 2, '0') as integer)                             as CalendarYearMonth,\r\n       CATCHALL.orgpin,\r\n       CATCHALL.strataid,\r\n    case\r\n\t\twhen abs(percentdiff) > {{ var('valid_percent_diff') }} then false\r\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\r\n\t\telse true\r\n\tend as IsValid\r\n\r\nfrom CATCHALL\r\n         left outer join\r\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\r\n      from {{ source('mart', 'ENCOUNTER_ICD10_DX') }}\r\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) currentMonth\r\n     on\r\n                 CATCHALL.sphentityid = currentMonth.sphentityid and\r\n                 CATCHALL.orgpin = currentMonth.orgpin and\r\n                 CATCHALL.strataid = currentMonth.strataid and\r\n                 CATCHALL.calendarmonth = currentMonth.calendarmonth and\r\n                 CATCHALL.calendaryear = currentMonth.calendaryear\r\n         left outer join\r\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\r\n      from {{ source('previous_mart', 'ENCOUNTER_ICD10_DX') }}\r\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) previousMonth\r\n     on\r\n                 CATCHALL.sphentityid = previousMonth.sphentityid and\r\n                 CATCHALL.orgpin = previousMonth.orgpin and\r\n                 CATCHALL.strataid = previousMonth.strataid and\r\n                 CATCHALL.calendarmonth = previousMonth.calendarmonth and\r\n                 CATCHALL.calendaryear = previousMonth.calendaryear\r\n     left outer join\r\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from {{ source('previous_qa', 'Mart_Validation_Encounter_Summary') }} where itemid=4) previousQa\r\n     on\r\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\r\n\t\tCATCHALL.orgpin = previousQa.orgpin and\r\n\t\tCATCHALL.strataid = previousQa.strataid and\r\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\r\n\r\n\r\nUNION ALL\r\n\r\n\r\nselect 5                                                                                                          as itemID,\r\n       'Encounter_ICD10_PX RowCount'                                                                              as item,\r\n\r\n       previousMonth.rowCount                                                                                     as previousMonth,\r\n       currentMonth.rowCount                                                                                      as currentMonth,\r\n\r\n       (COALESCE(currentMonth.rowCount, 0) -\r\n        COALESCE(previousMonth.rowCount, 0))                                                                      as diff,\r\n       ((COALESCE(currentMonth.rowCount, 0) - COALESCE(previousMonth.rowCount, 0)) / previousMonth.rowCount) *\r\n       100                                                                                                        as percentdiff,\r\n\r\n       CATCHALL.sphentityid,\r\n       CATCHALL.calendaryear,\r\n       CATCHALL.calendarmonth,\r\n       CAST(CATCHALL.CalendarYear || LPAD(CATCHALL.CalendarMonth, 2, '0') as integer)                             as CalendarYearMonth,\r\n       CATCHALL.orgpin,\r\n       CATCHALL.strataid,\r\n\tcase\r\n\t\twhen abs(percentdiff) > {{ var('valid_percent_diff') }} then false\r\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\r\n\t\telse true\r\n\tend as IsValid\r\n\r\nfrom CATCHALL\r\n         left outer join\r\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\r\n      from {{ source('mart', 'ENCOUNTER_ICD10_PX') }}\r\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) currentMonth\r\n     on\r\n                 CATCHALL.sphentityid = currentMonth.sphentityid and\r\n                 CATCHALL.orgpin = currentMonth.orgpin and\r\n                 CATCHALL.strataid = currentMonth.strataid and\r\n                 CATCHALL.calendarmonth = currentMonth.calendarmonth and\r\n                 CATCHALL.calendaryear = currentMonth.calendaryear\r\n         left outer join\r\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\r\n      from {{ source('previous_mart', 'ENCOUNTER_ICD10_PX') }}\r\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) previousMonth\r\n     on\r\n                 CATCHALL.sphentityid = previousMonth.sphentityid and\r\n                 CATCHALL.orgpin = previousMonth.orgpin and\r\n                 CATCHALL.strataid = previousMonth.strataid and\r\n                 CATCHALL.calendarmonth = previousMonth.calendarmonth and\r\n                 CATCHALL.calendaryear = previousMonth.calendaryear\r\n     left outer join\r\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from {{ source('previous_qa', 'Mart_Validation_Encounter_Summary') }} where itemid=5) previousQa\r\n     on\r\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\r\n\t\tCATCHALL.orgpin = previousQa.orgpin and\r\n\t\tCATCHALL.strataid = previousQa.strataid and\r\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\r\n\r\n\r\nUNION ALL\r\n\r\n\r\nselect 6                                                                                                          as itemID,\r\n       'Count where SPHIsInpatient=1'                                                                             as item,\r\n\r\n       previousMonth.rowCount                                                                                     as previousMonth,\r\n       currentMonth.rowCount                                                                                      as currentMonth,\r\n\r\n       (COALESCE(currentMonth.rowCount, 0) -\r\n        COALESCE(previousMonth.rowCount, 0))                                                                      as diff,\r\n       ((COALESCE(currentMonth.rowCount, 0) - COALESCE(previousMonth.rowCount, 0)) / previousMonth.rowCount) *\r\n       100                                                                                                        as percentdiff,\r\n\r\n       CATCHALL.sphentityid,\r\n       CATCHALL.calendaryear,\r\n       CATCHALL.calendarmonth,\r\n       CAST(CATCHALL.CalendarYear || LPAD(CATCHALL.CalendarMonth, 2, '0') as integer)                             as CalendarYearMonth,\r\n       CATCHALL.orgpin,\r\n       CATCHALL.strataid,\r\n\tcase\r\n\t\twhen abs(percentdiff) > {{ var('valid_percent_diff') }} then false\r\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\r\n\t\telse true\r\n\tend as IsValid\r\n\r\nfrom CATCHALL\r\n         left outer join\r\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\r\n      from {{ source('mart', 'ENCOUNTER_SUMMARY') }}\r\n      where SPHIsInpatient = TRUE\r\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) currentMonth\r\n     on\r\n                 CATCHALL.sphentityid = currentMonth.sphentityid and\r\n                 CATCHALL.orgpin = currentMonth.orgpin and\r\n                 CATCHALL.strataid = currentMonth.strataid and\r\n                 CATCHALL.calendarmonth = currentMonth.calendarmonth and\r\n                 CATCHALL.calendaryear = currentMonth.calendaryear\r\n         left outer join\r\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\r\n      from {{ source('previous_mart', 'ENCOUNTER_SUMMARY') }}\r\n      where SPHIsInpatient = TRUE\r\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) previousMonth\r\n     on\r\n                 CATCHALL.sphentityid = previousMonth.sphentityid and\r\n                 CATCHALL.orgpin = previousMonth.orgpin and\r\n                 CATCHALL.strataid = previousMonth.strataid and\r\n                 CATCHALL.calendarmonth = previousMonth.calendarmonth and\r\n                 CATCHALL.calendaryear = previousMonth.calendaryear\r\n     left outer join\r\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from {{ source('previous_qa', 'Mart_Validation_Encounter_Summary') }} where itemid=6) previousQa\r\n     on\r\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\r\n\t\tCATCHALL.orgpin = previousQa.orgpin and\r\n\t\tCATCHALL.strataid = previousQa.strataid and\r\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousQa.calendaryear", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Validation\\Encounter\\Mart_Validation_Encounter_Counts.sql", "original_file_path": "Models\\Validation\\Encounter\\Mart_Validation_Encounter_Counts.sql", "name": "Mart_Validation_Encounter_Counts", "alias": "Mart_Validation_Encounter_Counts", "checksum": {"name": "sha256", "checksum": "fdbf6c389df8d24beca6e13885facaf651554c978264da6fec3d21a4fe29458e"}, "tags": [], "refs": [], "sources": [["reference", "SPH_CONFIGURATION"], ["config", "ENTITY_CRITERIA"], ["mart", "ENCOUNTER_SUMMARY"], ["mart", "ENCOUNTER_SUMMARY"], ["previous_mart", "ENCOUNTER_SUMMARY"], ["previous_qa", "Mart_Validation_Encounter_Summary"], ["mart", "ENCOUNTER_BILLING_SUMMARY"], ["previous_mart", "ENCOUNTER_BILLING_SUMMARY"], ["previous_qa", "Mart_Validation_Encounter_Summary"], ["mart", "ENCOUNTER_HAC"], ["previous_mart", "ENCOUNTER_HAC"], ["previous_qa", "Mart_Validation_Encounter_Summary"], ["mart", "ENCOUNTER_ICD10_DX"], ["previous_mart", "ENCOUNTER_ICD10_DX"], ["previous_qa", "Mart_Validation_Encounter_Summary"], ["mart", "ENCOUNTER_ICD10_PX"], ["previous_mart", "ENCOUNTER_ICD10_PX"], ["previous_qa", "Mart_Validation_Encounter_Summary"], ["mart", "ENCOUNTER_SUMMARY"], ["previous_mart", "ENCOUNTER_SUMMARY"], ["previous_qa", "Mart_Validation_Encounter_Summary"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Validation\\Encounter\\Mart_Validation_Encounter_Counts.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "table", "schema": "qa"}, "created_at": 1670001785.352368, "compiled_code": "\n\nWITH CATCHALL AS (SELECT ec.sphentityid,\n                         LEFT(TO_VARCHAR(calendaryearmonth), 4)  calendaryear,\n                         RIGHT(TO_VARCHAR(calendaryearmonth), 2) calendarmonth,\n                         sd.orgpin,\n                         sd.strataid\n                  FROM Datalake_Sandbox.config.SPH_CONFIGURATION sd\n                           INNER JOIN Datalake_Staging.config.ENTITY_CRITERIA ec on sd.strataid = ec.strataid\n                           CROSS JOIN (SELECT DISTINCT calendaryearmonth\n                                       FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY) dates\n                  WHERE isencounterdatamart = TRUE\n                     and calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\n               )\nselect 1                                                                                                          as itemID,\n       'Encounter_Summary RowCount'                                                                               as item,\n\n       previousMonth.rowCount                                                                                     as previousMonth,\n       currentMonth.rowCount                                                                                      as currentMonth,\n\n       (COALESCE(currentMonth.rowCount, 0) -\n        COALESCE(previousMonth.rowCount, 0))                                                                      as diff,\n       ((COALESCE(currentMonth.rowCount, 0) - COALESCE(previousMonth.rowCount, 0)) / previousMonth.rowCount) *\n       100                                                                                                        as percentdiff,\n\n       CATCHALL.sphentityid,\n       CATCHALL.calendaryear,\n       CATCHALL.calendarmonth,\n       CAST(CATCHALL.CalendarYear || LPAD(CATCHALL.CalendarMonth, 2, '0') as integer)                             as CalendarYearMonth,\n       CATCHALL.orgpin,\n       CATCHALL.strataid,\n    case\n\t\twhen abs(percentdiff) > 20 then false\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\n\t\telse true\n\tend as IsValid\n\nfrom CATCHALL\n         left outer join\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\n      from Datalake_Staging.mart.ENCOUNTER_SUMMARY\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) currentMonth\n     on\n                 CATCHALL.sphentityid = currentMonth.sphentityid and\n                 CATCHALL.orgpin = currentMonth.orgpin and\n                 CATCHALL.strataid = currentMonth.strataid and\n                 CATCHALL.calendarmonth = currentMonth.calendarmonth and\n                 CATCHALL.calendaryear = currentMonth.calendaryear\n         left outer join\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\n      from Datalake_Staging_BAK.mart.ENCOUNTER_SUMMARY\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) previousMonth\n     on\n                 CATCHALL.sphentityid = previousMonth.sphentityid and\n                 CATCHALL.orgpin = previousMonth.orgpin and\n                 CATCHALL.strataid = previousMonth.strataid and\n                 CATCHALL.calendarmonth = previousMonth.calendarmonth and\n                 CATCHALL.calendaryear = previousMonth.calendaryear\n     left outer join\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Encounter_Summary where itemid=1) previousQa\n     on\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\n\t\tCATCHALL.orgpin = previousQa.orgpin and\n\t\tCATCHALL.strataid = previousQa.strataid and\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\n\n\nUNION ALL\n\n\nselect 2                                                                                                          as itemID,\n       'Encounter_Billing_Summary RowCount'                                                                       as item,\n\n       previousMonth.rowCount                                                                                     as previousMonth,\n       currentMonth.rowCount                                                                                      as currentMonth,\n\n       (COALESCE(currentMonth.rowCount, 0) -\n        COALESCE(previousMonth.rowCount, 0))                                                                      as diff,\n       ((COALESCE(currentMonth.rowCount, 0) - COALESCE(previousMonth.rowCount, 0)) / previousMonth.rowCount) *\n       100                                                                                                        as percentdiff,\n\n       CATCHALL.sphentityid,\n       CATCHALL.calendaryear,\n       CATCHALL.calendarmonth,\n       CAST(CATCHALL.CalendarYear || LPAD(CATCHALL.CalendarMonth, 2, '0') as integer)                             as CalendarYearMonth,\n       CATCHALL.orgpin,\n       CATCHALL.strataid,\n    case\n\t\twhen abs(percentdiff) > 20 then false\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\n\t\telse true\n\tend as IsValid\n\nfrom CATCHALL\n     left outer join\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\n      from Datalake_Staging.mart.ENCOUNTER_BILLING_SUMMARY\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) currentMonth\n     on\n                 CATCHALL.sphentityid = currentMonth.sphentityid and\n                 CATCHALL.orgpin = currentMonth.orgpin and\n                 CATCHALL.strataid = currentMonth.strataid and\n                 CATCHALL.calendarmonth = currentMonth.calendarmonth and\n                 CATCHALL.calendaryear = currentMonth.calendaryear\n         left outer join\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\n      from Datalake_Staging_BAK.mart.ENCOUNTER_BILLING_SUMMARY\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) previousMonth\n     on\n                 CATCHALL.sphentityid = previousMonth.sphentityid and\n                 CATCHALL.orgpin = previousMonth.orgpin and\n                 CATCHALL.strataid = previousMonth.strataid and\n                 CATCHALL.calendarmonth = previousMonth.calendarmonth and\n                 CATCHALL.calendaryear = previousMonth.calendaryear\n     left outer join\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Encounter_Summary where itemid=2) previousQa\n     on\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\n\t\tCATCHALL.orgpin = previousQa.orgpin and\n\t\tCATCHALL.strataid = previousQa.strataid and\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\n\n\nUNION ALL\n\n\nselect 3                                                                                                          as itemID,\n       'Encounter_HAC RowCount'                                                                                   as item,\n\n       previousMonth.rowCount                                                                                     as previousMonth,\n       currentMonth.rowCount                                                                                      as currentMonth,\n\n       (COALESCE(currentMonth.rowCount, 0) -\n        COALESCE(previousMonth.rowCount, 0))                                                                      as diff,\n       ((COALESCE(currentMonth.rowCount, 0) - COALESCE(previousMonth.rowCount, 0)) / previousMonth.rowCount) *\n       100                                                                                                        as percentdiff,\n\n       CATCHALL.sphentityid,\n       CATCHALL.calendaryear,\n       CATCHALL.calendarmonth,\n       CAST(CATCHALL.CalendarYear || LPAD(CATCHALL.CalendarMonth, 2, '0') as integer)                             as CalendarYearMonth,\n       CATCHALL.orgpin,\n       CATCHALL.strataid,\n    case\n\t\twhen abs(percentdiff) > 20 then false\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\n\t\telse true\n\tend as IsValid\n\nfrom CATCHALL\n         left outer join\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\n      from Datalake_Staging.mart.ENCOUNTER_HAC\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) currentMonth\n     on\n                 CATCHALL.sphentityid = currentMonth.sphentityid and\n                 CATCHALL.orgpin = currentMonth.orgpin and\n                 CATCHALL.strataid = currentMonth.strataid and\n                 CATCHALL.calendarmonth = currentMonth.calendarmonth and\n                 CATCHALL.calendaryear = currentMonth.calendaryear\n         left outer join\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\n      from Datalake_Staging_BAK.mart.ENCOUNTER_HAC\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) previousMonth\n     on\n                 CATCHALL.sphentityid = previousMonth.sphentityid and\n                 CATCHALL.orgpin = previousMonth.orgpin and\n                 CATCHALL.strataid = previousMonth.strataid and\n                 CATCHALL.calendarmonth = previousMonth.calendarmonth and\n                 CATCHALL.calendaryear = previousMonth.calendaryear\n     left outer join\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Encounter_Summary where itemid=3) previousQa\n     on\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\n\t\tCATCHALL.orgpin = previousQa.orgpin and\n\t\tCATCHALL.strataid = previousQa.strataid and\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\n\n\nUNION ALL\n\n\nselect 4                                                                                                          as itemID,\n       'Encounter_ICD10_DX RowCount'                                                                              as item,\n\n       previousMonth.rowCount                                                                                     as previousMonth,\n       currentMonth.rowCount                                                                                      as currentMonth,\n\n       (COALESCE(currentMonth.rowCount, 0) -\n        COALESCE(previousMonth.rowCount, 0))                                                                      as diff,\n       ((COALESCE(currentMonth.rowCount, 0) - COALESCE(previousMonth.rowCount, 0)) / previousMonth.rowCount) *\n       100                                                                                                        as percentdiff,\n\n       CATCHALL.sphentityid,\n       CATCHALL.calendaryear,\n       CATCHALL.calendarmonth,\n       CAST(CATCHALL.CalendarYear || LPAD(CATCHALL.CalendarMonth, 2, '0') as integer)                             as CalendarYearMonth,\n       CATCHALL.orgpin,\n       CATCHALL.strataid,\n    case\n\t\twhen abs(percentdiff) > 20 then false\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\n\t\telse true\n\tend as IsValid\n\nfrom CATCHALL\n         left outer join\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\n      from Datalake_Staging.mart.ENCOUNTER_ICD10_DX\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) currentMonth\n     on\n                 CATCHALL.sphentityid = currentMonth.sphentityid and\n                 CATCHALL.orgpin = currentMonth.orgpin and\n                 CATCHALL.strataid = currentMonth.strataid and\n                 CATCHALL.calendarmonth = currentMonth.calendarmonth and\n                 CATCHALL.calendaryear = currentMonth.calendaryear\n         left outer join\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\n      from Datalake_Staging_BAK.mart.ENCOUNTER_ICD10_DX\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) previousMonth\n     on\n                 CATCHALL.sphentityid = previousMonth.sphentityid and\n                 CATCHALL.orgpin = previousMonth.orgpin and\n                 CATCHALL.strataid = previousMonth.strataid and\n                 CATCHALL.calendarmonth = previousMonth.calendarmonth and\n                 CATCHALL.calendaryear = previousMonth.calendaryear\n     left outer join\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Encounter_Summary where itemid=4) previousQa\n     on\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\n\t\tCATCHALL.orgpin = previousQa.orgpin and\n\t\tCATCHALL.strataid = previousQa.strataid and\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\n\n\nUNION ALL\n\n\nselect 5                                                                                                          as itemID,\n       'Encounter_ICD10_PX RowCount'                                                                              as item,\n\n       previousMonth.rowCount                                                                                     as previousMonth,\n       currentMonth.rowCount                                                                                      as currentMonth,\n\n       (COALESCE(currentMonth.rowCount, 0) -\n        COALESCE(previousMonth.rowCount, 0))                                                                      as diff,\n       ((COALESCE(currentMonth.rowCount, 0) - COALESCE(previousMonth.rowCount, 0)) / previousMonth.rowCount) *\n       100                                                                                                        as percentdiff,\n\n       CATCHALL.sphentityid,\n       CATCHALL.calendaryear,\n       CATCHALL.calendarmonth,\n       CAST(CATCHALL.CalendarYear || LPAD(CATCHALL.CalendarMonth, 2, '0') as integer)                             as CalendarYearMonth,\n       CATCHALL.orgpin,\n       CATCHALL.strataid,\n\tcase\n\t\twhen abs(percentdiff) > 20 then false\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\n\t\telse true\n\tend as IsValid\n\nfrom CATCHALL\n         left outer join\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\n      from Datalake_Staging.mart.ENCOUNTER_ICD10_PX\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) currentMonth\n     on\n                 CATCHALL.sphentityid = currentMonth.sphentityid and\n                 CATCHALL.orgpin = currentMonth.orgpin and\n                 CATCHALL.strataid = currentMonth.strataid and\n                 CATCHALL.calendarmonth = currentMonth.calendarmonth and\n                 CATCHALL.calendaryear = currentMonth.calendaryear\n         left outer join\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\n      from Datalake_Staging_BAK.mart.ENCOUNTER_ICD10_PX\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) previousMonth\n     on\n                 CATCHALL.sphentityid = previousMonth.sphentityid and\n                 CATCHALL.orgpin = previousMonth.orgpin and\n                 CATCHALL.strataid = previousMonth.strataid and\n                 CATCHALL.calendarmonth = previousMonth.calendarmonth and\n                 CATCHALL.calendaryear = previousMonth.calendaryear\n     left outer join\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Encounter_Summary where itemid=5) previousQa\n     on\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\n\t\tCATCHALL.orgpin = previousQa.orgpin and\n\t\tCATCHALL.strataid = previousQa.strataid and\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\n\n\nUNION ALL\n\n\nselect 6                                                                                                          as itemID,\n       'Count where SPHIsInpatient=1'                                                                             as item,\n\n       previousMonth.rowCount                                                                                     as previousMonth,\n       currentMonth.rowCount                                                                                      as currentMonth,\n\n       (COALESCE(currentMonth.rowCount, 0) -\n        COALESCE(previousMonth.rowCount, 0))                                                                      as diff,\n       ((COALESCE(currentMonth.rowCount, 0) - COALESCE(previousMonth.rowCount, 0)) / previousMonth.rowCount) *\n       100                                                                                                        as percentdiff,\n\n       CATCHALL.sphentityid,\n       CATCHALL.calendaryear,\n       CATCHALL.calendarmonth,\n       CAST(CATCHALL.CalendarYear || LPAD(CATCHALL.CalendarMonth, 2, '0') as integer)                             as CalendarYearMonth,\n       CATCHALL.orgpin,\n       CATCHALL.strataid,\n\tcase\n\t\twhen abs(percentdiff) > 20 then false\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\n\t\telse true\n\tend as IsValid\n\nfrom CATCHALL\n         left outer join\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\n      from Datalake_Staging.mart.ENCOUNTER_SUMMARY\n      where SPHIsInpatient = TRUE\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) currentMonth\n     on\n                 CATCHALL.sphentityid = currentMonth.sphentityid and\n                 CATCHALL.orgpin = currentMonth.orgpin and\n                 CATCHALL.strataid = currentMonth.strataid and\n                 CATCHALL.calendarmonth = currentMonth.calendarmonth and\n                 CATCHALL.calendaryear = currentMonth.calendaryear\n         left outer join\n     (select count(1) rowCount, sphentityid, calendaryear, calendarmonth, orgpin, strataid\n      from Datalake_Staging_BAK.mart.ENCOUNTER_SUMMARY\n      where SPHIsInpatient = TRUE\n      group by sphentityid, calendaryear, calendarmonth, orgpin, strataid) previousMonth\n     on\n                 CATCHALL.sphentityid = previousMonth.sphentityid and\n                 CATCHALL.orgpin = previousMonth.orgpin and\n                 CATCHALL.strataid = previousMonth.strataid and\n                 CATCHALL.calendarmonth = previousMonth.calendarmonth and\n                 CATCHALL.calendaryear = previousMonth.calendaryear\n     left outer join\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Encounter_Summary where itemid=6) previousQa\n     on\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\n\t\tCATCHALL.orgpin = previousQa.orgpin and\n\t\tCATCHALL.strataid = previousQa.strataid and\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\n\t\tCATCHALL.calendaryear = previousQa.calendaryear", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "Datalake_Staging.qa.Mart_Validation_Encounter_Counts"}, "model.compare_sql.Mart_Validation_Encounter_PercentValid": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.compare_sql.mart.ENCOUNTER_SUMMARY", "source.compare_sql.config.ENTITY_CRITERIA", "source.compare_sql.mart.ENCOUNTER_ICD10_PX", "source.compare_sql.mart.ENCOUNTER_ICD10_DX", "source.compare_sql.reference.SPH_CONFIGURATION"]}, "config": {"enabled": true, "alias": null, "schema": "qa", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "qa", "fqn": ["compare_sql", "Validation", "Encounter", "Mart_Validation_Encounter_PercentValid"], "unique_id": "model.compare_sql.Mart_Validation_Encounter_PercentValid", "raw_code": "WITH NUMERATOR7 AS (\r\n\t/* Standard ICD10PX Codes (inpatients)? */\r\n    SELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_ICD10_PX')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND IsStandardCode=TRUE\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR8 AS (\r\n\t/* Standard ICD10DX Codes (all patient types)? */\r\n    SELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_ICD10_DX')}}\r\n    WHERE IsStandardCode=TRUE\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR9 AS (\r\n\t/* SPHPOACodes valid (inpatients)? */\r\n    SELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_ICD10_DX')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND SPHPOACODE IN ('1','Y','N','W')\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR10 AS (\r\n    /* AdmitTimes valid (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND ADMITTIME NOT IN ('00:00','23:59')\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR11 AS (\r\n    /* DischargeTimes valid (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND DISCHARGETIME NOT IN ('00:00','23:59')\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR12 AS (\r\n    /* MSDRGs Coded (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND MSDRGCODE NOT IN ('000', '951', '998', '999')\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR13 AS (\r\n    /* Coded MSDRGs are standard (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND MSDRGCODE NOT IN ('000', '951', '998', '999')\r\n\t\tAND MSDRGIsStandard=TRUE\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR14 AS (\r\n    /* Coded MSDRGs have weights (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND MSDRGCODE NOT IN ('000', '951', '998', '999')\r\n\t\tAND MSDRGWEIGHT<>0\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR15 AS (\r\n    /* Coded APRDRGs have weights (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND NOT(APRDRGCODE IN ('000', '955', '956') OR TRY_CAST(APRDRGCODE AS NUMBER) IS NULL)  --Assume that a \"valid\" APRDRG code we expect to have a weight is not 000, 955, or 956 and can be casted as a number\r\n        AND APRDRGWEIGHT<>0\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR16 AS (\r\n    /* Valid LOS (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND SPHLOSDATETIME>=0 AND SPHLOSDATETIME<=365\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR17 AS (\r\n    /* Valid SG2 Service Lines (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND SG2SERVICELINE NOT IN ('Not Assigned','Not Specified','Ungroupable','')\r\n\t\tAND SG2SERVICELINE IS NOT NULL\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR18 AS (\r\n    /* Valid SPHPayorTypes and SPHPayorGroups (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND (SPHPayorType NOT IN ('Not Specified') AND SPHPayorGroup NOT IN ('Not Specified'))\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR19 AS (\r\n    /* Valid SPHPayorTypes and SPHPayorGroups (all patient types)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHPayorType NOT IN ('Not Specified') AND SPHPayorGroup NOT IN ('Not Specified'))\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR20 AS (\r\n    /* Primary ICD10PX is standard (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND PrimaryICD10PXIsStandard=TRUE\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR21 AS (\r\n    /* Primary ICD10DX is standard (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND PrimaryICD10DXIsStandard=TRUE\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR22 AS (\r\n\t/* Standard ICD10DX Codes (inpatients)? */\r\n    SELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_ICD10_DX')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tand IsStandardCode=TRUE\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR23 AS (\r\n    /* Coded APRDRGs have weights (all patient types)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE NOT(APRDRGCODE IN ('000', '955', '956') OR TRY_CAST(APRDRGCODE AS NUMBER) IS NULL)  --Assume that a \"valid\" APRDRG code we expect to have a weight is not 000, 955, or 956 and can be casted as a number\r\n        AND APRDRGWEIGHT<>0\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR24 AS (\r\n    /* Valid SG2 Service Lines (all patient types)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE SG2SERVICELINE NOT IN ('Not Assigned','Not Specified','Ungroupable','') AND SG2SERVICELINE IS NOT NULL\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),NUMERATOR25 AS (\r\n    /* Primary ICD10DX is standard (all patient types)? */\r\n\tSELECT\r\n        COUNT(*) validRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE PrimaryICD10DXIsStandard=TRUE\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),DENOMINATOR12 AS (\r\n    /* MSDRGs Coded (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) totalRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),DENOMINATOR13 AS (\r\n    /* Coded MSDRGs are standard (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) totalRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND MSDRGCODE NOT IN ('000', '951', '998', '999')\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),DENOMINATOR14 AS (\r\n    /* Coded MSDRGs have weights (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) totalRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND MSDRGCODE NOT IN ('000', '951', '998', '999')\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),DENOMINATOR15 AS (\r\n    /* Coded APRDRGs have weights (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) totalRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\tAND NOT(APRDRGCODE IN ('000', '955', '956') OR TRY_CAST(APRDRGCODE AS NUMBER) IS NULL)  --Assume that a \"valid\" APRDRG code we expect to have a weight is not 000, 955, or 956 and can be casted as a number\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),DENOMINATOR16 AS (\r\n    /* Valid LOS (inpatients)? */\r\n\tSELECT\r\n        COUNT(*) totalRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),DENOMINATOR23 AS (\r\n    /* Coded APRDRGs have weights (all patient types)? */\r\n\tSELECT\r\n        COUNT(*) totalRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    WHERE NOT(APRDRGCODE IN ('000', '955', '956') OR TRY_CAST(APRDRGCODE AS NUMBER) IS NULL)  --Assume that a \"valid\" APRDRG code we expect to have a weight is not 000, 955, or 956 and can be casted as a number\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),CATCHALL_DENOMINATOR_PX_IP AS (\r\n    SELECT\r\n        COUNT(*) totalRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_ICD10_PX')}}\r\n\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),CATCHALL_DENOMINATOR_DX_ALL AS (\r\n    SELECT\r\n        COUNT(*) totalRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_ICD10_DX')}}\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),CATCHALL_DENOMINATOR_DX_IP AS (\r\n    SELECT\r\n        COUNT(*) totalRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_ICD10_DX')}}\r\n\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),CATCHALL_DENOMINATOR_ES_ALL AS (\r\n    SELECT\r\n        COUNT(*) totalRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),CATCHALL_DENOMINATOR_ES_IP AS (\r\n    SELECT\r\n        COUNT(*) totalRows,\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n    FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}\r\n\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n    GROUP BY\r\n        sphentityid,\r\n        calendaryear,\r\n        calendarmonth,\r\n        orgpin,\r\n        strataid\r\n ),CATCHALL AS (\r\n\t SELECT\r\n\t\tec.sphentityid,\r\n\t\tLEFT(TO_VARCHAR(calendaryearmonth),4) calendaryear,\r\n\t\tRIGHT(TO_VARCHAR(calendaryearmonth),2) calendarmonth,\r\n\t\tsd.orgpin,\r\n\t\tsd.strataid\r\n\tFROM {{ source('reference', 'SPH_CONFIGURATION') }} sd\r\n\tINNER JOIN {{ source('config', 'ENTITY_CRITERIA')}} ec on sd.strataid=ec.strataid\r\n\tCROSS JOIN (SELECT DISTINCT calendaryearmonth FROM {{source('mart', 'ENCOUNTER_SUMMARY')}}) dates\r\n\tWHERE isencounterdatamart=TRUE\r\n        and calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\n )\r\n /* Standard ICD10PX Codes (inpatients)? */\r\n SELECT\r\n    '7' itemid,\r\n    'Percent Valid ICD10PX Codes (inpatients)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n    (\r\n\t\t'\r\n\t\tSELECT TOP 10 IsStandardCode, *\r\n\t\tFROM MART.ENCOUNTER_ICD10_PX\r\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\t\tAND IsStandardCode<>TRUE\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n\tLEFT JOIN CATCHALL_DENOMINATOR_PX_IP d ON c.sphentityid=d.sphentityid\r\n        AND c.calendaryear=d.calendaryear\r\n        AND c.calendarmonth=d.calendarmonth\r\n        AND c.orgpin=d.orgpin\r\n        AND c.strataid=d.strataid\r\n    LEFT JOIN NUMERATOR7 n ON d.sphentityid=n.sphentityid\r\n        AND d.calendaryear=n.calendaryear\r\n        AND d.calendarmonth=n.calendarmonth\r\n        AND d.orgpin=n.orgpin\r\n        AND d.strataid=n.strataid\r\n\r\nUNION ALL\r\n\r\n/* Standard ICD10DX Codes on all patient types? */\r\n SELECT\r\n    '8' itemid,\r\n    'Percent Valid ICD10DX Codes (all patient types)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 IsStandardCode,*\r\n\t\tFROM MART.ENCOUNTER_ICD10_DX\r\n\t\tWHERE IsStandardCode<>TRUE\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n\tLEFT JOIN CATCHALL_DENOMINATOR_DX_ALL d ON c.sphentityid=d.sphentityid\r\n        AND c.calendaryear=d.calendaryear\r\n        AND c.calendarmonth=d.calendarmonth\r\n        AND c.orgpin=d.orgpin\r\n        AND c.strataid=d.strataid\r\n    LEFT JOIN NUMERATOR8 n ON d.sphentityid=n.sphentityid\r\n        AND d.calendaryear=n.calendaryear\r\n        AND d.calendarmonth=n.calendarmonth\r\n        AND d.orgpin=n.orgpin\r\n        AND d.strataid=n.strataid\r\n\r\nUNION ALL\r\n\r\n/* SPHPOACodes valid (inpatients)? */\r\n SELECT\r\n    '9' itemid,\r\n    'Percent Valid SPHPOACodes (inpatients)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 SPHPOACODE,*\r\n\t\tFROM MART.ENCOUNTER_ICD10_DX\r\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\t\tAND SPHPOACODE NOT IN (''1'',''Y'',''N'',''W'')\t\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n\tLEFT JOIN CATCHALL_DENOMINATOR_DX_IP d ON c.sphentityid=d.sphentityid\r\n        AND c.calendaryear=d.calendaryear\r\n        AND c.calendarmonth=d.calendarmonth\r\n        AND c.orgpin=d.orgpin\r\n        AND c.strataid=d.strataid\r\n    LEFT JOIN NUMERATOR9 n ON d.sphentityid=n.sphentityid\r\n        AND d.calendaryear=n.calendaryear\r\n        AND d.calendarmonth=n.calendarmonth\r\n        AND d.orgpin=n.orgpin\r\n        AND d.strataid=n.strataid\r\n\r\nUNION ALL\r\n\r\n /* AdmitTimes valid (inpatients)? */\r\n SELECT\r\n    '10' itemid,\r\n    'Percent Valid AdmitTimes (inpatients)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 ADMITTIME,*\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\t\tAND ADMITTIME IN (''00:00'',''23:59'')\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_IP d ON c.sphentityid=d.sphentityid\r\n        AND c.calendaryear=d.calendaryear\r\n        AND c.calendarmonth=d.calendarmonth\r\n        AND c.orgpin=d.orgpin\r\n        AND c.strataid=d.strataid\r\n    LEFT JOIN NUMERATOR10 n ON d.sphentityid=n.sphentityid\r\n        AND d.calendaryear=n.calendaryear\r\n        AND d.calendarmonth=n.calendarmonth\r\n        AND d.orgpin=n.orgpin\r\n        AND d.strataid=n.strataid\r\n\r\nUNION ALL\r\n\r\n /* DischargeTimes valid (inpatients)? */\r\n SELECT\r\n    '11' itemid,\r\n    'Percent Valid DischargeTimes (inpatients)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 DISCHARGETIME,*\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\t\tAND DISCHARGETIME IN (''00:00'',''23:59'')\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_IP d ON c.sphentityid=d.sphentityid\r\n        AND c.calendaryear=d.calendaryear\r\n        AND c.calendarmonth=d.calendarmonth\r\n        AND c.orgpin=d.orgpin\r\n        AND c.strataid=d.strataid\r\n    LEFT JOIN NUMERATOR11 n ON d.sphentityid=n.sphentityid\r\n        AND d.calendaryear=n.calendaryear\r\n        AND d.calendarmonth=n.calendarmonth\r\n        AND d.orgpin=n.orgpin\r\n        AND d.strataid=n.strataid\r\n\r\nUNION ALL\r\n\r\n /* MSDRGs Coded (inpatients)? */\r\n SELECT\r\n    '12' itemid,\r\n    'Percent Coded MSDRGs (inpatients)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 MSDRGCODE,*\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\t\tAND MSDRGCODE IN (''000'', ''951'', ''998'', ''999'')\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.sphentityid||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n    LEFT JOIN DENOMINATOR12 d ON d.sphentityid=c.sphentityid\r\n        AND d.calendaryear=c.calendaryear\r\n        AND d.calendarmonth=c.calendarmonth\r\n        AND d.orgpin=c.orgpin\r\n        AND d.strataid=c.strataid\r\n    LEFT JOIN NUMERATOR12 n ON c.sphentityid=n.sphentityid\r\n        AND c.calendaryear=n.calendaryear\r\n        AND c.calendarmonth=n.calendarmonth\r\n        AND c.orgpin=n.orgpin\r\n        AND c.strataid=n.strataid\r\n\r\nUNION ALL\r\n\r\n /* Coded MSDRGs are standard (inpatients)? */\r\n SELECT\r\n    '13' itemid,\r\n    'Percent Standard MSDRG Codes (inpatients)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 MSDRGCODE,MSDRGIsStandard,*\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\t\tAND MSDRGCODE NOT IN (''000'', ''951'', ''998'', ''999'')\r\n\t\t\tAND MSDRGIsStandard<>TRUE\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n    LEFT JOIN DENOMINATOR13 d ON d.sphentityid=c.sphentityid\r\n        AND d.calendaryear=c.calendaryear\r\n        AND d.calendarmonth=c.calendarmonth\r\n        AND d.orgpin=c.orgpin\r\n        AND d.strataid=c.strataid\r\n    LEFT JOIN NUMERATOR13 n ON c.sphentityid=n.sphentityid\r\n        AND c.calendaryear=n.calendaryear\r\n        AND c.calendarmonth=n.calendarmonth\r\n        AND c.orgpin=n.orgpin\r\n        AND c.strataid=n.strataid\r\n\r\nUNION ALL\r\n\r\n /* Coded MSDRGs have weights (inpatients)? */\r\n SELECT\r\n    '14' itemid,\r\n    'Percent Non-Zero MSDRG Weights (inpatients)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 MSDRGCODE,MSDRGWEIGHT,*\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\t\tAND MSDRGCODE NOT IN (''000'', ''951'', ''998'', ''999'')\r\n\t\t\tAND MSDRGWEIGHT=0\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n    LEFT JOIN DENOMINATOR14 d ON d.sphentityid=c.sphentityid\r\n        AND d.calendaryear=c.calendaryear\r\n        AND d.calendarmonth=c.calendarmonth\r\n        AND d.orgpin=c.orgpin\r\n        AND d.strataid=c.strataid\r\n    LEFT JOIN NUMERATOR14 n ON c.sphentityid=n.sphentityid\r\n        AND c.calendaryear=n.calendaryear\r\n        AND c.calendarmonth=n.calendarmonth\r\n        AND c.orgpin=n.orgpin\r\n        AND c.strataid=n.strataid\r\n\r\nUNION ALL\r\n\r\n /* Coded APRDRGs have weights (inpatients)? */\r\n SELECT\r\n    '15' itemid,\r\n    'Percent Non-Zero APRDRG Weights (inpatients)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 APRDRGCODE,APRDRGWEIGHT,*\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\t\tAND NOT(APRDRGCODE IN (''000'', ''955'', ''956'') OR TRY_CAST(APRDRGCODE AS NUMBER) IS NULL)  /*Assume that a \"valid\" APRDRG code we expect to have a weight is not 000, 955, or 956 and can be casted as a number */\r\n\t\t\tAND APRDRGWEIGHT=0\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n    LEFT JOIN DENOMINATOR15 d ON d.sphentityid=c.sphentityid\r\n        AND d.calendaryear=c.calendaryear\r\n        AND d.calendarmonth=c.calendarmonth\r\n        AND d.orgpin=c.orgpin\r\n        AND d.strataid=c.strataid\r\n    LEFT JOIN NUMERATOR15 n ON c.sphentityid=n.sphentityid\r\n        AND c.calendaryear=n.calendaryear\r\n        AND c.calendarmonth=n.calendarmonth\r\n        AND c.orgpin=n.orgpin\r\n        AND c.strataid=n.strataid\r\n\r\nUNION ALL\r\n\r\n /* Valid LOS (inpatients)? */\r\n SELECT\r\n    '16' itemid,\r\n    'Percent Valid LOS (inpatients)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 SPHLOSDATETIME,*\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\t\tAND NOT(SPHLOSDATETIME>=0 AND SPHLOSDATETIME<=365)\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n    LEFT JOIN DENOMINATOR16 d ON d.sphentityid=c.sphentityid\r\n        AND d.calendaryear=c.calendaryear\r\n        AND d.calendarmonth=c.calendarmonth\r\n        AND d.orgpin=c.orgpin\r\n        AND d.strataid=c.strataid\r\n    LEFT JOIN NUMERATOR16 n ON c.sphentityid=n.sphentityid\r\n        AND c.calendaryear=n.calendaryear\r\n        AND c.calendarmonth=n.calendarmonth\r\n        AND c.orgpin=n.orgpin\r\n        AND c.strataid=n.strataid\r\n\r\nUNION ALL\r\n\r\n/* Valid SG2 Service Lines (inpatients)? */\r\n SELECT\r\n    '17' itemid,\r\n    'Percent Valid SG2 Service Lines (inpatients)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 SG2SERVICELINE,*\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\t\tAND (SG2SERVICELINE IN (''Not Assigned'',''Not Specified'',''Ungroupable'','''') OR SG2SERVICELINE IS NULL)\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_IP d ON c.sphentityid=d.sphentityid\r\n        AND c.calendaryear=d.calendaryear\r\n        AND c.calendarmonth=d.calendarmonth\r\n        AND c.orgpin=d.orgpin\r\n        AND c.strataid=d.strataid\r\n    LEFT JOIN NUMERATOR17 n ON d.sphentityid=n.sphentityid\r\n        AND d.calendaryear=n.calendaryear\r\n        AND d.calendarmonth=n.calendarmonth\r\n        AND d.orgpin=n.orgpin\r\n        AND d.strataid=n.strataid\r\n\r\nUNION ALL\r\n\r\n/* Valid SPHPayorTypes and SPHPayorGroups (inpatients)? */\r\n SELECT\r\n    '18' itemid,\r\n    'Percent Valid SPHPayorType and SPHPayorGroup (inpatients)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 SPHPayorType,SPHPayorGroup,*\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\t\tAND (SPHPayorType IN (''Not Specified'') OR SPHPayorGroup IN (''Not Specified''))\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_IP d ON c.sphentityid=d.sphentityid\r\n        AND c.calendaryear=d.calendaryear\r\n        AND c.calendarmonth=d.calendarmonth\r\n        AND c.orgpin=d.orgpin\r\n        AND c.strataid=d.strataid\r\n    LEFT JOIN NUMERATOR18 n ON d.sphentityid=n.sphentityid\r\n        AND d.calendaryear=n.calendaryear\r\n        AND d.calendarmonth=n.calendarmonth\r\n        AND d.orgpin=n.orgpin\r\n        AND d.strataid=n.strataid\r\n\r\nUNION ALL\r\n\r\n/* Valid SPHPayorTypes and SPHPayorGroups (all patient types)? */\r\n SELECT\r\n    '19' itemid,\r\n    'Percent Valid SPHPayorType and SPHPayorGroup (all patient types)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 SPHPayorType,SPHPayorGroup\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE (SPHPayorType IN (''Not Specified'') OR SPHPayorGroup IN (''Not Specified''))\t\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_ALL d ON c.sphentityid=d.sphentityid\r\n        AND c.calendaryear=d.calendaryear\r\n        AND c.calendarmonth=d.calendarmonth\r\n        AND c.orgpin=d.orgpin\r\n        AND c.strataid=d.strataid\r\n    LEFT JOIN NUMERATOR19 n ON d.sphentityid=n.sphentityid\r\n        AND d.calendaryear=n.calendaryear\r\n        AND d.calendarmonth=n.calendarmonth\r\n        AND d.orgpin=n.orgpin\r\n        AND d.strataid=n.strataid\r\n\r\nUNION ALL\r\n\r\n /* Primary ICD10PX is standard (inpatients)? */\r\n SELECT\r\n    '20' itemid,\r\n    'Percent Standard PrimaryICD10PX Codes (inpatients)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 PrimaryICD10PXIsStandard,*\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\t\tAND PrimaryICD10PXIsStandard<>TRUE\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_IP d ON c.sphentityid=d.sphentityid\r\n        AND c.calendaryear=d.calendaryear\r\n        AND c.calendarmonth=d.calendarmonth\r\n        AND c.orgpin=d.orgpin\r\n        AND c.strataid=d.strataid\r\n    LEFT JOIN NUMERATOR20 n ON d.sphentityid=n.sphentityid\r\n        AND d.calendaryear=n.calendaryear\r\n        AND d.calendarmonth=n.calendarmonth\r\n        AND d.orgpin=n.orgpin\r\n        AND d.strataid=n.strataid\r\n\r\nUNION ALL\r\n\r\n /* Primary ICD10DX is standard (inpatients)? */\r\n SELECT\r\n    '21' itemid,\r\n    'Percent Standard PrimaryICD10DX Codes (inpatients)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 PrimaryICD10DXIsStandard,*\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\t\tAND PrimaryICD10DXIsStandard<>TRUE\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_IP d ON c.sphentityid=d.sphentityid\r\n        AND c.calendaryear=d.calendaryear\r\n        AND c.calendarmonth=d.calendarmonth\r\n        AND c.orgpin=d.orgpin\r\n        AND c.strataid=d.strataid\r\n    LEFT JOIN NUMERATOR21 n ON d.sphentityid=n.sphentityid\r\n        AND d.calendaryear=n.calendaryear\r\n        AND d.calendarmonth=n.calendarmonth\r\n        AND d.orgpin=n.orgpin\r\n        AND d.strataid=n.strataid\r\n\r\n UNION ALL\r\n\r\n\r\n /* Standard ICD10DX Codes on all inpatients? */\r\n SELECT\r\n\t'22' itemid,\r\n\t'Percent Valid ICD10DX Codes (inpatients)' item,\r\n\tCASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 IsStandardCode,*\r\n\t\tFROM MART.ENCOUNTER_ICD10_DX\r\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\r\n\t\t\tand IsStandardCode<>TRUE\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n\tc.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n\tLEFT JOIN CATCHALL_DENOMINATOR_DX_IP d ON c.sphentityid=d.sphentityid\r\n        AND c.calendaryear=d.calendaryear\r\n        AND c.calendarmonth=d.calendarmonth\r\n        AND c.orgpin=d.orgpin\r\n        AND c.strataid=d.strataid\r\n    LEFT JOIN NUMERATOR22 n ON d.sphentityid=n.sphentityid\r\n        AND d.calendaryear=n.calendaryear\r\n        AND d.calendarmonth=n.calendarmonth\r\n        AND d.orgpin=n.orgpin\r\n        AND d.strataid=n.strataid\r\n\r\n UNION ALL\r\n\r\n /* Coded APRDRGs have weights (all patient types)? */\r\n SELECT\r\n    '23' itemid,\r\n    'Percent Non-Zero APRDRG Weights (all patient types)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 APRDRGWEIGHT,*\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE NOT(APRDRGCODE IN (''000'', ''955'', ''956'') OR TRY_CAST(APRDRGCODE AS NUMBER) IS NULL)  /* Assume that a \"valid\" APRDRG code we expect to have a weight is not 000, 955, or 956 and can be casted as a number */\r\n\t\t\tAND APRDRGWEIGHT=0\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n    LEFT JOIN DENOMINATOR23 d ON d.sphentityid=c.sphentityid\r\n        AND d.calendaryear=c.calendaryear\r\n        AND d.calendarmonth=c.calendarmonth\r\n        AND d.orgpin=c.orgpin\r\n        AND d.strataid=c.strataid\r\n    LEFT JOIN NUMERATOR23 n ON c.sphentityid=n.sphentityid\r\n        AND c.calendaryear=n.calendaryear\r\n        AND c.calendarmonth=n.calendarmonth\r\n        AND c.orgpin=n.orgpin\r\n        AND c.strataid=n.strataid\r\n\r\n UNION ALL\r\n\r\n /* Valid SG2 Service Lines (all patient types)? */\r\n SELECT\r\n    '24' itemid,\r\n    'Percent Valid SG2 Service Lines (all patient types)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 SG2SERVICELINE,*\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE (SG2SERVICELINE IN (''Not Assigned'',''Not Specified'',''Ungroupable'','''') OR SG2SERVICELINE IS NULL)\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_ALL d ON c.sphentityid=d.sphentityid\r\n        AND c.calendaryear=d.calendaryear\r\n        AND c.calendarmonth=d.calendarmonth\r\n        AND c.orgpin=d.orgpin\r\n        AND c.strataid=d.strataid\r\n    LEFT JOIN NUMERATOR24 n ON d.sphentityid=n.sphentityid\r\n        AND d.calendaryear=n.calendaryear\r\n        AND d.calendarmonth=n.calendarmonth\r\n        AND d.orgpin=n.orgpin\r\n        AND d.strataid=n.strataid\r\n\r\n UNION ALL\r\n\r\n  /* Primary ICD10DX is standard (all patient types)? */\r\n SELECT\r\n    '25' itemid,\r\n    'Percent Standard PrimaryICD10DX Codes (all patient types)' item,\r\n    CASE\r\n        WHEN d.orgpin is null THEN null\r\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\r\n    END AS PERCENTVALID,\r\n\t('\r\n\t\tSELECT TOP 10 PrimaryICD10DXIsStandard,*\r\n\t\tFROM MART.ENCOUNTER_SUMMARY\r\n\t\tWHERE PrimaryICD10DXIsStandard<>TRUE\t/* This identifies the invalid data */\r\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\r\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\r\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\r\n\t\t\tAND ORGPIN='||c.ORGPIN||'\r\n\t\t\tAND STRATAID='||c.STRATAID||';\r\n\t') AS SAMPLEQUERY,\r\n    c.sphentityid,\r\n    c.calendaryear,\r\n    c.calendarmonth,\r\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\r\n    c.orgpin,\r\n    c.strataid\r\n FROM CATCHALL c\r\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_ALL d ON c.sphentityid=d.sphentityid\r\n        AND c.calendaryear=d.calendaryear\r\n        AND c.calendarmonth=d.calendarmonth\r\n        AND c.orgpin=d.orgpin\r\n        AND c.strataid=d.strataid\r\n    LEFT JOIN NUMERATOR25 n ON d.sphentityid=n.sphentityid\r\n        AND d.calendaryear=n.calendaryear\r\n        AND d.calendarmonth=n.calendarmonth\r\n        AND d.orgpin=n.orgpin\r\n        AND d.strataid=n.strataid", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Validation\\Encounter\\Mart_Validation_Encounter_PercentValid.sql", "original_file_path": "Models\\Validation\\Encounter\\Mart_Validation_Encounter_PercentValid.sql", "name": "Mart_Validation_Encounter_PercentValid", "alias": "Mart_Validation_Encounter_PercentValid", "checksum": {"name": "sha256", "checksum": "9d2fef605290e651c477bc4798c2716a25c2c769f3f9dc43e50ec83b514b272f"}, "tags": [], "refs": [], "sources": [["mart", "ENCOUNTER_SUMMARY"], ["config", "ENTITY_CRITERIA"], ["mart", "ENCOUNTER_ICD10_PX"], ["mart", "ENCOUNTER_ICD10_DX"], ["reference", "SPH_CONFIGURATION"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Validation\\Encounter\\Mart_Validation_Encounter_PercentValid.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "table", "schema": "qa"}, "created_at": 1670001785.3663661, "compiled_code": "WITH NUMERATOR7 AS (\n\t/* Standard ICD10PX Codes (inpatients)? */\n    SELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_ICD10_PX\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND IsStandardCode=TRUE\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR8 AS (\n\t/* Standard ICD10DX Codes (all patient types)? */\n    SELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_ICD10_DX\n    WHERE IsStandardCode=TRUE\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR9 AS (\n\t/* SPHPOACodes valid (inpatients)? */\n    SELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_ICD10_DX\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND SPHPOACODE IN ('1','Y','N','W')\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR10 AS (\n    /* AdmitTimes valid (inpatients)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND ADMITTIME NOT IN ('00:00','23:59')\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR11 AS (\n    /* DischargeTimes valid (inpatients)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND DISCHARGETIME NOT IN ('00:00','23:59')\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR12 AS (\n    /* MSDRGs Coded (inpatients)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND MSDRGCODE NOT IN ('000', '951', '998', '999')\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR13 AS (\n    /* Coded MSDRGs are standard (inpatients)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND MSDRGCODE NOT IN ('000', '951', '998', '999')\n\t\tAND MSDRGIsStandard=TRUE\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR14 AS (\n    /* Coded MSDRGs have weights (inpatients)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND MSDRGCODE NOT IN ('000', '951', '998', '999')\n\t\tAND MSDRGWEIGHT<>0\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR15 AS (\n    /* Coded APRDRGs have weights (inpatients)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND NOT(APRDRGCODE IN ('000', '955', '956') OR TRY_CAST(APRDRGCODE AS NUMBER) IS NULL)  --Assume that a \"valid\" APRDRG code we expect to have a weight is not 000, 955, or 956 and can be casted as a number\n        AND APRDRGWEIGHT<>0\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR16 AS (\n    /* Valid LOS (inpatients)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND SPHLOSDATETIME>=0 AND SPHLOSDATETIME<=365\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR17 AS (\n    /* Valid SG2 Service Lines (inpatients)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND SG2SERVICELINE NOT IN ('Not Assigned','Not Specified','Ungroupable','')\n\t\tAND SG2SERVICELINE IS NOT NULL\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR18 AS (\n    /* Valid SPHPayorTypes and SPHPayorGroups (inpatients)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND (SPHPayorType NOT IN ('Not Specified') AND SPHPayorGroup NOT IN ('Not Specified'))\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR19 AS (\n    /* Valid SPHPayorTypes and SPHPayorGroups (all patient types)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHPayorType NOT IN ('Not Specified') AND SPHPayorGroup NOT IN ('Not Specified'))\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR20 AS (\n    /* Primary ICD10PX is standard (inpatients)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND PrimaryICD10PXIsStandard=TRUE\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR21 AS (\n    /* Primary ICD10DX is standard (inpatients)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND PrimaryICD10DXIsStandard=TRUE\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR22 AS (\n\t/* Standard ICD10DX Codes (inpatients)? */\n    SELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_ICD10_DX\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tand IsStandardCode=TRUE\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR23 AS (\n    /* Coded APRDRGs have weights (all patient types)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE NOT(APRDRGCODE IN ('000', '955', '956') OR TRY_CAST(APRDRGCODE AS NUMBER) IS NULL)  --Assume that a \"valid\" APRDRG code we expect to have a weight is not 000, 955, or 956 and can be casted as a number\n        AND APRDRGWEIGHT<>0\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR24 AS (\n    /* Valid SG2 Service Lines (all patient types)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE SG2SERVICELINE NOT IN ('Not Assigned','Not Specified','Ungroupable','') AND SG2SERVICELINE IS NOT NULL\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),NUMERATOR25 AS (\n    /* Primary ICD10DX is standard (all patient types)? */\n\tSELECT\n        COUNT(*) validRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE PrimaryICD10DXIsStandard=TRUE\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),DENOMINATOR12 AS (\n    /* MSDRGs Coded (inpatients)? */\n\tSELECT\n        COUNT(*) totalRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),DENOMINATOR13 AS (\n    /* Coded MSDRGs are standard (inpatients)? */\n\tSELECT\n        COUNT(*) totalRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND MSDRGCODE NOT IN ('000', '951', '998', '999')\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),DENOMINATOR14 AS (\n    /* Coded MSDRGs have weights (inpatients)? */\n\tSELECT\n        COUNT(*) totalRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND MSDRGCODE NOT IN ('000', '951', '998', '999')\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),DENOMINATOR15 AS (\n    /* Coded APRDRGs have weights (inpatients)? */\n\tSELECT\n        COUNT(*) totalRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\tAND NOT(APRDRGCODE IN ('000', '955', '956') OR TRY_CAST(APRDRGCODE AS NUMBER) IS NULL)  --Assume that a \"valid\" APRDRG code we expect to have a weight is not 000, 955, or 956 and can be casted as a number\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),DENOMINATOR16 AS (\n    /* Valid LOS (inpatients)? */\n\tSELECT\n        COUNT(*) totalRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),DENOMINATOR23 AS (\n    /* Coded APRDRGs have weights (all patient types)? */\n\tSELECT\n        COUNT(*) totalRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    WHERE NOT(APRDRGCODE IN ('000', '955', '956') OR TRY_CAST(APRDRGCODE AS NUMBER) IS NULL)  --Assume that a \"valid\" APRDRG code we expect to have a weight is not 000, 955, or 956 and can be casted as a number\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),CATCHALL_DENOMINATOR_PX_IP AS (\n    SELECT\n        COUNT(*) totalRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_ICD10_PX\n\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),CATCHALL_DENOMINATOR_DX_ALL AS (\n    SELECT\n        COUNT(*) totalRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_ICD10_DX\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),CATCHALL_DENOMINATOR_DX_IP AS (\n    SELECT\n        COUNT(*) totalRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_ICD10_DX\n\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),CATCHALL_DENOMINATOR_ES_ALL AS (\n    SELECT\n        COUNT(*) totalRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),CATCHALL_DENOMINATOR_ES_IP AS (\n    SELECT\n        COUNT(*) totalRows,\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n    FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY\n\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n    GROUP BY\n        sphentityid,\n        calendaryear,\n        calendarmonth,\n        orgpin,\n        strataid\n ),CATCHALL AS (\n\t SELECT\n\t\tec.sphentityid,\n\t\tLEFT(TO_VARCHAR(calendaryearmonth),4) calendaryear,\n\t\tRIGHT(TO_VARCHAR(calendaryearmonth),2) calendarmonth,\n\t\tsd.orgpin,\n\t\tsd.strataid\n\tFROM Datalake_Sandbox.config.SPH_CONFIGURATION sd\n\tINNER JOIN Datalake_Staging.config.ENTITY_CRITERIA ec on sd.strataid=ec.strataid\n\tCROSS JOIN (SELECT DISTINCT calendaryearmonth FROM Datalake_Staging.mart.ENCOUNTER_SUMMARY) dates\n\tWHERE isencounterdatamart=TRUE\n        and calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\n )\n /* Standard ICD10PX Codes (inpatients)? */\n SELECT\n    '7' itemid,\n    'Percent Valid ICD10PX Codes (inpatients)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n    (\n\t\t'\n\t\tSELECT TOP 10 IsStandardCode, *\n\t\tFROM MART.ENCOUNTER_ICD10_PX\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\t\tAND IsStandardCode<>TRUE\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n\tLEFT JOIN CATCHALL_DENOMINATOR_PX_IP d ON c.sphentityid=d.sphentityid\n        AND c.calendaryear=d.calendaryear\n        AND c.calendarmonth=d.calendarmonth\n        AND c.orgpin=d.orgpin\n        AND c.strataid=d.strataid\n    LEFT JOIN NUMERATOR7 n ON d.sphentityid=n.sphentityid\n        AND d.calendaryear=n.calendaryear\n        AND d.calendarmonth=n.calendarmonth\n        AND d.orgpin=n.orgpin\n        AND d.strataid=n.strataid\n\nUNION ALL\n\n/* Standard ICD10DX Codes on all patient types? */\n SELECT\n    '8' itemid,\n    'Percent Valid ICD10DX Codes (all patient types)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 IsStandardCode,*\n\t\tFROM MART.ENCOUNTER_ICD10_DX\n\t\tWHERE IsStandardCode<>TRUE\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n\tLEFT JOIN CATCHALL_DENOMINATOR_DX_ALL d ON c.sphentityid=d.sphentityid\n        AND c.calendaryear=d.calendaryear\n        AND c.calendarmonth=d.calendarmonth\n        AND c.orgpin=d.orgpin\n        AND c.strataid=d.strataid\n    LEFT JOIN NUMERATOR8 n ON d.sphentityid=n.sphentityid\n        AND d.calendaryear=n.calendaryear\n        AND d.calendarmonth=n.calendarmonth\n        AND d.orgpin=n.orgpin\n        AND d.strataid=n.strataid\n\nUNION ALL\n\n/* SPHPOACodes valid (inpatients)? */\n SELECT\n    '9' itemid,\n    'Percent Valid SPHPOACodes (inpatients)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 SPHPOACODE,*\n\t\tFROM MART.ENCOUNTER_ICD10_DX\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\t\tAND SPHPOACODE NOT IN (''1'',''Y'',''N'',''W'')\t\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n\tLEFT JOIN CATCHALL_DENOMINATOR_DX_IP d ON c.sphentityid=d.sphentityid\n        AND c.calendaryear=d.calendaryear\n        AND c.calendarmonth=d.calendarmonth\n        AND c.orgpin=d.orgpin\n        AND c.strataid=d.strataid\n    LEFT JOIN NUMERATOR9 n ON d.sphentityid=n.sphentityid\n        AND d.calendaryear=n.calendaryear\n        AND d.calendarmonth=n.calendarmonth\n        AND d.orgpin=n.orgpin\n        AND d.strataid=n.strataid\n\nUNION ALL\n\n /* AdmitTimes valid (inpatients)? */\n SELECT\n    '10' itemid,\n    'Percent Valid AdmitTimes (inpatients)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 ADMITTIME,*\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\t\tAND ADMITTIME IN (''00:00'',''23:59'')\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_IP d ON c.sphentityid=d.sphentityid\n        AND c.calendaryear=d.calendaryear\n        AND c.calendarmonth=d.calendarmonth\n        AND c.orgpin=d.orgpin\n        AND c.strataid=d.strataid\n    LEFT JOIN NUMERATOR10 n ON d.sphentityid=n.sphentityid\n        AND d.calendaryear=n.calendaryear\n        AND d.calendarmonth=n.calendarmonth\n        AND d.orgpin=n.orgpin\n        AND d.strataid=n.strataid\n\nUNION ALL\n\n /* DischargeTimes valid (inpatients)? */\n SELECT\n    '11' itemid,\n    'Percent Valid DischargeTimes (inpatients)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 DISCHARGETIME,*\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\t\tAND DISCHARGETIME IN (''00:00'',''23:59'')\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_IP d ON c.sphentityid=d.sphentityid\n        AND c.calendaryear=d.calendaryear\n        AND c.calendarmonth=d.calendarmonth\n        AND c.orgpin=d.orgpin\n        AND c.strataid=d.strataid\n    LEFT JOIN NUMERATOR11 n ON d.sphentityid=n.sphentityid\n        AND d.calendaryear=n.calendaryear\n        AND d.calendarmonth=n.calendarmonth\n        AND d.orgpin=n.orgpin\n        AND d.strataid=n.strataid\n\nUNION ALL\n\n /* MSDRGs Coded (inpatients)? */\n SELECT\n    '12' itemid,\n    'Percent Coded MSDRGs (inpatients)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 MSDRGCODE,*\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\t\tAND MSDRGCODE IN (''000'', ''951'', ''998'', ''999'')\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.sphentityid||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n    LEFT JOIN DENOMINATOR12 d ON d.sphentityid=c.sphentityid\n        AND d.calendaryear=c.calendaryear\n        AND d.calendarmonth=c.calendarmonth\n        AND d.orgpin=c.orgpin\n        AND d.strataid=c.strataid\n    LEFT JOIN NUMERATOR12 n ON c.sphentityid=n.sphentityid\n        AND c.calendaryear=n.calendaryear\n        AND c.calendarmonth=n.calendarmonth\n        AND c.orgpin=n.orgpin\n        AND c.strataid=n.strataid\n\nUNION ALL\n\n /* Coded MSDRGs are standard (inpatients)? */\n SELECT\n    '13' itemid,\n    'Percent Standard MSDRG Codes (inpatients)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 MSDRGCODE,MSDRGIsStandard,*\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\t\tAND MSDRGCODE NOT IN (''000'', ''951'', ''998'', ''999'')\n\t\t\tAND MSDRGIsStandard<>TRUE\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n    LEFT JOIN DENOMINATOR13 d ON d.sphentityid=c.sphentityid\n        AND d.calendaryear=c.calendaryear\n        AND d.calendarmonth=c.calendarmonth\n        AND d.orgpin=c.orgpin\n        AND d.strataid=c.strataid\n    LEFT JOIN NUMERATOR13 n ON c.sphentityid=n.sphentityid\n        AND c.calendaryear=n.calendaryear\n        AND c.calendarmonth=n.calendarmonth\n        AND c.orgpin=n.orgpin\n        AND c.strataid=n.strataid\n\nUNION ALL\n\n /* Coded MSDRGs have weights (inpatients)? */\n SELECT\n    '14' itemid,\n    'Percent Non-Zero MSDRG Weights (inpatients)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 MSDRGCODE,MSDRGWEIGHT,*\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\t\tAND MSDRGCODE NOT IN (''000'', ''951'', ''998'', ''999'')\n\t\t\tAND MSDRGWEIGHT=0\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n    LEFT JOIN DENOMINATOR14 d ON d.sphentityid=c.sphentityid\n        AND d.calendaryear=c.calendaryear\n        AND d.calendarmonth=c.calendarmonth\n        AND d.orgpin=c.orgpin\n        AND d.strataid=c.strataid\n    LEFT JOIN NUMERATOR14 n ON c.sphentityid=n.sphentityid\n        AND c.calendaryear=n.calendaryear\n        AND c.calendarmonth=n.calendarmonth\n        AND c.orgpin=n.orgpin\n        AND c.strataid=n.strataid\n\nUNION ALL\n\n /* Coded APRDRGs have weights (inpatients)? */\n SELECT\n    '15' itemid,\n    'Percent Non-Zero APRDRG Weights (inpatients)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 APRDRGCODE,APRDRGWEIGHT,*\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\t\tAND NOT(APRDRGCODE IN (''000'', ''955'', ''956'') OR TRY_CAST(APRDRGCODE AS NUMBER) IS NULL)  /*Assume that a \"valid\" APRDRG code we expect to have a weight is not 000, 955, or 956 and can be casted as a number */\n\t\t\tAND APRDRGWEIGHT=0\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n    LEFT JOIN DENOMINATOR15 d ON d.sphentityid=c.sphentityid\n        AND d.calendaryear=c.calendaryear\n        AND d.calendarmonth=c.calendarmonth\n        AND d.orgpin=c.orgpin\n        AND d.strataid=c.strataid\n    LEFT JOIN NUMERATOR15 n ON c.sphentityid=n.sphentityid\n        AND c.calendaryear=n.calendaryear\n        AND c.calendarmonth=n.calendarmonth\n        AND c.orgpin=n.orgpin\n        AND c.strataid=n.strataid\n\nUNION ALL\n\n /* Valid LOS (inpatients)? */\n SELECT\n    '16' itemid,\n    'Percent Valid LOS (inpatients)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 SPHLOSDATETIME,*\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\t\tAND NOT(SPHLOSDATETIME>=0 AND SPHLOSDATETIME<=365)\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n    LEFT JOIN DENOMINATOR16 d ON d.sphentityid=c.sphentityid\n        AND d.calendaryear=c.calendaryear\n        AND d.calendarmonth=c.calendarmonth\n        AND d.orgpin=c.orgpin\n        AND d.strataid=c.strataid\n    LEFT JOIN NUMERATOR16 n ON c.sphentityid=n.sphentityid\n        AND c.calendaryear=n.calendaryear\n        AND c.calendarmonth=n.calendarmonth\n        AND c.orgpin=n.orgpin\n        AND c.strataid=n.strataid\n\nUNION ALL\n\n/* Valid SG2 Service Lines (inpatients)? */\n SELECT\n    '17' itemid,\n    'Percent Valid SG2 Service Lines (inpatients)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 SG2SERVICELINE,*\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\t\tAND (SG2SERVICELINE IN (''Not Assigned'',''Not Specified'',''Ungroupable'','''') OR SG2SERVICELINE IS NULL)\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_IP d ON c.sphentityid=d.sphentityid\n        AND c.calendaryear=d.calendaryear\n        AND c.calendarmonth=d.calendarmonth\n        AND c.orgpin=d.orgpin\n        AND c.strataid=d.strataid\n    LEFT JOIN NUMERATOR17 n ON d.sphentityid=n.sphentityid\n        AND d.calendaryear=n.calendaryear\n        AND d.calendarmonth=n.calendarmonth\n        AND d.orgpin=n.orgpin\n        AND d.strataid=n.strataid\n\nUNION ALL\n\n/* Valid SPHPayorTypes and SPHPayorGroups (inpatients)? */\n SELECT\n    '18' itemid,\n    'Percent Valid SPHPayorType and SPHPayorGroup (inpatients)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 SPHPayorType,SPHPayorGroup,*\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\t\tAND (SPHPayorType IN (''Not Specified'') OR SPHPayorGroup IN (''Not Specified''))\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_IP d ON c.sphentityid=d.sphentityid\n        AND c.calendaryear=d.calendaryear\n        AND c.calendarmonth=d.calendarmonth\n        AND c.orgpin=d.orgpin\n        AND c.strataid=d.strataid\n    LEFT JOIN NUMERATOR18 n ON d.sphentityid=n.sphentityid\n        AND d.calendaryear=n.calendaryear\n        AND d.calendarmonth=n.calendarmonth\n        AND d.orgpin=n.orgpin\n        AND d.strataid=n.strataid\n\nUNION ALL\n\n/* Valid SPHPayorTypes and SPHPayorGroups (all patient types)? */\n SELECT\n    '19' itemid,\n    'Percent Valid SPHPayorType and SPHPayorGroup (all patient types)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 SPHPayorType,SPHPayorGroup\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE (SPHPayorType IN (''Not Specified'') OR SPHPayorGroup IN (''Not Specified''))\t\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_ALL d ON c.sphentityid=d.sphentityid\n        AND c.calendaryear=d.calendaryear\n        AND c.calendarmonth=d.calendarmonth\n        AND c.orgpin=d.orgpin\n        AND c.strataid=d.strataid\n    LEFT JOIN NUMERATOR19 n ON d.sphentityid=n.sphentityid\n        AND d.calendaryear=n.calendaryear\n        AND d.calendarmonth=n.calendarmonth\n        AND d.orgpin=n.orgpin\n        AND d.strataid=n.strataid\n\nUNION ALL\n\n /* Primary ICD10PX is standard (inpatients)? */\n SELECT\n    '20' itemid,\n    'Percent Standard PrimaryICD10PX Codes (inpatients)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 PrimaryICD10PXIsStandard,*\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\t\tAND PrimaryICD10PXIsStandard<>TRUE\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_IP d ON c.sphentityid=d.sphentityid\n        AND c.calendaryear=d.calendaryear\n        AND c.calendarmonth=d.calendarmonth\n        AND c.orgpin=d.orgpin\n        AND c.strataid=d.strataid\n    LEFT JOIN NUMERATOR20 n ON d.sphentityid=n.sphentityid\n        AND d.calendaryear=n.calendaryear\n        AND d.calendarmonth=n.calendarmonth\n        AND d.orgpin=n.orgpin\n        AND d.strataid=n.strataid\n\nUNION ALL\n\n /* Primary ICD10DX is standard (inpatients)? */\n SELECT\n    '21' itemid,\n    'Percent Standard PrimaryICD10DX Codes (inpatients)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 PrimaryICD10DXIsStandard,*\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\t\tAND PrimaryICD10DXIsStandard<>TRUE\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_IP d ON c.sphentityid=d.sphentityid\n        AND c.calendaryear=d.calendaryear\n        AND c.calendarmonth=d.calendarmonth\n        AND c.orgpin=d.orgpin\n        AND c.strataid=d.strataid\n    LEFT JOIN NUMERATOR21 n ON d.sphentityid=n.sphentityid\n        AND d.calendaryear=n.calendaryear\n        AND d.calendarmonth=n.calendarmonth\n        AND d.orgpin=n.orgpin\n        AND d.strataid=n.strataid\n\n UNION ALL\n\n\n /* Standard ICD10DX Codes on all inpatients? */\n SELECT\n\t'22' itemid,\n\t'Percent Valid ICD10DX Codes (inpatients)' item,\n\tCASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 IsStandardCode,*\n\t\tFROM MART.ENCOUNTER_ICD10_DX\n\t\tWHERE (SPHISINPATIENT=TRUE OR SPHISNEWBORN=TRUE)\n\t\t\tand IsStandardCode<>TRUE\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n\tc.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n\tLEFT JOIN CATCHALL_DENOMINATOR_DX_IP d ON c.sphentityid=d.sphentityid\n        AND c.calendaryear=d.calendaryear\n        AND c.calendarmonth=d.calendarmonth\n        AND c.orgpin=d.orgpin\n        AND c.strataid=d.strataid\n    LEFT JOIN NUMERATOR22 n ON d.sphentityid=n.sphentityid\n        AND d.calendaryear=n.calendaryear\n        AND d.calendarmonth=n.calendarmonth\n        AND d.orgpin=n.orgpin\n        AND d.strataid=n.strataid\n\n UNION ALL\n\n /* Coded APRDRGs have weights (all patient types)? */\n SELECT\n    '23' itemid,\n    'Percent Non-Zero APRDRG Weights (all patient types)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 APRDRGWEIGHT,*\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE NOT(APRDRGCODE IN (''000'', ''955'', ''956'') OR TRY_CAST(APRDRGCODE AS NUMBER) IS NULL)  /* Assume that a \"valid\" APRDRG code we expect to have a weight is not 000, 955, or 956 and can be casted as a number */\n\t\t\tAND APRDRGWEIGHT=0\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n    LEFT JOIN DENOMINATOR23 d ON d.sphentityid=c.sphentityid\n        AND d.calendaryear=c.calendaryear\n        AND d.calendarmonth=c.calendarmonth\n        AND d.orgpin=c.orgpin\n        AND d.strataid=c.strataid\n    LEFT JOIN NUMERATOR23 n ON c.sphentityid=n.sphentityid\n        AND c.calendaryear=n.calendaryear\n        AND c.calendarmonth=n.calendarmonth\n        AND c.orgpin=n.orgpin\n        AND c.strataid=n.strataid\n\n UNION ALL\n\n /* Valid SG2 Service Lines (all patient types)? */\n SELECT\n    '24' itemid,\n    'Percent Valid SG2 Service Lines (all patient types)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 SG2SERVICELINE,*\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE (SG2SERVICELINE IN (''Not Assigned'',''Not Specified'',''Ungroupable'','''') OR SG2SERVICELINE IS NULL)\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_ALL d ON c.sphentityid=d.sphentityid\n        AND c.calendaryear=d.calendaryear\n        AND c.calendarmonth=d.calendarmonth\n        AND c.orgpin=d.orgpin\n        AND c.strataid=d.strataid\n    LEFT JOIN NUMERATOR24 n ON d.sphentityid=n.sphentityid\n        AND d.calendaryear=n.calendaryear\n        AND d.calendarmonth=n.calendarmonth\n        AND d.orgpin=n.orgpin\n        AND d.strataid=n.strataid\n\n UNION ALL\n\n  /* Primary ICD10DX is standard (all patient types)? */\n SELECT\n    '25' itemid,\n    'Percent Standard PrimaryICD10DX Codes (all patient types)' item,\n    CASE\n        WHEN d.orgpin is null THEN null\n        ELSE (coalesce(n.validRows,0)/d.totalRows)*100\n    END AS PERCENTVALID,\n\t('\n\t\tSELECT TOP 10 PrimaryICD10DXIsStandard,*\n\t\tFROM MART.ENCOUNTER_SUMMARY\n\t\tWHERE PrimaryICD10DXIsStandard<>TRUE\t/* This identifies the invalid data */\n\t\t\tAND SPHENTITYID='||c.SPHENTITYID||'\n\t\t\tAND CALENDARYEAR='||c.CALENDARYEAR||'\n\t\t\tAND CALENDARMONTH='||c.CALENDARMONTH||'\n\t\t\tAND ORGPIN='||c.ORGPIN||'\n\t\t\tAND STRATAID='||c.STRATAID||';\n\t') AS SAMPLEQUERY,\n    c.sphentityid,\n    c.calendaryear,\n    c.calendarmonth,\n\tCAST(c.CalendarYear || LPAD(c.CalendarMonth, 2, '0') as integer) as CalendarYearMonth,\n    c.orgpin,\n    c.strataid\n FROM CATCHALL c\n\tLEFT JOIN CATCHALL_DENOMINATOR_ES_ALL d ON c.sphentityid=d.sphentityid\n        AND c.calendaryear=d.calendaryear\n        AND c.calendarmonth=d.calendarmonth\n        AND c.orgpin=d.orgpin\n        AND c.strataid=d.strataid\n    LEFT JOIN NUMERATOR25 n ON d.sphentityid=n.sphentityid\n        AND d.calendaryear=n.calendaryear\n        AND d.calendarmonth=n.calendarmonth\n        AND d.orgpin=n.orgpin\n        AND d.strataid=n.strataid", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "Datalake_Staging.qa.Mart_Validation_Encounter_PercentValid"}, "model.compare_sql.Mart_Validation_GL_Summary": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.compare_sql.previous_qa.Mart_Validation_GL_Summary", "source.compare_sql.previous_qa.Mart_Validation_GL_Summary", "model.compare_sql.Mart_Validation_GL_Counts", "model.compare_sql.Mart_Validation_GL_Sph"]}, "config": {"enabled": true, "alias": null, "schema": "qa", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "vid", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "qa", "fqn": ["compare_sql", "Validation", "GL", "Mart_Validation_GL_Summary"], "unique_id": "model.compare_sql.Mart_Validation_GL_Summary", "raw_code": "{{\r\n  config(\r\n    materialized = 'incremental',\r\n    unique_key = 'vid'\r\n  )\r\n}}\r\n\r\n\r\nselect glcounts.itemID,\r\n       glcounts.item,\r\n       glcounts.strataid,\r\n       glcounts.orgpin,\r\n       glcounts.calendarmonth,\r\n       glcounts.calendaryear,\r\n       glcounts.calendaryearmonth,\r\n       glcounts.sphentityid,\r\n       (glcounts.IsValid AND COALESCE(previousQa.IsValid,false)) IsValid,\r\n       case when (glcounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\r\n       case when (glcounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\r\n       case when (glcounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\r\n       cast(glcounts.itemID as varchar)||'-'||cast(glcounts.strataid as varchar)||'-'||cast(glcounts.orgpin as varchar)||'-'||cast(glcounts.calendaryearmonth as varchar)||'-'||cast(glcounts.sphentityid as varchar)||'-'||coalesce(glcounts.isValid, 'false')||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\r\nfrom {{ ref('Mart_Validation_GL_Counts') }} glcounts\r\nleft outer join\r\n    (select distinct itemid, sphentityid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from {{ source('previous_qa', 'Mart_Validation_GL_Summary') }}) previousQa\r\non\r\n    glcounts.itemid = previousQa.itemid and\r\n    glcounts.sphentityid = previousQa.sphentityid and\r\n    glcounts.orgpin = previousQa.orgpin and\r\n    glcounts.strataid = previousQa.strataid and\r\n    glcounts.calendarmonth = previousQa.calendarmonth and\r\n    glcounts.calendaryear = previousQa.calendaryear\r\n{% if is_incremental() %}\r\n    where vid not in (select vid from {{ this }})\r\n{% endif %}\r\n\r\n\r\nUNION\r\n\r\nselect glSph.itemID,\r\n       glSph.item,\r\n       glSph.strataid,\r\n       glSph.orgpin,\r\n       glSph.calendarmonth,\r\n       glSph.calendaryear,\r\n       glSph.calendaryearmonth,\r\n       0 sphentityid,\r\n       glSph.isValid,\r\n       case when glSph.isValid = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\r\n       case when glSph.isValid = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\r\n       case when glSph.isValid = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\r\n       cast(glSph.itemID as varchar)||'-'||cast(glSph.strataid as varchar)||'-'||cast(glSph.orgpin as varchar)||'-'||cast(glSph.calendaryearmonth as varchar)||'-'||cast(glSph.sphentityid as varchar)||'-'||coalesce(glSph.isValid, false)||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\r\nfrom {{ ref('Mart_Validation_GL_Sph') }} glSph\r\nleft outer join\r\n    (select distinct itemid, sphentityid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from {{ source('previous_qa', 'Mart_Validation_GL_Summary') }}) previousQa\r\non\r\n    glSph.itemid = previousQa.itemid and\r\n    glSph.sphentityid = previousQa.sphentityid and\r\n    glSph.orgpin = previousQa.orgpin and\r\n    glSph.strataid = previousQa.strataid and\r\n    glSph.calendarmonth = previousQa.calendarmonth and\r\n    glSph.calendaryear = previousQa.calendaryear\r\n{% if is_incremental() %}\r\n    where vid not in (select vid from {{ this }})\r\n{% endif %}", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Validation\\GL\\Mart_Validation_GL_Summary.sql", "original_file_path": "Models\\Validation\\GL\\Mart_Validation_GL_Summary.sql", "name": "Mart_Validation_GL_Summary", "alias": "Mart_Validation_GL_Summary", "checksum": {"name": "sha256", "checksum": "2d3d556473640a80ee9d750b84dffd28ef9afe58e7cfd52cffbe5803c62c6fcd"}, "tags": [], "refs": [["Mart_Validation_GL_Counts"], ["Mart_Validation_GL_Sph"]], "sources": [["previous_qa", "Mart_Validation_GL_Summary"], ["previous_qa", "Mart_Validation_GL_Summary"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Validation\\GL\\Mart_Validation_GL_Summary.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "incremental", "schema": "qa", "unique_key": "vid"}, "created_at": 1670001785.3703341, "compiled_code": "\n\n\nselect glcounts.itemID,\n       glcounts.item,\n       glcounts.strataid,\n       glcounts.orgpin,\n       glcounts.calendarmonth,\n       glcounts.calendaryear,\n       glcounts.calendaryearmonth,\n       glcounts.sphentityid,\n       (glcounts.IsValid AND COALESCE(previousQa.IsValid,false)) IsValid,\n       case when (glcounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\n       case when (glcounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\n       case when (glcounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\n       cast(glcounts.itemID as varchar)||'-'||cast(glcounts.strataid as varchar)||'-'||cast(glcounts.orgpin as varchar)||'-'||cast(glcounts.calendaryearmonth as varchar)||'-'||cast(glcounts.sphentityid as varchar)||'-'||coalesce(glcounts.isValid, 'false')||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\nfrom Datalake_Staging.qa.Mart_Validation_GL_Counts glcounts\nleft outer join\n    (select distinct itemid, sphentityid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_GL_Summary) previousQa\non\n    glcounts.itemid = previousQa.itemid and\n    glcounts.sphentityid = previousQa.sphentityid and\n    glcounts.orgpin = previousQa.orgpin and\n    glcounts.strataid = previousQa.strataid and\n    glcounts.calendarmonth = previousQa.calendarmonth and\n    glcounts.calendaryear = previousQa.calendaryear\n\n    where vid not in (select vid from Datalake_Staging.qa.Mart_Validation_GL_Summary)\n\n\n\nUNION\n\nselect glSph.itemID,\n       glSph.item,\n       glSph.strataid,\n       glSph.orgpin,\n       glSph.calendarmonth,\n       glSph.calendaryear,\n       glSph.calendaryearmonth,\n       0 sphentityid,\n       glSph.isValid,\n       case when glSph.isValid = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\n       case when glSph.isValid = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\n       case when glSph.isValid = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\n       cast(glSph.itemID as varchar)||'-'||cast(glSph.strataid as varchar)||'-'||cast(glSph.orgpin as varchar)||'-'||cast(glSph.calendaryearmonth as varchar)||'-'||cast(glSph.sphentityid as varchar)||'-'||coalesce(glSph.isValid, false)||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\nfrom Datalake_Staging.qa.Mart_Validation_GL_Sph glSph\nleft outer join\n    (select distinct itemid, sphentityid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_GL_Summary) previousQa\non\n    glSph.itemid = previousQa.itemid and\n    glSph.sphentityid = previousQa.sphentityid and\n    glSph.orgpin = previousQa.orgpin and\n    glSph.strataid = previousQa.strataid and\n    glSph.calendarmonth = previousQa.calendarmonth and\n    glSph.calendaryear = previousQa.calendaryear\n\n    where vid not in (select vid from Datalake_Staging.qa.Mart_Validation_GL_Summary)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "Datalake_Staging.qa.Mart_Validation_GL_Summary"}, "model.compare_sql.Mart_Validation_GL_Counts": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.compare_sql.reference.SPH_CONFIGURATION", "source.compare_sql.config.ENTITY_CRITERIA", "source.compare_sql.mart.GL_SUMMARY", "source.compare_sql.mart.GL_SUMMARY", "source.compare_sql.previous_mart.GL_SUMMARY", "source.compare_sql.previous_qa.Mart_Validation_GL_Summary", "source.compare_sql.mart.GL_SUMMARY", "source.compare_sql.previous_mart.GL_SUMMARY", "source.compare_sql.previous_qa.Mart_Validation_GL_Summary", "source.compare_sql.mart.GL_SUMMARY", "source.compare_sql.previous_mart.GL_SUMMARY", "source.compare_sql.previous_qa.Mart_Validation_GL_Summary"]}, "config": {"enabled": true, "alias": null, "schema": "qa", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "qa", "fqn": ["compare_sql", "Validation", "GL", "Mart_Validation_GL_Counts"], "unique_id": "model.compare_sql.Mart_Validation_GL_Counts", "raw_code": "WITH CATCHALL AS (\r\n\t SELECT\r\n\t\tec.sphentityid,\r\n\t\tLEFT(TO_VARCHAR(calendaryearmonth),4) calendaryear,\r\n\t\tRIGHT(TO_VARCHAR(calendaryearmonth),2) calendarmonth,\r\n\t\tcalendaryearmonth,\r\n\t\tsd.orgpin,\r\n\t\tsd.strataid\r\n\tFROM {{ source('reference', 'SPH_CONFIGURATION') }} sd\r\n\tINNER JOIN {{source('config', 'ENTITY_CRITERIA')}} on sd.strataid=ec.strataid\r\n\tCROSS JOIN (SELECT DISTINCT calendaryearmonth FROM {{source('mart', 'GL_SUMMARY')}}) dates\r\n\tWHERE isgldatamart=TRUE\r\n\t\tand calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\n)\r\nselect\r\n\t1 as itemID,\r\n\t'Distinct DepartmentId Count' as item,\r\n\r\n\tpreviousMonth.rowCount as previousMonth,\r\n\tcurrentMonth.rowCount as currentMonth,\r\n\r\n\t(COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0)) as diff,\r\n\t((COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0))/(previousMonth.rowCount)*100) as percentdiff,\r\n\r\n\tCATCHALL.sphentityid,\r\n\tCATCHALL.calendaryear,\r\n\tCATCHALL.calendarmonth,\r\n\tCATCHALL.calendaryearmonth,\r\n\tCATCHALL.orgpin,\r\n\tCATCHALL.strataid,\r\n\tcase \r\n\t\twhen abs(percentdiff) > {{ var('valid_percent_diff') }} then false \r\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\r\n\t\telse true  \r\n\tend as IsValid\r\n\r\nfrom CATCHALL\r\n\tleft outer join\r\n\t\t(select count(distinct DEPARTMENTID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid from {{source('mart', 'GL_SUMMARY')}}  group by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid) currentMonth\r\n\ton\r\n\t\tCATCHALL.sphentityid = currentMonth.sphentityid and\r\n\t\tCATCHALL.orgpin = currentMonth.orgpin and\r\n\t\tCATCHALL.strataid = currentMonth.strataid and\r\n\t\tCATCHALL.calendarmonth = currentMonth.calendarmonth and\r\n\t\tCATCHALL.calendaryear = currentMonth.calendaryear\r\n\tleft outer join\r\n\t\t(select count(distinct DEPARTMENTID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid from {{source('previous_mart', 'GL_SUMMARY')}} group by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid) previousMonth\r\n\ton\r\n\t\tCATCHALL.sphentityid = previousMonth.sphentityid and\r\n\t\tCATCHALL.orgpin = previousMonth.orgpin and\r\n\t\tCATCHALL.strataid = previousMonth.strataid and\r\n\t\tCATCHALL.calendarmonth = previousMonth.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousMonth.calendaryear\r\n    left outer join\r\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from {{ source('previous_qa', 'Mart_Validation_GL_Summary') }} where itemid=1) previousQa\r\n    on\r\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\r\n\t\tCATCHALL.orgpin = previousQa.orgpin and\r\n\t\tCATCHALL.strataid = previousQa.strataid and\r\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\r\n\r\n\r\nUNION ALL\r\n\r\nselect\r\n\r\n\t2 as itemID,\r\n\t'RowCount' as item,\r\n\r\n\tpreviousMonth.rowCount as previousMonth ,\r\n\tcurrentMonth.rowCount as currentMonth,\r\n\r\n\t(COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0)) as diff,\r\n\t((COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0))/(previousMonth.rowCount)*100) as percentdiff,\r\n\r\n\tCATCHALL.sphentityid,\r\n\tCATCHALL.calendaryear,\r\n\tCATCHALL.calendarmonth,\r\n\tCATCHALL.calendaryearmonth,\r\n\tCATCHALL.orgpin,\r\n\tCATCHALL.strataid,\r\n\tcase \r\n\t\twhen abs(percentdiff) > {{ var('valid_percent_diff') }} then false \r\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\r\n\t\telse true \r\n\tend as IsValid\r\n\r\nfrom CATCHALL\r\n\tleft outer join\r\n\t\t(select count(1) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid from {{source('mart', 'GL_SUMMARY')}}  group by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid) currentMonth\r\n\ton\r\n\t\tCATCHALL.sphentityid = currentMonth.sphentityid and\r\n\t\tCATCHALL.orgpin = currentMonth.orgpin and\r\n\t\tCATCHALL.strataid = currentMonth.strataid and\r\n\t\tCATCHALL.calendarmonth = currentMonth.calendarmonth and\r\n\t\tCATCHALL.calendaryear = currentMonth.calendaryear\r\n\tleft outer join\r\n\t\t(select count(1) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid from {{source('previous_mart', 'GL_SUMMARY')}} group by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid) previousMonth\r\n\ton\r\n\t\tCATCHALL.sphentityid = previousMonth.sphentityid and\r\n\t\tCATCHALL.orgpin = previousMonth.orgpin and\r\n\t\tCATCHALL.strataid = previousMonth.strataid and\r\n\t\tCATCHALL.calendarmonth = previousMonth.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousMonth.calendaryear\r\n    left outer join\r\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from {{ source('previous_qa', 'Mart_Validation_GL_Summary') }} where itemid=2) previousQa\r\n    on\r\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\r\n\t\tCATCHALL.orgpin = previousQa.orgpin and\r\n\t\tCATCHALL.strataid = previousQa.strataid and\r\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\r\n\r\n\r\n\r\n\r\nUNION ALL\r\n\r\n\r\nselect\r\n\t3 as itemID,\r\n\t'Distinct AccountId Count' as item,\r\n\r\n\tpreviousMonth.rowCount as previousMonth ,\r\n\tcurrentMonth.rowCount as currentMonth,\r\n\r\n\t(COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0)) as diff,\r\n\t((COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0))/(previousMonth.rowCount)*100.00) as percentdiff,\r\n\r\n\tCATCHALL.sphentityid,\r\n\tCATCHALL.calendaryear,\r\n\tCATCHALL.calendarmonth,\r\n\tCATCHALL.calendaryearmonth,\r\n\tCATCHALL.orgpin,\r\n\tCATCHALL.strataid,\r\n\tcase \r\n\t\twhen abs(percentdiff) > {{ var('valid_percent_diff') }} then false \r\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\r\n\t\telse true \r\n\tend as IsValid\r\n\r\nfrom CATCHALL\r\n\tleft outer join\r\n\t\t(select count(distinct ACCOUNTID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid from {{source('mart', 'GL_SUMMARY')}}  group by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid) currentMonth\r\n\ton\r\n\t\tCATCHALL.sphentityid = currentMonth.sphentityid and\r\n\t\tCATCHALL.orgpin = currentMonth.orgpin and\r\n\t\tCATCHALL.strataid = currentMonth.strataid and\r\n\t\tCATCHALL.calendarmonth = currentMonth.calendarmonth and\r\n\t\tCATCHALL.calendaryear = currentMonth.calendaryear\r\n\tleft outer join\r\n\t\t(select count(distinct ACCOUNTID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid from {{source('previous_mart', 'GL_SUMMARY')}} group by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid) previousMonth\r\n\ton\r\n\t\tCATCHALL.sphentityid = previousMonth.sphentityid and\r\n\t\tCATCHALL.orgpin = previousMonth.orgpin and\r\n\t\tCATCHALL.strataid = previousMonth.strataid and\r\n\t\tCATCHALL.calendarmonth = previousMonth.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousMonth.calendaryear\r\n    left outer join\r\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from {{ source('previous_qa', 'Mart_Validation_GL_Summary') }} where itemid=3) previousQa\r\n    on\r\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\r\n\t\tCATCHALL.orgpin = previousQa.orgpin and\r\n\t\tCATCHALL.strataid = previousQa.strataid and\r\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousQa.calendaryear", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Validation\\GL\\Mart_Validation_GL_Counts.sql", "original_file_path": "Models\\Validation\\GL\\Mart_Validation_GL_Counts.sql", "name": "Mart_Validation_GL_Counts", "alias": "Mart_Validation_GL_Counts", "checksum": {"name": "sha256", "checksum": "428a3ab01c38ad237dcd89f9fc2cb3a9e5553e1b60cec340f2c736b111f06124"}, "tags": [], "refs": [], "sources": [["reference", "SPH_CONFIGURATION"], ["config", "ENTITY_CRITERIA"], ["mart", "GL_SUMMARY"], ["mart", "GL_SUMMARY"], ["previous_mart", "GL_SUMMARY"], ["previous_qa", "Mart_Validation_GL_Summary"], ["mart", "GL_SUMMARY"], ["previous_mart", "GL_SUMMARY"], ["previous_qa", "Mart_Validation_GL_Summary"], ["mart", "GL_SUMMARY"], ["previous_mart", "GL_SUMMARY"], ["previous_qa", "Mart_Validation_GL_Summary"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Validation\\GL\\Mart_Validation_GL_Counts.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "table", "schema": "qa"}, "created_at": 1670001785.3763342, "compiled_code": "WITH CATCHALL AS (\n\t SELECT\n\t\tec.sphentityid,\n\t\tLEFT(TO_VARCHAR(calendaryearmonth),4) calendaryear,\n\t\tRIGHT(TO_VARCHAR(calendaryearmonth),2) calendarmonth,\n\t\tcalendaryearmonth,\n\t\tsd.orgpin,\n\t\tsd.strataid\n\tFROM Datalake_Sandbox.config.SPH_CONFIGURATION sd\n\tINNER JOIN Datalake_Staging.config.ENTITY_CRITERIA on sd.strataid=ec.strataid\n\tCROSS JOIN (SELECT DISTINCT calendaryearmonth FROM Datalake_Staging.mart.GL_SUMMARY) dates\n\tWHERE isgldatamart=TRUE\n\t\tand calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\n)\nselect\n\t1 as itemID,\n\t'Distinct DepartmentId Count' as item,\n\n\tpreviousMonth.rowCount as previousMonth,\n\tcurrentMonth.rowCount as currentMonth,\n\n\t(COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0)) as diff,\n\t((COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0))/(previousMonth.rowCount)*100) as percentdiff,\n\n\tCATCHALL.sphentityid,\n\tCATCHALL.calendaryear,\n\tCATCHALL.calendarmonth,\n\tCATCHALL.calendaryearmonth,\n\tCATCHALL.orgpin,\n\tCATCHALL.strataid,\n\tcase \n\t\twhen abs(percentdiff) > 20 then false \n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\n\t\telse true  \n\tend as IsValid\n\nfrom CATCHALL\n\tleft outer join\n\t\t(select count(distinct DEPARTMENTID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid from Datalake_Staging.mart.GL_SUMMARY  group by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid) currentMonth\n\ton\n\t\tCATCHALL.sphentityid = currentMonth.sphentityid and\n\t\tCATCHALL.orgpin = currentMonth.orgpin and\n\t\tCATCHALL.strataid = currentMonth.strataid and\n\t\tCATCHALL.calendarmonth = currentMonth.calendarmonth and\n\t\tCATCHALL.calendaryear = currentMonth.calendaryear\n\tleft outer join\n\t\t(select count(distinct DEPARTMENTID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid from Datalake_Staging_BAK.mart.GL_SUMMARY group by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid) previousMonth\n\ton\n\t\tCATCHALL.sphentityid = previousMonth.sphentityid and\n\t\tCATCHALL.orgpin = previousMonth.orgpin and\n\t\tCATCHALL.strataid = previousMonth.strataid and\n\t\tCATCHALL.calendarmonth = previousMonth.calendarmonth and\n\t\tCATCHALL.calendaryear = previousMonth.calendaryear\n    left outer join\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_GL_Summary where itemid=1) previousQa\n    on\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\n\t\tCATCHALL.orgpin = previousQa.orgpin and\n\t\tCATCHALL.strataid = previousQa.strataid and\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\n\n\nUNION ALL\n\nselect\n\n\t2 as itemID,\n\t'RowCount' as item,\n\n\tpreviousMonth.rowCount as previousMonth ,\n\tcurrentMonth.rowCount as currentMonth,\n\n\t(COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0)) as diff,\n\t((COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0))/(previousMonth.rowCount)*100) as percentdiff,\n\n\tCATCHALL.sphentityid,\n\tCATCHALL.calendaryear,\n\tCATCHALL.calendarmonth,\n\tCATCHALL.calendaryearmonth,\n\tCATCHALL.orgpin,\n\tCATCHALL.strataid,\n\tcase \n\t\twhen abs(percentdiff) > 20 then false \n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\n\t\telse true \n\tend as IsValid\n\nfrom CATCHALL\n\tleft outer join\n\t\t(select count(1) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid from Datalake_Staging.mart.GL_SUMMARY  group by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid) currentMonth\n\ton\n\t\tCATCHALL.sphentityid = currentMonth.sphentityid and\n\t\tCATCHALL.orgpin = currentMonth.orgpin and\n\t\tCATCHALL.strataid = currentMonth.strataid and\n\t\tCATCHALL.calendarmonth = currentMonth.calendarmonth and\n\t\tCATCHALL.calendaryear = currentMonth.calendaryear\n\tleft outer join\n\t\t(select count(1) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid from Datalake_Staging_BAK.mart.GL_SUMMARY group by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid) previousMonth\n\ton\n\t\tCATCHALL.sphentityid = previousMonth.sphentityid and\n\t\tCATCHALL.orgpin = previousMonth.orgpin and\n\t\tCATCHALL.strataid = previousMonth.strataid and\n\t\tCATCHALL.calendarmonth = previousMonth.calendarmonth and\n\t\tCATCHALL.calendaryear = previousMonth.calendaryear\n    left outer join\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_GL_Summary where itemid=2) previousQa\n    on\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\n\t\tCATCHALL.orgpin = previousQa.orgpin and\n\t\tCATCHALL.strataid = previousQa.strataid and\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\n\n\n\n\nUNION ALL\n\n\nselect\n\t3 as itemID,\n\t'Distinct AccountId Count' as item,\n\n\tpreviousMonth.rowCount as previousMonth ,\n\tcurrentMonth.rowCount as currentMonth,\n\n\t(COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0)) as diff,\n\t((COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0))/(previousMonth.rowCount)*100.00) as percentdiff,\n\n\tCATCHALL.sphentityid,\n\tCATCHALL.calendaryear,\n\tCATCHALL.calendarmonth,\n\tCATCHALL.calendaryearmonth,\n\tCATCHALL.orgpin,\n\tCATCHALL.strataid,\n\tcase \n\t\twhen abs(percentdiff) > 20 then false \n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\n\t\telse true \n\tend as IsValid\n\nfrom CATCHALL\n\tleft outer join\n\t\t(select count(distinct ACCOUNTID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid from Datalake_Staging.mart.GL_SUMMARY  group by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid) currentMonth\n\ton\n\t\tCATCHALL.sphentityid = currentMonth.sphentityid and\n\t\tCATCHALL.orgpin = currentMonth.orgpin and\n\t\tCATCHALL.strataid = currentMonth.strataid and\n\t\tCATCHALL.calendarmonth = currentMonth.calendarmonth and\n\t\tCATCHALL.calendaryear = currentMonth.calendaryear\n\tleft outer join\n\t\t(select count(distinct ACCOUNTID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid from Datalake_Staging_BAK.mart.GL_SUMMARY group by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid) previousMonth\n\ton\n\t\tCATCHALL.sphentityid = previousMonth.sphentityid and\n\t\tCATCHALL.orgpin = previousMonth.orgpin and\n\t\tCATCHALL.strataid = previousMonth.strataid and\n\t\tCATCHALL.calendarmonth = previousMonth.calendarmonth and\n\t\tCATCHALL.calendaryear = previousMonth.calendaryear\n    left outer join\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_GL_Summary where itemid=3) previousQa\n    on\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\n\t\tCATCHALL.orgpin = previousQa.orgpin and\n\t\tCATCHALL.strataid = previousQa.strataid and\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\n\t\tCATCHALL.calendaryear = previousQa.calendaryear", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "Datalake_Staging.qa.Mart_Validation_GL_Counts"}, "model.compare_sql.Mart_Validation_Payroll_Summary": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "model.compare_sql.Mart_Validation_Payroll_Counts", "model.compare_sql.Mart_Validation_Payroll_Sph", "model.compare_sql.Mart_Validation_Payroll_NonSpecified", "model.compare_sql.Mart_Validation_Payroll_Hours_Dollars"]}, "config": {"enabled": true, "alias": null, "schema": "qa", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "vid", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "qa", "fqn": ["compare_sql", "Validation", "Payroll", "Mart_Validation_Payroll_Summary"], "unique_id": "model.compare_sql.Mart_Validation_Payroll_Summary", "raw_code": "{{\r\n  config(\r\n    materialized = 'incremental',\r\n    unique_key = 'vid'\r\n  )\r\n}}\r\n\r\n\r\nselect payrollCounts.itemID,\r\n       payrollCounts.item,\r\n       payrollCounts.strataid,\r\n       payrollCounts.orgpin,\r\n       payrollCounts.calendarmonth,\r\n       payrollCounts.calendaryear,\r\n       payrollCounts.calendaryearmonth,\r\n       payrollCounts.sphentityid,\r\n       (payrollCounts.IsValid AND COALESCE(previousQa.IsValid,false)) IsValid,\r\n       case when (payrollCounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\r\n       case when (payrollCounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\r\n       case when (payrollCounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\r\n       cast(payrollCounts.itemID as varchar)||'-'||cast(payrollCounts.strataid as varchar)||'-'||cast(payrollCounts.orgpin as varchar)||'-'||cast(payrollCounts.calendaryearmonth as varchar)||'-'||coalesce(cast(payrollCounts.sphentityid as varchar), '0')||'-'||coalesce(payrollCounts.IsValid, 'false')||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\r\nfrom {{ ref('Mart_Validation_Payroll_Counts') }} payrollCounts\r\nleft outer join\r\n    (select distinct itemid, sphentityid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from {{ source('previous_qa', 'Mart_Validation_Payroll_Summary') }}) previousQa\r\non\r\n    payrollCounts.itemID = previousQa.itemid and\r\n    payrollCounts.sphentityid = previousQa.sphentityid and\r\n    payrollCounts.orgpin = previousQa.orgpin and\r\n    payrollCounts.strataid = previousQa.strataid and\r\n    payrollCounts.calendarmonth = previousQa.calendarmonth and\r\n    payrollCounts.calendaryear = previousQa.calendaryear\r\n{% if is_incremental() %}\r\n    where vid not in (select vid from {{ this }})\r\n{% endif %}\r\n\r\n\r\nUNION\r\n\r\nselect sphCounts.itemID,\r\n       sphCounts.item,\r\n       sphCounts.strataid,\r\n       sphCounts.orgpin,\r\n       sphCounts.calendarmonth,\r\n       sphCounts.calendaryear,\r\n       sphCounts.calendaryearmonth,\r\n       0 sphentityid,\r\n       case\r\n           when sphCounts.itemid = 5 and rowCount <> 4 then false\r\n           when sphCounts.itemid = 6 and rowCount <> 4 then false\r\n           when sphCounts.itemid = 7 and rowCount <> 3 then false\r\n           when sphCounts.itemid = 8 and rowCount <> 4 then false\r\n           else true end as IsValid,\r\n       case when IsValid = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\r\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\r\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\r\n       cast(sphCounts.itemID as varchar)||'-'||cast(sphCounts.strataid as varchar)||'-'||cast(sphCounts.orgpin as varchar)||'-'||cast(sphCounts.calendaryearmonth as varchar)||'-'||coalesce(cast(sphCounts.sphentityid as varchar), '0')||'-'||coalesce(IsValid, 'false')||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\r\nfrom {{ ref('Mart_Validation_Payroll_Sph') }} sphCounts\r\nleft outer join\r\n    (select distinct itemid, sphentityid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from {{ source('previous_qa', 'Mart_Validation_Payroll_Summary') }}) previousQa\r\non\r\n    sphCounts.itemID = previousQa.itemid and\r\n    sphCounts.sphentityid = previousQa.sphentityid and\r\n    sphCounts.orgpin = previousQa.orgpin and\r\n    sphCounts.strataid = previousQa.strataid and\r\n    sphCounts.calendarmonth = previousQa.calendarmonth and\r\n    sphCounts.calendaryear = previousQa.calendaryear\r\n{% if is_incremental() %}\r\n    where vid not in (select vid from {{ this }})\r\n{% endif %}\r\n\r\n\r\nUNION\r\n\r\nselect specCounts.itemID,\r\n       specCounts.item,\r\n       specCounts.strataid,\r\n       specCounts.orgpin,\r\n       specCounts.calendarmonth,\r\n       specCounts.calendaryear,\r\n       specCounts.calendaryearmonth,\r\n       0 as sphentityid,\r\n       case when abs(percentNonSpecified) > 1 then false else true end as IsValid,\r\n       case when IsValid = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\r\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\r\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\r\n       cast(specCounts.itemID as varchar)||'-'||cast(specCounts.strataid as varchar)||'-'||cast(specCounts.orgpin as varchar)||'-'||cast(specCounts.calendaryearmonth as varchar)||'-'||coalesce(cast(sphentityid as varchar), '0')||'-'||coalesce(IsValid, 'false')||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\r\nfrom {{ ref('Mart_Validation_Payroll_NonSpecified') }} specCounts\r\nleft outer join\r\n    (select distinct itemid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from {{ source('previous_qa', 'Mart_Validation_Payroll_Summary') }}) previousQa\r\non\r\n    specCounts.itemID = previousQa.itemid and\r\n    specCounts.orgpin = previousQa.orgpin and\r\n    specCounts.strataid = previousQa.strataid and\r\n    specCounts.calendarmonth = previousQa.calendarmonth and\r\n    specCounts.calendaryear = previousQa.calendaryear\r\n{% if is_incremental() %}\r\n    where vid not in (select vid from {{ this }})\r\n{% endif %}\r\n\r\n\r\nUNION\r\n\r\nselect hdCounts.itemID,\r\n       hdCounts.item,\r\n       hdCounts.strataid,\r\n       hdCounts.orgpin,\r\n       hdCounts.calendarmonth,\r\n       hdCounts.calendaryear,\r\n       hdCounts.calendaryearmonth,\r\n       hdCounts.sphentityid,\r\n       case when sumValue = 0 then false else true end as IsValid,\r\n       case when IsValid = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\r\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\r\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\r\n       cast(hdCounts.itemID as varchar)||'-'||cast(hdCounts.strataid as varchar)||'-'||cast(hdCounts.orgpin as varchar)||'-'||cast(hdCounts.calendaryearmonth as varchar)||'-'||coalesce(cast(hdCounts.sphentityid as varchar), '0')||'-'||coalesce(IsValid, 'false')||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\r\nfrom {{ ref('Mart_Validation_Payroll_Hours_Dollars') }} hdCounts\r\nleft outer join\r\n    (select distinct itemid, sphentityid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from {{ source('previous_qa', 'Mart_Validation_Payroll_Summary') }}) previousQa\r\non\r\n    hdCounts.itemID = previousQa.itemid and\r\n    hdCounts.sphentityid = previousQa.sphentityid and\r\n    hdCounts.orgpin = previousQa.orgpin and\r\n    hdCounts.strataid = previousQa.strataid and\r\n    hdCounts.calendarmonth = previousQa.calendarmonth and\r\n    hdCounts.calendaryear = previousQa.calendaryear\r\n{% if is_incremental() %}\r\n    where vid not in (select vid from {{ this }})\r\n{% endif %}", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Validation\\Payroll\\Mart_Validation_Payroll_Summary.sql", "original_file_path": "Models\\Validation\\Payroll\\Mart_Validation_Payroll_Summary.sql", "name": "Mart_Validation_Payroll_Summary", "alias": "Mart_Validation_Payroll_Summary", "checksum": {"name": "sha256", "checksum": "0b767b970ae4d20a21f7572ddb4873010e4afbe15004e17c6bf522335921c503"}, "tags": [], "refs": [["Mart_Validation_Payroll_Counts"], ["Mart_Validation_Payroll_Sph"], ["Mart_Validation_Payroll_NonSpecified"], ["Mart_Validation_Payroll_Hours_Dollars"]], "sources": [["previous_qa", "Mart_Validation_Payroll_Summary"], ["previous_qa", "Mart_Validation_Payroll_Summary"], ["previous_qa", "Mart_Validation_Payroll_Summary"], ["previous_qa", "Mart_Validation_Payroll_Summary"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Validation\\Payroll\\Mart_Validation_Payroll_Summary.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "incremental", "schema": "qa", "unique_key": "vid"}, "created_at": 1670001785.3843665, "compiled_code": "\n\n\nselect payrollCounts.itemID,\n       payrollCounts.item,\n       payrollCounts.strataid,\n       payrollCounts.orgpin,\n       payrollCounts.calendarmonth,\n       payrollCounts.calendaryear,\n       payrollCounts.calendaryearmonth,\n       payrollCounts.sphentityid,\n       (payrollCounts.IsValid AND COALESCE(previousQa.IsValid,false)) IsValid,\n       case when (payrollCounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\n       case when (payrollCounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\n       case when (payrollCounts.IsValid AND previousQa.IsValid) = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\n       cast(payrollCounts.itemID as varchar)||'-'||cast(payrollCounts.strataid as varchar)||'-'||cast(payrollCounts.orgpin as varchar)||'-'||cast(payrollCounts.calendaryearmonth as varchar)||'-'||coalesce(cast(payrollCounts.sphentityid as varchar), '0')||'-'||coalesce(payrollCounts.IsValid, 'false')||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\nfrom Datalake_Staging.qa.Mart_Validation_Payroll_Counts payrollCounts\nleft outer join\n    (select distinct itemid, sphentityid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Payroll_Summary) previousQa\non\n    payrollCounts.itemID = previousQa.itemid and\n    payrollCounts.sphentityid = previousQa.sphentityid and\n    payrollCounts.orgpin = previousQa.orgpin and\n    payrollCounts.strataid = previousQa.strataid and\n    payrollCounts.calendarmonth = previousQa.calendarmonth and\n    payrollCounts.calendaryear = previousQa.calendaryear\n\n    where vid not in (select vid from Datalake_Staging.qa.Mart_Validation_Payroll_Summary)\n\n\n\nUNION\n\nselect sphCounts.itemID,\n       sphCounts.item,\n       sphCounts.strataid,\n       sphCounts.orgpin,\n       sphCounts.calendarmonth,\n       sphCounts.calendaryear,\n       sphCounts.calendaryearmonth,\n       0 sphentityid,\n       case\n           when sphCounts.itemid = 5 and rowCount <> 4 then false\n           when sphCounts.itemid = 6 and rowCount <> 4 then false\n           when sphCounts.itemid = 7 and rowCount <> 3 then false\n           when sphCounts.itemid = 8 and rowCount <> 4 then false\n           else true end as IsValid,\n       case when IsValid = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\n       cast(sphCounts.itemID as varchar)||'-'||cast(sphCounts.strataid as varchar)||'-'||cast(sphCounts.orgpin as varchar)||'-'||cast(sphCounts.calendaryearmonth as varchar)||'-'||coalesce(cast(sphCounts.sphentityid as varchar), '0')||'-'||coalesce(IsValid, 'false')||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\nfrom Datalake_Staging.qa.Mart_Validation_Payroll_Sph sphCounts\nleft outer join\n    (select distinct itemid, sphentityid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Payroll_Summary) previousQa\non\n    sphCounts.itemID = previousQa.itemid and\n    sphCounts.sphentityid = previousQa.sphentityid and\n    sphCounts.orgpin = previousQa.orgpin and\n    sphCounts.strataid = previousQa.strataid and\n    sphCounts.calendarmonth = previousQa.calendarmonth and\n    sphCounts.calendaryear = previousQa.calendaryear\n\n    where vid not in (select vid from Datalake_Staging.qa.Mart_Validation_Payroll_Summary)\n\n\n\nUNION\n\nselect specCounts.itemID,\n       specCounts.item,\n       specCounts.strataid,\n       specCounts.orgpin,\n       specCounts.calendarmonth,\n       specCounts.calendaryear,\n       specCounts.calendaryearmonth,\n       0 as sphentityid,\n       case when abs(percentNonSpecified) > 1 then false else true end as IsValid,\n       case when IsValid = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\n       cast(specCounts.itemID as varchar)||'-'||cast(specCounts.strataid as varchar)||'-'||cast(specCounts.orgpin as varchar)||'-'||cast(specCounts.calendaryearmonth as varchar)||'-'||coalesce(cast(sphentityid as varchar), '0')||'-'||coalesce(IsValid, 'false')||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\nfrom Datalake_Staging.qa.Mart_Validation_Payroll_NonSpecified specCounts\nleft outer join\n    (select distinct itemid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Payroll_Summary) previousQa\non\n    specCounts.itemID = previousQa.itemid and\n    specCounts.orgpin = previousQa.orgpin and\n    specCounts.strataid = previousQa.strataid and\n    specCounts.calendarmonth = previousQa.calendarmonth and\n    specCounts.calendaryear = previousQa.calendaryear\n\n    where vid not in (select vid from Datalake_Staging.qa.Mart_Validation_Payroll_Summary)\n\n\n\nUNION\n\nselect hdCounts.itemID,\n       hdCounts.item,\n       hdCounts.strataid,\n       hdCounts.orgpin,\n       hdCounts.calendarmonth,\n       hdCounts.calendaryear,\n       hdCounts.calendaryearmonth,\n       hdCounts.sphentityid,\n       case when sumValue = 0 then false else true end as IsValid,\n       case when IsValid = previousQa.IsValid then previousQa.WasOverride end as IsOverride,\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewed end as IsReviewed,\n       case when IsValid = previousQa.IsValid then previousQa.WasReviewedBy end as ReviewedBy,\n       cast(hdCounts.itemID as varchar)||'-'||cast(hdCounts.strataid as varchar)||'-'||cast(hdCounts.orgpin as varchar)||'-'||cast(hdCounts.calendaryearmonth as varchar)||'-'||coalesce(cast(hdCounts.sphentityid as varchar), '0')||'-'||coalesce(IsValid, 'false')||'-'||coalesce(IsOverride, 'false')||'-'||coalesce(IsReviewed, 'false')||'-'||coalesce(ReviewedBy, 'NA') as vid\nfrom Datalake_Staging.qa.Mart_Validation_Payroll_Hours_Dollars hdCounts\nleft outer join\n    (select distinct itemid, sphentityid, calendaryear, calendarmonth, orgpin, strataid, IsValid, IsOverride as WasOverride, IsReviewed as WasReviewed, ReviewedBy as WasReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Payroll_Summary) previousQa\non\n    hdCounts.itemID = previousQa.itemid and\n    hdCounts.sphentityid = previousQa.sphentityid and\n    hdCounts.orgpin = previousQa.orgpin and\n    hdCounts.strataid = previousQa.strataid and\n    hdCounts.calendarmonth = previousQa.calendarmonth and\n    hdCounts.calendaryear = previousQa.calendaryear\n\n    where vid not in (select vid from Datalake_Staging.qa.Mart_Validation_Payroll_Summary)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "Datalake_Staging.qa.Mart_Validation_Payroll_Summary"}, "model.compare_sql.Mart_Validation_Payroll_Counts": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.compare_sql.reference.SPH_CONFIGURATION", "source.compare_sql.config.ENTITY_CRITERIA", "source.compare_sql.mart.PAYROLL_SUMMARY", "source.compare_sql.mart.PAYROLL_SUMMARY", "source.compare_sql.previous_mart.PAYROLL_SUMMARY", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "source.compare_sql.mart.PAYROLL_SUMMARY", "source.compare_sql.previous_mart.PAYROLL_SUMMARY", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "source.compare_sql.mart.PAYROLL_SUMMARY", "source.compare_sql.previous_mart.PAYROLL_SUMMARY", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "source.compare_sql.mart.PAYROLL_SUMMARY", "source.compare_sql.previous_mart.PAYROLL_SUMMARY", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary"]}, "config": {"enabled": true, "alias": null, "schema": "qa", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "post-hook": [], "pre-hook": []}, "database": "Datalake_Staging", "schema": "qa", "fqn": ["compare_sql", "Validation", "Payroll", "Mart_Validation_Payroll_Counts"], "unique_id": "model.compare_sql.Mart_Validation_Payroll_Counts", "raw_code": "WITH CATCHALL AS (\r\n\t SELECT\r\n\t\tec.sphentityid,\r\n\t\tLEFT(TO_VARCHAR(calendaryearmonth),4) calendaryear,\r\n\t\tRIGHT(TO_VARCHAR(calendaryearmonth),2) calendarmonth,\r\n\t\tcalendaryearmonth,\r\n\t\tsd.orgpin,\r\n\t\tsd.strataid\r\n\tFROM {{ source('reference', 'SPH_CONFIGURATION') }} sd\r\n\tINNER JOIN {{source('config', 'ENTITY_CRITERIA')}} ec on sd.strataid=ec.strataid\r\n\tCROSS JOIN (SELECT DISTINCT calendaryearmonth FROM {{source('mart', 'PAYROLL_SUMMARY')}}) dates\r\n\tWHERE ispayrolldatamart=TRUE\r\n\t\tand calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\r\n)\r\nselect\r\n\r\n\t1 as itemID,\r\n\t'Distinct DepartmentId Count' as item,\r\n\r\n\tpreviousMonth.rowCount as previousMonth ,\r\n\tcurrentMonth.rowCount as currentMonth,\r\n\r\n\t(COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0)) as diff,\r\n\t((COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0))/(previousMonth.rowCount)*100) as percentdiff,\r\n\r\n\tCATCHALL.sphentityid,\r\n\tCATCHALL.calendaryear,\r\n\tCATCHALL.calendarmonth,\r\n\tCATCHALL.calendaryearmonth,\r\n\tCATCHALL.orgpin,\r\n\tCATCHALL.strataid,\r\n\tcase \r\n\t\twhen abs(percentdiff) > {{ var('valid_percent_diff') }} then false \r\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\r\n\t\telse true \r\n\tend as IsValid\r\n\r\nfrom CATCHALL\r\n\tleft outer join (\r\n\t\tselect count(distinct DEPARTMENTID) rowCount, SPHENTITYID, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\r\n\t\tfrom {{source('mart', 'PAYROLL_SUMMARY')}}\r\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\r\n\t) currentMonth\r\n\ton\r\n\t\tCATCHALL.sphentityid = currentMonth.sphentityid and\r\n\t\tCATCHALL.orgpin = currentMonth.orgpin and\r\n\t\tCATCHALL.strataid = currentMonth.strataid and\r\n\t\tCATCHALL.calendarmonth = currentMonth.calendarmonth and\r\n\t\tCATCHALL.calendaryear = currentMonth.calendaryear\r\n\tleft outer join (\r\n\t\tselect count(distinct DEPARTMENTID) rowCount, SPHENTITYID, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\r\n\t\tfrom {{source('previous_mart', 'PAYROLL_SUMMARY')}}\r\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\r\n\t) previousMonth\r\n\ton\r\n\t\tCATCHALL.sphentityid = previousMonth.sphentityid and\r\n\t\tCATCHALL.orgpin = previousMonth.orgpin and\r\n\t\tCATCHALL.strataid = previousMonth.strataid and\r\n\t\tCATCHALL.calendarmonth = previousMonth.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousMonth.calendaryear\r\n    left outer join\r\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from {{ source('previous_qa', 'Mart_Validation_Payroll_Summary') }} where itemid=1) previousQa\r\n    on\r\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\r\n\t\tCATCHALL.orgpin = previousQa.orgpin and\r\n\t\tCATCHALL.strataid = previousQa.strataid and\r\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\r\n\r\n\r\nUNION\r\n\r\n\r\nselect\r\n\r\n\t2 as itemID,\r\n\t'RowCount' as item,\r\n\r\n\tpreviousMonth.rowCount as previousMonth ,\r\n\tcurrentMonth.rowCount as currentMonth,\r\n\r\n\t(COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0)) as diff,\r\n\t((COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0))/(previousMonth.rowCount)*100) as percentdiff,\r\n\r\n\tCATCHALL.sphentityid,\r\n\tCATCHALL.calendaryear,\r\n\tCATCHALL.calendarmonth,\r\n\tCATCHALL.calendaryearmonth,\r\n\tCATCHALL.orgpin,\r\n\tCATCHALL.strataid,\r\n    case \r\n\t\twhen abs(percentdiff) > {{ var('valid_percent_diff') }} then false \r\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\r\n\t\telse true \r\n\tend as IsValid\r\n\r\nfrom CATCHALL\r\n\tleft outer join (\r\n\t\tselect count(1) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\r\n\t\tfrom {{source('mart', 'PAYROLL_SUMMARY')}}\r\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\r\n\t) currentMonth\r\n\ton\r\n\t\tCATCHALL.sphentityid = currentMonth.sphentityid and\r\n\t\tCATCHALL.orgpin = currentMonth.orgpin and\r\n\t\tCATCHALL.strataid = currentMonth.strataid and\r\n\t\tCATCHALL.calendarmonth = currentMonth.calendarmonth and\r\n\t\tCATCHALL.calendaryear = currentMonth.calendaryear\r\n\tleft outer join (\r\n\t\tselect count(1) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\r\n\t\tfrom {{source('previous_mart', 'PAYROLL_SUMMARY')}}\r\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\r\n\t) previousMonth\r\n\ton\r\n\t\tCATCHALL.sphentityid = previousMonth.sphentityid and\r\n\t\tCATCHALL.orgpin = previousMonth.orgpin and\r\n\t\tCATCHALL.strataid = previousMonth.strataid and\r\n\t\tCATCHALL.calendarmonth = previousMonth.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousMonth.calendaryear\r\n    left outer join\r\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from {{ source('previous_qa', 'Mart_Validation_Payroll_Summary') }} where itemid=2) previousQa\r\n    on\r\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\r\n\t\tCATCHALL.orgpin = previousQa.orgpin and\r\n\t\tCATCHALL.strataid = previousQa.strataid and\r\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\r\n\r\n\r\nUNION\r\n\r\n\r\nselect\r\n\r\n\t3 as itemID,\r\n\t'Distinct JobCodeId Count' as item,\r\n\r\n\tpreviousMonth.rowCount as previousMonth ,\r\n\tcurrentMonth.rowCount as currentMonth,\r\n\r\n\t(COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0)) as diff,\r\n\t((COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0))/(previousMonth.rowCount)*100) as percentdiff,\r\n\r\n\tCATCHALL.sphentityid,\r\n\tCATCHALL.calendaryear,\r\n\tCATCHALL.calendarmonth,\r\n\tCATCHALL.calendaryearmonth,\r\n\tCATCHALL.orgpin,\r\n\tCATCHALL.strataid,\r\n    case \r\n\t\twhen abs(percentdiff) > {{ var('valid_percent_diff') }} then false \r\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\r\n\t\telse true \r\n\tend as IsValid\r\n\r\nfrom CATCHALL\r\n\tleft outer join (\r\n\t\tselect count(distinct JOBCODEID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\r\n\t\tfrom {{source('mart', 'PAYROLL_SUMMARY')}}\r\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\r\n\t) currentMonth\r\n\ton\r\n\t\tCATCHALL.sphentityid = currentMonth.sphentityid and\r\n\t\tCATCHALL.orgpin = currentMonth.orgpin and\r\n\t\tCATCHALL.strataid = currentMonth.strataid and\r\n\t\tCATCHALL.calendarmonth = currentMonth.calendarmonth and\r\n\t\tCATCHALL.calendaryear = currentMonth.calendaryear\r\n\tleft outer join (\r\n\t\tselect count(distinct JOBCODEID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\r\n\t\tfrom {{source('previous_mart', 'PAYROLL_SUMMARY')}}\r\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\r\n\t) previousMonth\r\n\ton\r\n\t\tCATCHALL.sphentityid = previousMonth.sphentityid and\r\n\t\tCATCHALL.orgpin = previousMonth.orgpin and\r\n\t\tCATCHALL.strataid = previousMonth.strataid and\r\n\t\tCATCHALL.calendarmonth = previousMonth.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousMonth.calendaryear\r\n    left outer join\r\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from {{ source('previous_qa', 'Mart_Validation_Payroll_Summary') }} where itemid=3) previousQa\r\n    on\r\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\r\n\t\tCATCHALL.orgpin = previousQa.orgpin and\r\n\t\tCATCHALL.strataid = previousQa.strataid and\r\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\r\n\r\n\r\nUNION\r\n\r\n\r\nselect\r\n\r\n\t4 as itemID,\r\n\t'Distinct PayCodeId Count' as item,\r\n\r\n\tpreviousMonth.rowCount as previousMonth ,\r\n\tcurrentMonth.rowCount as currentMonth,\r\n\r\n\t(COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0)) as diff,\r\n\t((COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0))/(previousMonth.rowCount)*100) as percentdiff,\r\n\r\n\tCATCHALL.sphentityid,\r\n\tCATCHALL.calendaryear,\r\n\tCATCHALL.calendarmonth,\r\n\tCATCHALL.calendaryearmonth,\r\n\tCATCHALL.orgpin,\r\n\tCATCHALL.strataid,\r\n    case \r\n\t\twhen abs(percentdiff) > {{ var('valid_percent_diff') }} then false \r\n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\r\n\t\telse true \r\n\tend as IsValid\r\n\r\nfrom CATCHALL\r\n\tleft outer join (\r\n\t\tselect count(distinct PAYCODEID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\r\n\t\tfrom {{source('mart', 'PAYROLL_SUMMARY')}}\r\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\r\n\t) currentMonth\r\n\ton\r\n\t\tCATCHALL.sphentityid = currentMonth.sphentityid and\r\n\t\tCATCHALL.orgpin = currentMonth.orgpin and\r\n\t\tCATCHALL.strataid = currentMonth.strataid and\r\n\t\tCATCHALL.calendarmonth = currentMonth.calendarmonth and\r\n\t\tCATCHALL.calendaryear = currentMonth.calendaryear\r\n\tleft outer join (\r\n\t\tselect count(distinct PAYCODEID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\r\n\t\tfrom {{source('previous_mart', 'PAYROLL_SUMMARY')}}\r\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\r\n\t) previousMonth\r\n\ton\r\n\t\tCATCHALL.sphentityid = previousMonth.sphentityid and\r\n\t\tCATCHALL.orgpin = previousMonth.orgpin and\r\n\t\tCATCHALL.strataid = previousMonth.strataid and\r\n\t\tCATCHALL.calendarmonth = previousMonth.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousMonth.calendaryear\r\n\tleft outer join\r\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from {{ source('previous_qa', 'Mart_Validation_Payroll_Summary') }} where itemid=4) previousQa\r\n    on\r\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\r\n\t\tCATCHALL.orgpin = previousQa.orgpin and\r\n\t\tCATCHALL.strataid = previousQa.strataid and\r\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\r\n\t\tCATCHALL.calendaryear = previousQa.calendaryear", "language": "sql", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Validation\\Payroll\\Mart_Validation_Payroll_Counts.sql", "original_file_path": "Models\\Validation\\Payroll\\Mart_Validation_Payroll_Counts.sql", "name": "Mart_Validation_Payroll_Counts", "alias": "Mart_Validation_Payroll_Counts", "checksum": {"name": "sha256", "checksum": "c8dc9c1ea834015fe05b523fde911a2d1fbba5337f8cab4d9e0b3674d294ce2e"}, "tags": [], "refs": [], "sources": [["reference", "SPH_CONFIGURATION"], ["config", "ENTITY_CRITERIA"], ["mart", "PAYROLL_SUMMARY"], ["mart", "PAYROLL_SUMMARY"], ["previous_mart", "PAYROLL_SUMMARY"], ["previous_qa", "Mart_Validation_Payroll_Summary"], ["mart", "PAYROLL_SUMMARY"], ["previous_mart", "PAYROLL_SUMMARY"], ["previous_qa", "Mart_Validation_Payroll_Summary"], ["mart", "PAYROLL_SUMMARY"], ["previous_mart", "PAYROLL_SUMMARY"], ["previous_qa", "Mart_Validation_Payroll_Summary"], ["mart", "PAYROLL_SUMMARY"], ["previous_mart", "PAYROLL_SUMMARY"], ["previous_qa", "Mart_Validation_Payroll_Summary"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target\\compiled\\compare_sql\\Models\\Validation\\Payroll\\Mart_Validation_Payroll_Counts.sql", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "materialized": "table", "schema": "qa"}, "created_at": 1670001785.3923686, "compiled_code": "WITH CATCHALL AS (\n\t SELECT\n\t\tec.sphentityid,\n\t\tLEFT(TO_VARCHAR(calendaryearmonth),4) calendaryear,\n\t\tRIGHT(TO_VARCHAR(calendaryearmonth),2) calendarmonth,\n\t\tcalendaryearmonth,\n\t\tsd.orgpin,\n\t\tsd.strataid\n\tFROM Datalake_Sandbox.config.SPH_CONFIGURATION sd\n\tINNER JOIN Datalake_Staging.config.ENTITY_CRITERIA ec on sd.strataid=ec.strataid\n\tCROSS JOIN (SELECT DISTINCT calendaryearmonth FROM Datalake_Staging.mart.PAYROLL_SUMMARY) dates\n\tWHERE ispayrolldatamart=TRUE\n\t\tand calendaryearmonth<=CAST(to_varchar(dateadd(month,-1,current_date()),'YYYYMM') as int)\n)\nselect\n\n\t1 as itemID,\n\t'Distinct DepartmentId Count' as item,\n\n\tpreviousMonth.rowCount as previousMonth ,\n\tcurrentMonth.rowCount as currentMonth,\n\n\t(COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0)) as diff,\n\t((COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0))/(previousMonth.rowCount)*100) as percentdiff,\n\n\tCATCHALL.sphentityid,\n\tCATCHALL.calendaryear,\n\tCATCHALL.calendarmonth,\n\tCATCHALL.calendaryearmonth,\n\tCATCHALL.orgpin,\n\tCATCHALL.strataid,\n\tcase \n\t\twhen abs(percentdiff) > 20 then false \n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\n\t\telse true \n\tend as IsValid\n\nfrom CATCHALL\n\tleft outer join (\n\t\tselect count(distinct DEPARTMENTID) rowCount, SPHENTITYID, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\n\t\tfrom Datalake_Staging.mart.PAYROLL_SUMMARY\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\n\t) currentMonth\n\ton\n\t\tCATCHALL.sphentityid = currentMonth.sphentityid and\n\t\tCATCHALL.orgpin = currentMonth.orgpin and\n\t\tCATCHALL.strataid = currentMonth.strataid and\n\t\tCATCHALL.calendarmonth = currentMonth.calendarmonth and\n\t\tCATCHALL.calendaryear = currentMonth.calendaryear\n\tleft outer join (\n\t\tselect count(distinct DEPARTMENTID) rowCount, SPHENTITYID, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\n\t\tfrom Datalake_Staging_BAK.mart.PAYROLL_SUMMARY\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\n\t) previousMonth\n\ton\n\t\tCATCHALL.sphentityid = previousMonth.sphentityid and\n\t\tCATCHALL.orgpin = previousMonth.orgpin and\n\t\tCATCHALL.strataid = previousMonth.strataid and\n\t\tCATCHALL.calendarmonth = previousMonth.calendarmonth and\n\t\tCATCHALL.calendaryear = previousMonth.calendaryear\n    left outer join\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Payroll_Summary where itemid=1) previousQa\n    on\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\n\t\tCATCHALL.orgpin = previousQa.orgpin and\n\t\tCATCHALL.strataid = previousQa.strataid and\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\n\n\nUNION\n\n\nselect\n\n\t2 as itemID,\n\t'RowCount' as item,\n\n\tpreviousMonth.rowCount as previousMonth ,\n\tcurrentMonth.rowCount as currentMonth,\n\n\t(COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0)) as diff,\n\t((COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0))/(previousMonth.rowCount)*100) as percentdiff,\n\n\tCATCHALL.sphentityid,\n\tCATCHALL.calendaryear,\n\tCATCHALL.calendarmonth,\n\tCATCHALL.calendaryearmonth,\n\tCATCHALL.orgpin,\n\tCATCHALL.strataid,\n    case \n\t\twhen abs(percentdiff) > 20 then false \n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\n\t\telse true \n\tend as IsValid\n\nfrom CATCHALL\n\tleft outer join (\n\t\tselect count(1) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\n\t\tfrom Datalake_Staging.mart.PAYROLL_SUMMARY\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\n\t) currentMonth\n\ton\n\t\tCATCHALL.sphentityid = currentMonth.sphentityid and\n\t\tCATCHALL.orgpin = currentMonth.orgpin and\n\t\tCATCHALL.strataid = currentMonth.strataid and\n\t\tCATCHALL.calendarmonth = currentMonth.calendarmonth and\n\t\tCATCHALL.calendaryear = currentMonth.calendaryear\n\tleft outer join (\n\t\tselect count(1) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\n\t\tfrom Datalake_Staging_BAK.mart.PAYROLL_SUMMARY\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\n\t) previousMonth\n\ton\n\t\tCATCHALL.sphentityid = previousMonth.sphentityid and\n\t\tCATCHALL.orgpin = previousMonth.orgpin and\n\t\tCATCHALL.strataid = previousMonth.strataid and\n\t\tCATCHALL.calendarmonth = previousMonth.calendarmonth and\n\t\tCATCHALL.calendaryear = previousMonth.calendaryear\n    left outer join\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Payroll_Summary where itemid=2) previousQa\n    on\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\n\t\tCATCHALL.orgpin = previousQa.orgpin and\n\t\tCATCHALL.strataid = previousQa.strataid and\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\n\n\nUNION\n\n\nselect\n\n\t3 as itemID,\n\t'Distinct JobCodeId Count' as item,\n\n\tpreviousMonth.rowCount as previousMonth ,\n\tcurrentMonth.rowCount as currentMonth,\n\n\t(COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0)) as diff,\n\t((COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0))/(previousMonth.rowCount)*100) as percentdiff,\n\n\tCATCHALL.sphentityid,\n\tCATCHALL.calendaryear,\n\tCATCHALL.calendarmonth,\n\tCATCHALL.calendaryearmonth,\n\tCATCHALL.orgpin,\n\tCATCHALL.strataid,\n    case \n\t\twhen abs(percentdiff) > 20 then false \n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\n\t\telse true \n\tend as IsValid\n\nfrom CATCHALL\n\tleft outer join (\n\t\tselect count(distinct JOBCODEID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\n\t\tfrom Datalake_Staging.mart.PAYROLL_SUMMARY\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\n\t) currentMonth\n\ton\n\t\tCATCHALL.sphentityid = currentMonth.sphentityid and\n\t\tCATCHALL.orgpin = currentMonth.orgpin and\n\t\tCATCHALL.strataid = currentMonth.strataid and\n\t\tCATCHALL.calendarmonth = currentMonth.calendarmonth and\n\t\tCATCHALL.calendaryear = currentMonth.calendaryear\n\tleft outer join (\n\t\tselect count(distinct JOBCODEID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\n\t\tfrom Datalake_Staging_BAK.mart.PAYROLL_SUMMARY\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\n\t) previousMonth\n\ton\n\t\tCATCHALL.sphentityid = previousMonth.sphentityid and\n\t\tCATCHALL.orgpin = previousMonth.orgpin and\n\t\tCATCHALL.strataid = previousMonth.strataid and\n\t\tCATCHALL.calendarmonth = previousMonth.calendarmonth and\n\t\tCATCHALL.calendaryear = previousMonth.calendaryear\n    left outer join\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Payroll_Summary where itemid=3) previousQa\n    on\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\n\t\tCATCHALL.orgpin = previousQa.orgpin and\n\t\tCATCHALL.strataid = previousQa.strataid and\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\n\t\tCATCHALL.calendaryear = previousQa.calendaryear\n\n\nUNION\n\n\nselect\n\n\t4 as itemID,\n\t'Distinct PayCodeId Count' as item,\n\n\tpreviousMonth.rowCount as previousMonth ,\n\tcurrentMonth.rowCount as currentMonth,\n\n\t(COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0)) as diff,\n\t((COALESCE(currentMonth.rowCount,0) - COALESCE(previousMonth.rowCount,0))/(previousMonth.rowCount)*100) as percentdiff,\n\n\tCATCHALL.sphentityid,\n\tCATCHALL.calendaryear,\n\tCATCHALL.calendarmonth,\n\tCATCHALL.calendaryearmonth,\n\tCATCHALL.orgpin,\n\tCATCHALL.strataid,\n    case \n\t\twhen abs(percentdiff) > 20 then false \n\t\twhen previousMonth.rowCount is null and currentMonth.rowCount is not null then false\n\t\telse true \n\tend as IsValid\n\nfrom CATCHALL\n\tleft outer join (\n\t\tselect count(distinct PAYCODEID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\n\t\tfrom Datalake_Staging.mart.PAYROLL_SUMMARY\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\n\t) currentMonth\n\ton\n\t\tCATCHALL.sphentityid = currentMonth.sphentityid and\n\t\tCATCHALL.orgpin = currentMonth.orgpin and\n\t\tCATCHALL.strataid = currentMonth.strataid and\n\t\tCATCHALL.calendarmonth = currentMonth.calendarmonth and\n\t\tCATCHALL.calendaryear = currentMonth.calendaryear\n\tleft outer join (\n\t\tselect count(distinct PAYCODEID) rowCount, sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid\n\t\tfrom Datalake_Staging_BAK.mart.PAYROLL_SUMMARY\n\t\tgroup by sphentityid,calendaryear,calendarmonth,calendaryearmonth,orgpin,strataid\n\t) previousMonth\n\ton\n\t\tCATCHALL.sphentityid = previousMonth.sphentityid and\n\t\tCATCHALL.orgpin = previousMonth.orgpin and\n\t\tCATCHALL.strataid = previousMonth.strataid and\n\t\tCATCHALL.calendarmonth = previousMonth.calendarmonth and\n\t\tCATCHALL.calendaryear = previousMonth.calendaryear\n\tleft outer join\n        (select sphentityid, calendaryear, calendarmonth, calendaryearmonth, orgpin, strataid, IsValid, IsOverride, IsReviewed, ReviewedBy from Datalake_Staging_BAK.qa.Mart_Validation_Payroll_Summary where itemid=4) previousQa\n    on\n\t\tCATCHALL.sphentityid = previousQa.sphentityid and\n\t\tCATCHALL.orgpin = previousQa.orgpin and\n\t\tCATCHALL.strataid = previousQa.strataid and\n\t\tCATCHALL.calendarmonth = previousQa.calendarmonth and\n\t\tCATCHALL.calendaryear = previousQa.calendaryear", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "Datalake_Staging.qa.Mart_Validation_Payroll_Counts"}}, "sources": {"source.compare_sql.mart.ENCOUNTER_BILLING_SUMMARY": {"fqn": ["compare_sql", "mart", "ENCOUNTER_BILLING_SUMMARY"], "database": "Datalake_Staging", "schema": "mart", "unique_id": "source.compare_sql.mart.ENCOUNTER_BILLING_SUMMARY", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "ENCOUNTER_BILLING_SUMMARY", "source_name": "mart", "source_description": "New client marts exist in the Sandbox, where our team refines the data until we can label them an \"Existing client\".  Once we consider them \"Existing\", they move into the Existing Client marts, which live solely on Staging (and Prod--but never the Sandbox).  Monthly data updates never occur in the Sandbox, only Staging.  Note!! Ad hoc development of the marts also occurs in the Sandbox, though should be scoped to its own schema so the New Client marts aren't affected!", "loader": "", "identifier": "ENCOUNTER_BILLING_SUMMARY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging.mart.ENCOUNTER_BILLING_SUMMARY", "created_at": 1669668247.109126}, "source.compare_sql.mart.ENCOUNTER_HAC": {"fqn": ["compare_sql", "mart", "ENCOUNTER_HAC"], "database": "Datalake_Staging", "schema": "mart", "unique_id": "source.compare_sql.mart.ENCOUNTER_HAC", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "ENCOUNTER_HAC", "source_name": "mart", "source_description": "New client marts exist in the Sandbox, where our team refines the data until we can label them an \"Existing client\".  Once we consider them \"Existing\", they move into the Existing Client marts, which live solely on Staging (and Prod--but never the Sandbox).  Monthly data updates never occur in the Sandbox, only Staging.  Note!! Ad hoc development of the marts also occurs in the Sandbox, though should be scoped to its own schema so the New Client marts aren't affected!", "loader": "", "identifier": "ENCOUNTER_HAC", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging.mart.ENCOUNTER_HAC", "created_at": 1669668247.109126}, "source.compare_sql.mart.ENCOUNTER_ICD10_DX": {"fqn": ["compare_sql", "mart", "ENCOUNTER_ICD10_DX"], "database": "Datalake_Staging", "schema": "mart", "unique_id": "source.compare_sql.mart.ENCOUNTER_ICD10_DX", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "ENCOUNTER_ICD10_DX", "source_name": "mart", "source_description": "New client marts exist in the Sandbox, where our team refines the data until we can label them an \"Existing client\".  Once we consider them \"Existing\", they move into the Existing Client marts, which live solely on Staging (and Prod--but never the Sandbox).  Monthly data updates never occur in the Sandbox, only Staging.  Note!! Ad hoc development of the marts also occurs in the Sandbox, though should be scoped to its own schema so the New Client marts aren't affected!", "loader": "", "identifier": "ENCOUNTER_ICD10_DX", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging.mart.ENCOUNTER_ICD10_DX", "created_at": 1669668247.109126}, "source.compare_sql.mart.ENCOUNTER_ICD10_PX": {"fqn": ["compare_sql", "mart", "ENCOUNTER_ICD10_PX"], "database": "Datalake_Staging", "schema": "mart", "unique_id": "source.compare_sql.mart.ENCOUNTER_ICD10_PX", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "ENCOUNTER_ICD10_PX", "source_name": "mart", "source_description": "New client marts exist in the Sandbox, where our team refines the data until we can label them an \"Existing client\".  Once we consider them \"Existing\", they move into the Existing Client marts, which live solely on Staging (and Prod--but never the Sandbox).  Monthly data updates never occur in the Sandbox, only Staging.  Note!! Ad hoc development of the marts also occurs in the Sandbox, though should be scoped to its own schema so the New Client marts aren't affected!", "loader": "", "identifier": "ENCOUNTER_ICD10_PX", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging.mart.ENCOUNTER_ICD10_PX", "created_at": 1669668247.109126}, "source.compare_sql.mart.ENCOUNTER_SUMMARY": {"fqn": ["compare_sql", "mart", "ENCOUNTER_SUMMARY"], "database": "Datalake_Staging", "schema": "mart", "unique_id": "source.compare_sql.mart.ENCOUNTER_SUMMARY", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "ENCOUNTER_SUMMARY", "source_name": "mart", "source_description": "New client marts exist in the Sandbox, where our team refines the data until we can label them an \"Existing client\".  Once we consider them \"Existing\", they move into the Existing Client marts, which live solely on Staging (and Prod--but never the Sandbox).  Monthly data updates never occur in the Sandbox, only Staging.  Note!! Ad hoc development of the marts also occurs in the Sandbox, though should be scoped to its own schema so the New Client marts aren't affected!", "loader": "", "identifier": "ENCOUNTER_SUMMARY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging.mart.ENCOUNTER_SUMMARY", "created_at": 1669668247.109126}, "source.compare_sql.mart.GL_SUMMARY": {"fqn": ["compare_sql", "mart", "GL_SUMMARY"], "database": "Datalake_Staging", "schema": "mart", "unique_id": "source.compare_sql.mart.GL_SUMMARY", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "GL_SUMMARY", "source_name": "mart", "source_description": "New client marts exist in the Sandbox, where our team refines the data until we can label them an \"Existing client\".  Once we consider them \"Existing\", they move into the Existing Client marts, which live solely on Staging (and Prod--but never the Sandbox).  Monthly data updates never occur in the Sandbox, only Staging.  Note!! Ad hoc development of the marts also occurs in the Sandbox, though should be scoped to its own schema so the New Client marts aren't affected!", "loader": "", "identifier": "GL_SUMMARY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging.mart.GL_SUMMARY", "created_at": 1669668247.109126}, "source.compare_sql.mart.PAYROLL_SUMMARY": {"fqn": ["compare_sql", "mart", "PAYROLL_SUMMARY"], "database": "Datalake_Staging", "schema": "mart", "unique_id": "source.compare_sql.mart.PAYROLL_SUMMARY", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "PAYROLL_SUMMARY", "source_name": "mart", "source_description": "New client marts exist in the Sandbox, where our team refines the data until we can label them an \"Existing client\".  Once we consider them \"Existing\", they move into the Existing Client marts, which live solely on Staging (and Prod--but never the Sandbox).  Monthly data updates never occur in the Sandbox, only Staging.  Note!! Ad hoc development of the marts also occurs in the Sandbox, though should be scoped to its own schema so the New Client marts aren't affected!", "loader": "", "identifier": "PAYROLL_SUMMARY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging.mart.PAYROLL_SUMMARY", "created_at": 1669668247.1101282}, "source.compare_sql.previous_qa.Mart_Validation_GL_Summary": {"fqn": ["compare_sql", "previous_qa", "Mart_Validation_GL_Summary"], "database": "Datalake_Staging_BAK", "schema": "qa", "unique_id": "source.compare_sql.previous_qa.Mart_Validation_GL_Summary", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "Mart_Validation_GL_Summary", "source_name": "previous_qa", "source_description": "Last month's existing-client marts are backed up. Not only can these be restored (if needed), they also facilitate our QA testing on the new month's data.", "loader": "", "identifier": "Mart_Validation_GL_Summary", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging_BAK.qa.Mart_Validation_GL_Summary", "created_at": 1669921394.0454857}, "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary": {"fqn": ["compare_sql", "previous_qa", "Mart_Validation_Payroll_Summary"], "database": "Datalake_Staging_BAK", "schema": "qa", "unique_id": "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "Mart_Validation_Payroll_Summary", "source_name": "previous_qa", "source_description": "Last month's existing-client marts are backed up. Not only can these be restored (if needed), they also facilitate our QA testing on the new month's data.", "loader": "", "identifier": "Mart_Validation_Payroll_Summary", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging_BAK.qa.Mart_Validation_Payroll_Summary", "created_at": 1669921394.046486}, "source.compare_sql.previous_qa.Mart_Validation_Payroll_Counts": {"fqn": ["compare_sql", "previous_qa", "Mart_Validation_Payroll_Counts"], "database": "Datalake_Staging_BAK", "schema": "qa", "unique_id": "source.compare_sql.previous_qa.Mart_Validation_Payroll_Counts", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "Mart_Validation_Payroll_Counts", "source_name": "previous_qa", "source_description": "Last month's existing-client marts are backed up. Not only can these be restored (if needed), they also facilitate our QA testing on the new month's data.", "loader": "", "identifier": "Mart_Validation_Payroll_Counts", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging_BAK.qa.Mart_Validation_Payroll_Counts", "created_at": 1669921394.046486}, "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary": {"fqn": ["compare_sql", "previous_qa", "Mart_Validation_Encounter_Summary"], "database": "Datalake_Staging_BAK", "schema": "qa", "unique_id": "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "Mart_Validation_Encounter_Summary", "source_name": "previous_qa", "source_description": "Last month's existing-client marts are backed up. Not only can these be restored (if needed), they also facilitate our QA testing on the new month's data.", "loader": "", "identifier": "Mart_Validation_Encounter_Summary", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging_BAK.qa.Mart_Validation_Encounter_Summary", "created_at": 1669921394.046486}, "source.compare_sql.previous_mart.ENCOUNTER_BILLING_SUMMARY": {"fqn": ["compare_sql", "previous_mart", "ENCOUNTER_BILLING_SUMMARY"], "database": "Datalake_Staging_BAK", "schema": "mart", "unique_id": "source.compare_sql.previous_mart.ENCOUNTER_BILLING_SUMMARY", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "ENCOUNTER_BILLING_SUMMARY", "source_name": "previous_mart", "source_description": "Last month's existing-client marts are backed up. Not only can these be restored (if needed), they also facilitate our QA testing on the new month's data.", "loader": "", "identifier": "ENCOUNTER_BILLING_SUMMARY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging_BAK.mart.ENCOUNTER_BILLING_SUMMARY", "created_at": 1669921394.046486}, "source.compare_sql.previous_mart.ENCOUNTER_HAC": {"fqn": ["compare_sql", "previous_mart", "ENCOUNTER_HAC"], "database": "Datalake_Staging_BAK", "schema": "mart", "unique_id": "source.compare_sql.previous_mart.ENCOUNTER_HAC", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "ENCOUNTER_HAC", "source_name": "previous_mart", "source_description": "Last month's existing-client marts are backed up. Not only can these be restored (if needed), they also facilitate our QA testing on the new month's data.", "loader": "", "identifier": "ENCOUNTER_HAC", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging_BAK.mart.ENCOUNTER_HAC", "created_at": 1669921394.046486}, "source.compare_sql.previous_mart.ENCOUNTER_ICD10_DX": {"fqn": ["compare_sql", "previous_mart", "ENCOUNTER_ICD10_DX"], "database": "Datalake_Staging_BAK", "schema": "mart", "unique_id": "source.compare_sql.previous_mart.ENCOUNTER_ICD10_DX", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "ENCOUNTER_ICD10_DX", "source_name": "previous_mart", "source_description": "Last month's existing-client marts are backed up. Not only can these be restored (if needed), they also facilitate our QA testing on the new month's data.", "loader": "", "identifier": "ENCOUNTER_ICD10_DX", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging_BAK.mart.ENCOUNTER_ICD10_DX", "created_at": 1669921394.046486}, "source.compare_sql.previous_mart.ENCOUNTER_ICD10_PX": {"fqn": ["compare_sql", "previous_mart", "ENCOUNTER_ICD10_PX"], "database": "Datalake_Staging_BAK", "schema": "mart", "unique_id": "source.compare_sql.previous_mart.ENCOUNTER_ICD10_PX", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "ENCOUNTER_ICD10_PX", "source_name": "previous_mart", "source_description": "Last month's existing-client marts are backed up. Not only can these be restored (if needed), they also facilitate our QA testing on the new month's data.", "loader": "", "identifier": "ENCOUNTER_ICD10_PX", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging_BAK.mart.ENCOUNTER_ICD10_PX", "created_at": 1669921394.046486}, "source.compare_sql.previous_mart.ENCOUNTER_SUMMARY": {"fqn": ["compare_sql", "previous_mart", "ENCOUNTER_SUMMARY"], "database": "Datalake_Staging_BAK", "schema": "mart", "unique_id": "source.compare_sql.previous_mart.ENCOUNTER_SUMMARY", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "ENCOUNTER_SUMMARY", "source_name": "previous_mart", "source_description": "Last month's existing-client marts are backed up. Not only can these be restored (if needed), they also facilitate our QA testing on the new month's data.", "loader": "", "identifier": "ENCOUNTER_SUMMARY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging_BAK.mart.ENCOUNTER_SUMMARY", "created_at": 1669921394.046486}, "source.compare_sql.previous_mart.GL_SUMMARY": {"fqn": ["compare_sql", "previous_mart", "GL_SUMMARY"], "database": "Datalake_Staging_BAK", "schema": "mart", "unique_id": "source.compare_sql.previous_mart.GL_SUMMARY", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "GL_SUMMARY", "source_name": "previous_mart", "source_description": "Last month's existing-client marts are backed up. Not only can these be restored (if needed), they also facilitate our QA testing on the new month's data.", "loader": "", "identifier": "GL_SUMMARY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging_BAK.mart.GL_SUMMARY", "created_at": 1669921394.046486}, "source.compare_sql.previous_mart.PAYROLL_SUMMARY": {"fqn": ["compare_sql", "previous_mart", "PAYROLL_SUMMARY"], "database": "Datalake_Staging_BAK", "schema": "mart", "unique_id": "source.compare_sql.previous_mart.PAYROLL_SUMMARY", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "PAYROLL_SUMMARY", "source_name": "previous_mart", "source_description": "Last month's existing-client marts are backed up. Not only can these be restored (if needed), they also facilitate our QA testing on the new month's data.", "loader": "", "identifier": "PAYROLL_SUMMARY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging_BAK.mart.PAYROLL_SUMMARY", "created_at": 1669921394.046486}, "source.compare_sql.compare.COMPONENT": {"fqn": ["compare_sql", "compare", "COMPONENT"], "database": "Datalake_Staging", "schema": "compare", "unique_id": "source.compare_sql.compare.COMPONENT", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "COMPONENT", "source_name": "compare", "source_description": "The [StrataSphere Compare](http://stratasphere.stratanetwork.com) application.", "loader": "", "identifier": "COMPONENT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging.compare.COMPONENT", "created_at": 1669921394.046486}, "source.compare_sql.compare.DIM_METRIC": {"fqn": ["compare_sql", "compare", "DIM_METRIC"], "database": "Datalake_Staging", "schema": "compare", "unique_id": "source.compare_sql.compare.DIM_METRIC", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "DIM_METRIC", "source_name": "compare", "source_description": "The [StrataSphere Compare](http://stratasphere.stratanetwork.com) application.", "loader": "", "identifier": "DIM_METRIC", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging.compare.DIM_METRIC", "created_at": 1669921394.0474854}, "source.compare_sql.compare.DIM_MODULE": {"fqn": ["compare_sql", "compare", "DIM_MODULE"], "database": "Datalake_Staging", "schema": "compare", "unique_id": "source.compare_sql.compare.DIM_MODULE", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "DIM_MODULE", "source_name": "compare", "source_description": "The [StrataSphere Compare](http://stratasphere.stratanetwork.com) application.", "loader": "", "identifier": "DIM_MODULE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging.compare.DIM_MODULE", "created_at": 1669921394.0474854}, "source.compare_sql.reference.SPH_CONFIGURATION": {"fqn": ["compare_sql", "reference", "SPH_CONFIGURATION"], "database": "Datalake_Sandbox", "schema": "config", "unique_id": "source.compare_sql.reference.SPH_CONFIGURATION", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "SPH_CONFIGURATION", "source_name": "reference", "source_description": "Reference tables only exist in Datalake_Sandbox. By definition they are never promoted to Staging nor Prod. Note however, they are not unchanging, but that their changes have the same impact across any downstream process. Eg, a client's DUA status, or ability to enter into a particular Mart.", "loader": "", "identifier": "SPH_CONFIGURATION", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Sandbox.config.SPH_CONFIGURATION", "created_at": 1669924836.6733532}, "source.compare_sql.config.ENTITY_CRITERIA": {"fqn": ["compare_sql", "config", "ENTITY_CRITERIA"], "database": "Datalake_Staging", "schema": "config", "unique_id": "source.compare_sql.config.ENTITY_CRITERIA", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Models\\sources.yml", "original_file_path": "Models\\sources.yml", "name": "ENTITY_CRITERIA", "source_name": "config", "source_description": "The config schema holds configuration tables to both the Marts and the Compare app. These tables exist in Datalake_Sandbox & Datalake_Staging.", "loader": "", "identifier": "ENTITY_CRITERIA", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "Datalake_Staging.config.ENTITY_CRITERIA", "created_at": 1670001785.4093668}}, "macros": {"macro.compare_sql.generate_schema_name": {"unique_id": "macro.compare_sql.generate_schema_name", "package_name": "compare_sql", "root_path": "C:\\Users\\rbrewer\\dev\\compare-sql\\Snowflake\\CompareDbt", "path": "Macros\\get_custom_schema.sql", "original_file_path": "Macros\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n    {{ log(\"Running generate_schema_name: \" ~ custom_schema_name ~ \", \" ~ node ~ \", \" ~ target) }}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n\r\n    {%- if custom_schema_name is none -%}\r\n        {{ default_schema }}\r\n\t{%- elif custom_schema_name  == 'qa' -%}\r\n        {{ custom_schema_name | trim }}\r\n    {%- else -%}\r\n        {{ default_schema }}_{{ custom_schema_name | trim }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5281088, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5461047, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5471065, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5471065, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5490756, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.550116, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5511081, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5521083, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5521083, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.553109, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.553109, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.553109, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5541084, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5551105, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5551105, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5560775, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5560775, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5571077, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5591075, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5591075, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5591075, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5601113, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5601113, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.562106, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n\n  /* {#\n       If we are running multiple statements (DELETE + INSERT),\n       we must first save the model query results as a temporary table\n       in order to guarantee consistent inputs to both statements.\n\n       If we are running a single statement (MERGE or INSERT alone),\n       we can save the model query definition as a view instead,\n       for faster overall incremental processing.\n  #} */\n\n  {% if language == 'sql' and (strategy in ('default', 'append', 'merge') or (unique_key is none)) %}\n    {{ return('view') }}\n  {% else %}  {#--  play it safe -- #}\n    {{ return('table') }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5641124, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ create_view_as(tmp_relation, compiled_code) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_view_as", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.56911, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5700772, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5721087, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5721087, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5731099, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.576113, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.577078, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.577078, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.58111, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"unique_id": "macro.dbt_snowflake.py_write_table", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.58111, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"unique_id": "macro.dbt_snowflake.py_script_comment", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.58111, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "name": "materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5821104, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5831115, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__array_construct": {"unique_id": "macro.dbt_snowflake.snowflake__array_construct", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5841103, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5841103, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5851116, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5851116, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.58611, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.58611, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.58611, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.587113, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.587113, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "package_name": "dbt_snowflake", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.587113, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.590112, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.590112, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.590112, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.590112, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5911107, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5911107, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5921142, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5921142, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5921142, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5931118, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5931118, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5931118, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5951111, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5951111, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5951111, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5961149, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.5981193, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6001122, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6001122, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6011128, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6011128, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6021168, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6021168, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.604111, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.604111, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6050801, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.606112, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6071124, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.608116, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.608116, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.608116, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6091137, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6111126, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6121154, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6121154, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6121154, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6121154, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6131146, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6131146, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6141136, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6141136, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.615115, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.616114, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.616114, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.616114, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6171148, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6171148, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.618116, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6221147, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6221147, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6231146, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6231146, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6241183, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6241183, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6251147, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6251147, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6251147, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.626112, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.626112, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6271174, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6271174, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.628118, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6291156, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6291156, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6291156, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.630115, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.630115, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6311188, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6311188, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6321151, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6321151, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6321151, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6331208, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6331208, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6331208, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6331208, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6341195, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6361148, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6381161, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.640119, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.640119, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6431155, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.644119, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.644119, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6451173, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6461165, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6471171, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6471171, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6481168, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6481168, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6491177, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6501167, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6511197, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6511197, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.652117, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6531177, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6531177, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6541166, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.656084, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.656084, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.656084, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.657084, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.657084, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6590838, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6600845, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.661085, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6620839, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6630845, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6710846, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6720846, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6780856, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6800852, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.681087, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.682087, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6830866, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6850877, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6920865, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6940875, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6960874, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.6980875, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7000875, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7000875, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7000875, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7010875, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7010875, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.702089, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.702089, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.702089, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7030885, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7030885, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7040899, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7040899, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.705088, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7060878, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7060878, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7110884, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7130897, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7140906, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7150903, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7150903, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.716092, "supported_languages": null}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.716092, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.717092, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.721092, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7260919, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.728093, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.728093, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.729093, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7300932, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7300932, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7300932, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7300932, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7311194, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7311194, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.732124, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.732124, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7351227, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7400913, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.744125, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7451313, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7451313, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7451313, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.746125, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.746125, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.746125, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7481258, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7481258, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7481258, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7491257, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7581265, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7581265, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7591279, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7641282, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7641282, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7651274, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.766127, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.766127, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.766127, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7691276, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7711277, "supported_languages": null}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7721307, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7721307, "supported_languages": null}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7761285, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7761285, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7771292, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.779131, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7800965, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7811248, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7821288, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7821288, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7821288, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7821288, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.78313, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.78313, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7841277, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7841277, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7851262, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7851262, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7861273, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7861273, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7871387, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7871387, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7881322, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7881322, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.790125, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.790125, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.790125, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.790125, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7911253, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7911253, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7911253, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7920976, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7920976, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7920976, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7931302, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7931302, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7931302, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7931302, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7941296, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7941296, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7951326, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7951326, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7961316, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7961316, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7971382, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7971382, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7981308, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7981308, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7990987, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7990987, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.7990987, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8001337, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8001337, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8010993, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8010993, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8021286, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8021286, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8031313, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8041346, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8041346, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.805131, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.805131, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.805131, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8061001, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8061001, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8071313, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8071313, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8081355, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8081355, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.809132, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8101323, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8101323, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8111346, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8111346, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8121328, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669668246.8121328, "supported_languages": null}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "c:\\users\\rbrewer\\.pyenv\\pyenv-win\\versions\\3.8.5\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.compare_sql.stg_metrics__raw_kpi_labor": ["source.compare_sql.compare.COMPONENT", "source.compare_sql.compare.DIM_METRIC"], "model.compare_sql.int_metrics_final": ["model.compare_sql.int_metrics__obvious_exclusions"], "model.compare_sql.metric": ["model.compare_sql.int_metrics_final"], "model.compare_sql.stg_metrics__raw_overhead": ["source.compare_sql.compare.COMPONENT", "source.compare_sql.compare.DIM_METRIC"], "model.compare_sql.int_metrics__obvious_exclusions": ["model.compare_sql.stg_metrics__raw_unioned", "source.compare_sql.compare.DIM_METRIC", "source.compare_sql.compare.DIM_MODULE"], "model.compare_sql.stg_metrics__raw_unioned": ["model.compare_sql.stg_metrics__raw_kpi_labor", "model.compare_sql.stg_metrics__raw_overhead"], "model.compare_sql.Mart_Validation_Payroll_NonSpecified": ["source.compare_sql.mart.PAYROLL_SUMMARY"], "model.compare_sql.Mart_Validation_Payroll_Sph": ["source.compare_sql.mart.PAYROLL_SUMMARY"], "model.compare_sql.Mart_Validation_Payroll_Hours_Dollars": ["source.compare_sql.mart.PAYROLL_SUMMARY"], "model.compare_sql.Mart_Validation_GL_Sph": ["source.compare_sql.mart.GL_SUMMARY"], "model.compare_sql.Mart_Validation_Encounter_Summary": ["model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_PercentValid", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary"], "model.compare_sql.Mart_Validation_Encounter_Counts": ["source.compare_sql.config.ENTITY_CRITERIA", "source.compare_sql.mart.ENCOUNTER_BILLING_SUMMARY", "source.compare_sql.mart.ENCOUNTER_HAC", "source.compare_sql.mart.ENCOUNTER_ICD10_DX", "source.compare_sql.mart.ENCOUNTER_ICD10_PX", "source.compare_sql.mart.ENCOUNTER_SUMMARY", "source.compare_sql.mart.ENCOUNTER_SUMMARY", "source.compare_sql.mart.ENCOUNTER_SUMMARY", "source.compare_sql.previous_mart.ENCOUNTER_BILLING_SUMMARY", "source.compare_sql.previous_mart.ENCOUNTER_HAC", "source.compare_sql.previous_mart.ENCOUNTER_ICD10_DX", "source.compare_sql.previous_mart.ENCOUNTER_ICD10_PX", "source.compare_sql.previous_mart.ENCOUNTER_SUMMARY", "source.compare_sql.previous_mart.ENCOUNTER_SUMMARY", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary", "source.compare_sql.reference.SPH_CONFIGURATION"], "model.compare_sql.Mart_Validation_Encounter_PercentValid": ["source.compare_sql.config.ENTITY_CRITERIA", "source.compare_sql.mart.ENCOUNTER_ICD10_DX", "source.compare_sql.mart.ENCOUNTER_ICD10_PX", "source.compare_sql.mart.ENCOUNTER_SUMMARY", "source.compare_sql.reference.SPH_CONFIGURATION"], "model.compare_sql.Mart_Validation_GL_Summary": ["model.compare_sql.Mart_Validation_GL_Counts", "model.compare_sql.Mart_Validation_GL_Sph", "source.compare_sql.previous_qa.Mart_Validation_GL_Summary", "source.compare_sql.previous_qa.Mart_Validation_GL_Summary"], "model.compare_sql.Mart_Validation_GL_Counts": ["source.compare_sql.config.ENTITY_CRITERIA", "source.compare_sql.mart.GL_SUMMARY", "source.compare_sql.mart.GL_SUMMARY", "source.compare_sql.mart.GL_SUMMARY", "source.compare_sql.mart.GL_SUMMARY", "source.compare_sql.previous_mart.GL_SUMMARY", "source.compare_sql.previous_mart.GL_SUMMARY", "source.compare_sql.previous_mart.GL_SUMMARY", "source.compare_sql.previous_qa.Mart_Validation_GL_Summary", "source.compare_sql.previous_qa.Mart_Validation_GL_Summary", "source.compare_sql.previous_qa.Mart_Validation_GL_Summary", "source.compare_sql.reference.SPH_CONFIGURATION"], "model.compare_sql.Mart_Validation_Payroll_Summary": ["model.compare_sql.Mart_Validation_Payroll_Counts", "model.compare_sql.Mart_Validation_Payroll_Hours_Dollars", "model.compare_sql.Mart_Validation_Payroll_NonSpecified", "model.compare_sql.Mart_Validation_Payroll_Sph", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary"], "model.compare_sql.Mart_Validation_Payroll_Counts": ["source.compare_sql.config.ENTITY_CRITERIA", "source.compare_sql.mart.PAYROLL_SUMMARY", "source.compare_sql.mart.PAYROLL_SUMMARY", "source.compare_sql.mart.PAYROLL_SUMMARY", "source.compare_sql.mart.PAYROLL_SUMMARY", "source.compare_sql.mart.PAYROLL_SUMMARY", "source.compare_sql.previous_mart.PAYROLL_SUMMARY", "source.compare_sql.previous_mart.PAYROLL_SUMMARY", "source.compare_sql.previous_mart.PAYROLL_SUMMARY", "source.compare_sql.previous_mart.PAYROLL_SUMMARY", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary", "source.compare_sql.reference.SPH_CONFIGURATION"], "source.compare_sql.mart.ENCOUNTER_BILLING_SUMMARY": [], "source.compare_sql.mart.ENCOUNTER_HAC": [], "source.compare_sql.mart.ENCOUNTER_ICD10_DX": [], "source.compare_sql.mart.ENCOUNTER_ICD10_PX": [], "source.compare_sql.mart.ENCOUNTER_SUMMARY": [], "source.compare_sql.mart.GL_SUMMARY": [], "source.compare_sql.mart.PAYROLL_SUMMARY": [], "source.compare_sql.previous_qa.Mart_Validation_GL_Summary": [], "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary": [], "source.compare_sql.previous_qa.Mart_Validation_Payroll_Counts": [], "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary": [], "source.compare_sql.previous_mart.ENCOUNTER_BILLING_SUMMARY": [], "source.compare_sql.previous_mart.ENCOUNTER_HAC": [], "source.compare_sql.previous_mart.ENCOUNTER_ICD10_DX": [], "source.compare_sql.previous_mart.ENCOUNTER_ICD10_PX": [], "source.compare_sql.previous_mart.ENCOUNTER_SUMMARY": [], "source.compare_sql.previous_mart.GL_SUMMARY": [], "source.compare_sql.previous_mart.PAYROLL_SUMMARY": [], "source.compare_sql.compare.COMPONENT": [], "source.compare_sql.compare.DIM_METRIC": [], "source.compare_sql.compare.DIM_MODULE": [], "source.compare_sql.reference.SPH_CONFIGURATION": [], "source.compare_sql.config.ENTITY_CRITERIA": []}, "child_map": {"model.compare_sql.stg_metrics__raw_kpi_labor": ["model.compare_sql.stg_metrics__raw_unioned"], "model.compare_sql.int_metrics_final": ["model.compare_sql.metric"], "model.compare_sql.metric": [], "model.compare_sql.stg_metrics__raw_overhead": ["model.compare_sql.stg_metrics__raw_unioned"], "model.compare_sql.int_metrics__obvious_exclusions": ["model.compare_sql.int_metrics_final"], "model.compare_sql.stg_metrics__raw_unioned": ["model.compare_sql.int_metrics__obvious_exclusions"], "model.compare_sql.Mart_Validation_Payroll_NonSpecified": ["model.compare_sql.Mart_Validation_Payroll_Summary"], "model.compare_sql.Mart_Validation_Payroll_Sph": ["model.compare_sql.Mart_Validation_Payroll_Summary"], "model.compare_sql.Mart_Validation_Payroll_Hours_Dollars": ["model.compare_sql.Mart_Validation_Payroll_Summary"], "model.compare_sql.Mart_Validation_GL_Sph": ["model.compare_sql.Mart_Validation_GL_Summary"], "model.compare_sql.Mart_Validation_Encounter_Summary": [], "model.compare_sql.Mart_Validation_Encounter_Counts": ["model.compare_sql.Mart_Validation_Encounter_Summary"], "model.compare_sql.Mart_Validation_Encounter_PercentValid": ["model.compare_sql.Mart_Validation_Encounter_Summary"], "model.compare_sql.Mart_Validation_GL_Summary": [], "model.compare_sql.Mart_Validation_GL_Counts": ["model.compare_sql.Mart_Validation_GL_Summary"], "model.compare_sql.Mart_Validation_Payroll_Summary": [], "model.compare_sql.Mart_Validation_Payroll_Counts": ["model.compare_sql.Mart_Validation_Payroll_Summary"], "source.compare_sql.mart.ENCOUNTER_BILLING_SUMMARY": ["model.compare_sql.Mart_Validation_Encounter_Counts"], "source.compare_sql.mart.ENCOUNTER_HAC": ["model.compare_sql.Mart_Validation_Encounter_Counts"], "source.compare_sql.mart.ENCOUNTER_ICD10_DX": ["model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_PercentValid"], "source.compare_sql.mart.ENCOUNTER_ICD10_PX": ["model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_PercentValid"], "source.compare_sql.mart.ENCOUNTER_SUMMARY": ["model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_PercentValid"], "source.compare_sql.mart.GL_SUMMARY": ["model.compare_sql.Mart_Validation_GL_Counts", "model.compare_sql.Mart_Validation_GL_Counts", "model.compare_sql.Mart_Validation_GL_Counts", "model.compare_sql.Mart_Validation_GL_Counts", "model.compare_sql.Mart_Validation_GL_Sph"], "source.compare_sql.mart.PAYROLL_SUMMARY": ["model.compare_sql.Mart_Validation_Payroll_Counts", "model.compare_sql.Mart_Validation_Payroll_Counts", "model.compare_sql.Mart_Validation_Payroll_Counts", "model.compare_sql.Mart_Validation_Payroll_Counts", "model.compare_sql.Mart_Validation_Payroll_Counts", "model.compare_sql.Mart_Validation_Payroll_Hours_Dollars", "model.compare_sql.Mart_Validation_Payroll_NonSpecified", "model.compare_sql.Mart_Validation_Payroll_Sph"], "source.compare_sql.previous_qa.Mart_Validation_GL_Summary": ["model.compare_sql.Mart_Validation_GL_Counts", "model.compare_sql.Mart_Validation_GL_Counts", "model.compare_sql.Mart_Validation_GL_Counts", "model.compare_sql.Mart_Validation_GL_Summary", "model.compare_sql.Mart_Validation_GL_Summary"], "source.compare_sql.previous_qa.Mart_Validation_Payroll_Summary": ["model.compare_sql.Mart_Validation_Payroll_Counts", "model.compare_sql.Mart_Validation_Payroll_Counts", "model.compare_sql.Mart_Validation_Payroll_Counts", "model.compare_sql.Mart_Validation_Payroll_Counts", "model.compare_sql.Mart_Validation_Payroll_Summary", "model.compare_sql.Mart_Validation_Payroll_Summary", "model.compare_sql.Mart_Validation_Payroll_Summary", "model.compare_sql.Mart_Validation_Payroll_Summary"], "source.compare_sql.previous_qa.Mart_Validation_Payroll_Counts": [], "source.compare_sql.previous_qa.Mart_Validation_Encounter_Summary": ["model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_Summary", "model.compare_sql.Mart_Validation_Encounter_Summary"], "source.compare_sql.previous_mart.ENCOUNTER_BILLING_SUMMARY": ["model.compare_sql.Mart_Validation_Encounter_Counts"], "source.compare_sql.previous_mart.ENCOUNTER_HAC": ["model.compare_sql.Mart_Validation_Encounter_Counts"], "source.compare_sql.previous_mart.ENCOUNTER_ICD10_DX": ["model.compare_sql.Mart_Validation_Encounter_Counts"], "source.compare_sql.previous_mart.ENCOUNTER_ICD10_PX": ["model.compare_sql.Mart_Validation_Encounter_Counts"], "source.compare_sql.previous_mart.ENCOUNTER_SUMMARY": ["model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_Counts"], "source.compare_sql.previous_mart.GL_SUMMARY": ["model.compare_sql.Mart_Validation_GL_Counts", "model.compare_sql.Mart_Validation_GL_Counts", "model.compare_sql.Mart_Validation_GL_Counts"], "source.compare_sql.previous_mart.PAYROLL_SUMMARY": ["model.compare_sql.Mart_Validation_Payroll_Counts", "model.compare_sql.Mart_Validation_Payroll_Counts", "model.compare_sql.Mart_Validation_Payroll_Counts", "model.compare_sql.Mart_Validation_Payroll_Counts"], "source.compare_sql.compare.COMPONENT": ["model.compare_sql.stg_metrics__raw_kpi_labor", "model.compare_sql.stg_metrics__raw_overhead"], "source.compare_sql.compare.DIM_METRIC": ["model.compare_sql.int_metrics__obvious_exclusions", "model.compare_sql.stg_metrics__raw_kpi_labor", "model.compare_sql.stg_metrics__raw_overhead"], "source.compare_sql.compare.DIM_MODULE": ["model.compare_sql.int_metrics__obvious_exclusions"], "source.compare_sql.reference.SPH_CONFIGURATION": ["model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_PercentValid", "model.compare_sql.Mart_Validation_GL_Counts", "model.compare_sql.Mart_Validation_Payroll_Counts"], "source.compare_sql.config.ENTITY_CRITERIA": ["model.compare_sql.Mart_Validation_Encounter_Counts", "model.compare_sql.Mart_Validation_Encounter_PercentValid", "model.compare_sql.Mart_Validation_GL_Counts", "model.compare_sql.Mart_Validation_Payroll_Counts"]}}